
W25Q64_WEACTBLACK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000394  20000004  20000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  20000398  20000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  200003a0  200003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  200003a4  200003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  200003a8  200003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f0  20000418  20000418  00010418  2**2
                  ALLOC
  6 .text         00009dcc  20000608  20000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RamFunc      00000110  2000a3d4  2000a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .Dev_info     000000c8  2000a4e4  2000a4e4  0002a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rodata       00000068  2000a5ac  2000a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .eh_frame     00000004  2000a614  2000a614  0001a614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 ._user_heap_stack 00000600  2000a618  2000a618  0001a618  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002a5ac  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002a5dc  2**0
                  CONTENTS, READONLY
 14 .debug_line   00011b0f  00000000  00000000  0002a61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000143  00000000  00000000  0003c12e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0000aa1d  00000000  00000000  0003c271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00002d67  00000000  00000000  00046c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000cc8  00000000  00000000  000499f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000885f4  00000000  00000000  0004a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00017e3b  00000000  00000000  000d2cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00000912  00000000  00000000  000eaaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003410  00000000  00000000  000eb404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

20000608 <__do_global_dtors_aux>:
20000608:	b510      	push	{r4, lr}
2000060a:	4c05      	ldr	r4, [pc, #20]	; (20000620 <__do_global_dtors_aux+0x18>)
2000060c:	7823      	ldrb	r3, [r4, #0]
2000060e:	b933      	cbnz	r3, 2000061e <__do_global_dtors_aux+0x16>
20000610:	4b04      	ldr	r3, [pc, #16]	; (20000624 <__do_global_dtors_aux+0x1c>)
20000612:	b113      	cbz	r3, 2000061a <__do_global_dtors_aux+0x12>
20000614:	4804      	ldr	r0, [pc, #16]	; (20000628 <__do_global_dtors_aux+0x20>)
20000616:	f3af 8000 	nop.w
2000061a:	2301      	movs	r3, #1
2000061c:	7023      	strb	r3, [r4, #0]
2000061e:	bd10      	pop	{r4, pc}
20000620:	20000418 	.word	0x20000418
20000624:	00000000 	.word	0x00000000
20000628:	2000a614 	.word	0x2000a614

2000062c <frame_dummy>:
2000062c:	b508      	push	{r3, lr}
2000062e:	4b03      	ldr	r3, [pc, #12]	; (2000063c <frame_dummy+0x10>)
20000630:	b11b      	cbz	r3, 2000063a <frame_dummy+0xe>
20000632:	4903      	ldr	r1, [pc, #12]	; (20000640 <frame_dummy+0x14>)
20000634:	4803      	ldr	r0, [pc, #12]	; (20000644 <frame_dummy+0x18>)
20000636:	f3af 8000 	nop.w
2000063a:	bd08      	pop	{r3, pc}
2000063c:	00000000 	.word	0x00000000
20000640:	2000041c 	.word	0x2000041c
20000644:	2000a614 	.word	0x2000a614

20000648 <_stack_init>:
20000648:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
2000064c:	4770      	bx	lr
2000064e:	bf00      	nop

20000650 <_mainCRTStartup>:
20000650:	4b17      	ldr	r3, [pc, #92]	; (200006b0 <_mainCRTStartup+0x60>)
20000652:	2b00      	cmp	r3, #0
20000654:	bf08      	it	eq
20000656:	4b13      	ldreq	r3, [pc, #76]	; (200006a4 <_mainCRTStartup+0x54>)
20000658:	469d      	mov	sp, r3
2000065a:	f7ff fff5 	bl	20000648 <_stack_init>
2000065e:	2100      	movs	r1, #0
20000660:	468b      	mov	fp, r1
20000662:	460f      	mov	r7, r1
20000664:	4813      	ldr	r0, [pc, #76]	; (200006b4 <_mainCRTStartup+0x64>)
20000666:	4a14      	ldr	r2, [pc, #80]	; (200006b8 <_mainCRTStartup+0x68>)
20000668:	1a12      	subs	r2, r2, r0
2000066a:	f009 fc02 	bl	20009e72 <memset>
2000066e:	4b0e      	ldr	r3, [pc, #56]	; (200006a8 <_mainCRTStartup+0x58>)
20000670:	2b00      	cmp	r3, #0
20000672:	d000      	beq.n	20000676 <_mainCRTStartup+0x26>
20000674:	4798      	blx	r3
20000676:	4b0d      	ldr	r3, [pc, #52]	; (200006ac <_mainCRTStartup+0x5c>)
20000678:	2b00      	cmp	r3, #0
2000067a:	d000      	beq.n	2000067e <_mainCRTStartup+0x2e>
2000067c:	4798      	blx	r3
2000067e:	2000      	movs	r0, #0
20000680:	2100      	movs	r1, #0
20000682:	0004      	movs	r4, r0
20000684:	000d      	movs	r5, r1
20000686:	480d      	ldr	r0, [pc, #52]	; (200006bc <_mainCRTStartup+0x6c>)
20000688:	2800      	cmp	r0, #0
2000068a:	d002      	beq.n	20000692 <_mainCRTStartup+0x42>
2000068c:	480c      	ldr	r0, [pc, #48]	; (200006c0 <_mainCRTStartup+0x70>)
2000068e:	f3af 8000 	nop.w
20000692:	f009 fc99 	bl	20009fc8 <__libc_init_array>
20000696:	0020      	movs	r0, r4
20000698:	0029      	movs	r1, r5
2000069a:	f000 fc21 	bl	20000ee0 <main>
2000069e:	f009 fa47 	bl	20009b30 <exit>
200006a2:	bf00      	nop
200006a4:	00080000 	.word	0x00080000
	...
200006b4:	20000418 	.word	0x20000418
200006b8:	20000608 	.word	0x20000608
	...
200006c4:	200003a8 	.word	0x200003a8
200006c8:	200003a8 	.word	0x200003a8
200006cc:	20000418 	.word	0x20000418
200006d0:	20000418 	.word	0x20000418
200006d4:	20000608 	.word	0x20000608

200006d8 <__aeabi_uldivmod>:
200006d8:	b953      	cbnz	r3, 200006f0 <__aeabi_uldivmod+0x18>
200006da:	b94a      	cbnz	r2, 200006f0 <__aeabi_uldivmod+0x18>
200006dc:	2900      	cmp	r1, #0
200006de:	bf08      	it	eq
200006e0:	2800      	cmpeq	r0, #0
200006e2:	bf1c      	itt	ne
200006e4:	f04f 31ff 	movne.w	r1, #4294967295
200006e8:	f04f 30ff 	movne.w	r0, #4294967295
200006ec:	f000 b970 	b.w	200009d0 <__aeabi_idiv0>
200006f0:	f1ad 0c08 	sub.w	ip, sp, #8
200006f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200006f8:	f000 f806 	bl	20000708 <__udivmoddi4>
200006fc:	f8dd e004 	ldr.w	lr, [sp, #4]
20000700:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
20000704:	b004      	add	sp, #16
20000706:	4770      	bx	lr

20000708 <__udivmoddi4>:
20000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000070c:	9e08      	ldr	r6, [sp, #32]
2000070e:	460d      	mov	r5, r1
20000710:	4604      	mov	r4, r0
20000712:	460f      	mov	r7, r1
20000714:	2b00      	cmp	r3, #0
20000716:	d14a      	bne.n	200007ae <__udivmoddi4+0xa6>
20000718:	428a      	cmp	r2, r1
2000071a:	4694      	mov	ip, r2
2000071c:	d965      	bls.n	200007ea <__udivmoddi4+0xe2>
2000071e:	fab2 f382 	clz	r3, r2
20000722:	b143      	cbz	r3, 20000736 <__udivmoddi4+0x2e>
20000724:	fa02 fc03 	lsl.w	ip, r2, r3
20000728:	f1c3 0220 	rsb	r2, r3, #32
2000072c:	409f      	lsls	r7, r3
2000072e:	fa20 f202 	lsr.w	r2, r0, r2
20000732:	4317      	orrs	r7, r2
20000734:	409c      	lsls	r4, r3
20000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
2000073a:	fa1f f58c 	uxth.w	r5, ip
2000073e:	fbb7 f1fe 	udiv	r1, r7, lr
20000742:	0c22      	lsrs	r2, r4, #16
20000744:	fb0e 7711 	mls	r7, lr, r1, r7
20000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
2000074c:	fb01 f005 	mul.w	r0, r1, r5
20000750:	4290      	cmp	r0, r2
20000752:	d90a      	bls.n	2000076a <__udivmoddi4+0x62>
20000754:	eb1c 0202 	adds.w	r2, ip, r2
20000758:	f101 37ff 	add.w	r7, r1, #4294967295
2000075c:	f080 811c 	bcs.w	20000998 <__udivmoddi4+0x290>
20000760:	4290      	cmp	r0, r2
20000762:	f240 8119 	bls.w	20000998 <__udivmoddi4+0x290>
20000766:	3902      	subs	r1, #2
20000768:	4462      	add	r2, ip
2000076a:	1a12      	subs	r2, r2, r0
2000076c:	b2a4      	uxth	r4, r4
2000076e:	fbb2 f0fe 	udiv	r0, r2, lr
20000772:	fb0e 2210 	mls	r2, lr, r0, r2
20000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
2000077a:	fb00 f505 	mul.w	r5, r0, r5
2000077e:	42a5      	cmp	r5, r4
20000780:	d90a      	bls.n	20000798 <__udivmoddi4+0x90>
20000782:	eb1c 0404 	adds.w	r4, ip, r4
20000786:	f100 32ff 	add.w	r2, r0, #4294967295
2000078a:	f080 8107 	bcs.w	2000099c <__udivmoddi4+0x294>
2000078e:	42a5      	cmp	r5, r4
20000790:	f240 8104 	bls.w	2000099c <__udivmoddi4+0x294>
20000794:	4464      	add	r4, ip
20000796:	3802      	subs	r0, #2
20000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
2000079c:	1b64      	subs	r4, r4, r5
2000079e:	2100      	movs	r1, #0
200007a0:	b11e      	cbz	r6, 200007aa <__udivmoddi4+0xa2>
200007a2:	40dc      	lsrs	r4, r3
200007a4:	2300      	movs	r3, #0
200007a6:	e9c6 4300 	strd	r4, r3, [r6]
200007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200007ae:	428b      	cmp	r3, r1
200007b0:	d908      	bls.n	200007c4 <__udivmoddi4+0xbc>
200007b2:	2e00      	cmp	r6, #0
200007b4:	f000 80ed 	beq.w	20000992 <__udivmoddi4+0x28a>
200007b8:	2100      	movs	r1, #0
200007ba:	e9c6 0500 	strd	r0, r5, [r6]
200007be:	4608      	mov	r0, r1
200007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200007c4:	fab3 f183 	clz	r1, r3
200007c8:	2900      	cmp	r1, #0
200007ca:	d149      	bne.n	20000860 <__udivmoddi4+0x158>
200007cc:	42ab      	cmp	r3, r5
200007ce:	d302      	bcc.n	200007d6 <__udivmoddi4+0xce>
200007d0:	4282      	cmp	r2, r0
200007d2:	f200 80f8 	bhi.w	200009c6 <__udivmoddi4+0x2be>
200007d6:	1a84      	subs	r4, r0, r2
200007d8:	eb65 0203 	sbc.w	r2, r5, r3
200007dc:	2001      	movs	r0, #1
200007de:	4617      	mov	r7, r2
200007e0:	2e00      	cmp	r6, #0
200007e2:	d0e2      	beq.n	200007aa <__udivmoddi4+0xa2>
200007e4:	e9c6 4700 	strd	r4, r7, [r6]
200007e8:	e7df      	b.n	200007aa <__udivmoddi4+0xa2>
200007ea:	b902      	cbnz	r2, 200007ee <__udivmoddi4+0xe6>
200007ec:	deff      	udf	#255	; 0xff
200007ee:	fab2 f382 	clz	r3, r2
200007f2:	2b00      	cmp	r3, #0
200007f4:	f040 8090 	bne.w	20000918 <__udivmoddi4+0x210>
200007f8:	1a8a      	subs	r2, r1, r2
200007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
200007fe:	fa1f fe8c 	uxth.w	lr, ip
20000802:	2101      	movs	r1, #1
20000804:	fbb2 f5f7 	udiv	r5, r2, r7
20000808:	fb07 2015 	mls	r0, r7, r5, r2
2000080c:	0c22      	lsrs	r2, r4, #16
2000080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
20000812:	fb0e f005 	mul.w	r0, lr, r5
20000816:	4290      	cmp	r0, r2
20000818:	d908      	bls.n	2000082c <__udivmoddi4+0x124>
2000081a:	eb1c 0202 	adds.w	r2, ip, r2
2000081e:	f105 38ff 	add.w	r8, r5, #4294967295
20000822:	d202      	bcs.n	2000082a <__udivmoddi4+0x122>
20000824:	4290      	cmp	r0, r2
20000826:	f200 80cb 	bhi.w	200009c0 <__udivmoddi4+0x2b8>
2000082a:	4645      	mov	r5, r8
2000082c:	1a12      	subs	r2, r2, r0
2000082e:	b2a4      	uxth	r4, r4
20000830:	fbb2 f0f7 	udiv	r0, r2, r7
20000834:	fb07 2210 	mls	r2, r7, r0, r2
20000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
2000083c:	fb0e fe00 	mul.w	lr, lr, r0
20000840:	45a6      	cmp	lr, r4
20000842:	d908      	bls.n	20000856 <__udivmoddi4+0x14e>
20000844:	eb1c 0404 	adds.w	r4, ip, r4
20000848:	f100 32ff 	add.w	r2, r0, #4294967295
2000084c:	d202      	bcs.n	20000854 <__udivmoddi4+0x14c>
2000084e:	45a6      	cmp	lr, r4
20000850:	f200 80bb 	bhi.w	200009ca <__udivmoddi4+0x2c2>
20000854:	4610      	mov	r0, r2
20000856:	eba4 040e 	sub.w	r4, r4, lr
2000085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
2000085e:	e79f      	b.n	200007a0 <__udivmoddi4+0x98>
20000860:	f1c1 0720 	rsb	r7, r1, #32
20000864:	408b      	lsls	r3, r1
20000866:	fa22 fc07 	lsr.w	ip, r2, r7
2000086a:	ea4c 0c03 	orr.w	ip, ip, r3
2000086e:	fa05 f401 	lsl.w	r4, r5, r1
20000872:	fa20 f307 	lsr.w	r3, r0, r7
20000876:	40fd      	lsrs	r5, r7
20000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
2000087c:	4323      	orrs	r3, r4
2000087e:	fbb5 f8f9 	udiv	r8, r5, r9
20000882:	fa1f fe8c 	uxth.w	lr, ip
20000886:	fb09 5518 	mls	r5, r9, r8, r5
2000088a:	0c1c      	lsrs	r4, r3, #16
2000088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
20000890:	fb08 f50e 	mul.w	r5, r8, lr
20000894:	42a5      	cmp	r5, r4
20000896:	fa02 f201 	lsl.w	r2, r2, r1
2000089a:	fa00 f001 	lsl.w	r0, r0, r1
2000089e:	d90b      	bls.n	200008b8 <__udivmoddi4+0x1b0>
200008a0:	eb1c 0404 	adds.w	r4, ip, r4
200008a4:	f108 3aff 	add.w	sl, r8, #4294967295
200008a8:	f080 8088 	bcs.w	200009bc <__udivmoddi4+0x2b4>
200008ac:	42a5      	cmp	r5, r4
200008ae:	f240 8085 	bls.w	200009bc <__udivmoddi4+0x2b4>
200008b2:	f1a8 0802 	sub.w	r8, r8, #2
200008b6:	4464      	add	r4, ip
200008b8:	1b64      	subs	r4, r4, r5
200008ba:	b29d      	uxth	r5, r3
200008bc:	fbb4 f3f9 	udiv	r3, r4, r9
200008c0:	fb09 4413 	mls	r4, r9, r3, r4
200008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
200008c8:	fb03 fe0e 	mul.w	lr, r3, lr
200008cc:	45a6      	cmp	lr, r4
200008ce:	d908      	bls.n	200008e2 <__udivmoddi4+0x1da>
200008d0:	eb1c 0404 	adds.w	r4, ip, r4
200008d4:	f103 35ff 	add.w	r5, r3, #4294967295
200008d8:	d26c      	bcs.n	200009b4 <__udivmoddi4+0x2ac>
200008da:	45a6      	cmp	lr, r4
200008dc:	d96a      	bls.n	200009b4 <__udivmoddi4+0x2ac>
200008de:	3b02      	subs	r3, #2
200008e0:	4464      	add	r4, ip
200008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
200008e6:	fba3 9502 	umull	r9, r5, r3, r2
200008ea:	eba4 040e 	sub.w	r4, r4, lr
200008ee:	42ac      	cmp	r4, r5
200008f0:	46c8      	mov	r8, r9
200008f2:	46ae      	mov	lr, r5
200008f4:	d356      	bcc.n	200009a4 <__udivmoddi4+0x29c>
200008f6:	d053      	beq.n	200009a0 <__udivmoddi4+0x298>
200008f8:	b156      	cbz	r6, 20000910 <__udivmoddi4+0x208>
200008fa:	ebb0 0208 	subs.w	r2, r0, r8
200008fe:	eb64 040e 	sbc.w	r4, r4, lr
20000902:	fa04 f707 	lsl.w	r7, r4, r7
20000906:	40ca      	lsrs	r2, r1
20000908:	40cc      	lsrs	r4, r1
2000090a:	4317      	orrs	r7, r2
2000090c:	e9c6 7400 	strd	r7, r4, [r6]
20000910:	4618      	mov	r0, r3
20000912:	2100      	movs	r1, #0
20000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000918:	f1c3 0120 	rsb	r1, r3, #32
2000091c:	fa02 fc03 	lsl.w	ip, r2, r3
20000920:	fa20 f201 	lsr.w	r2, r0, r1
20000924:	fa25 f101 	lsr.w	r1, r5, r1
20000928:	409d      	lsls	r5, r3
2000092a:	432a      	orrs	r2, r5
2000092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
20000930:	fa1f fe8c 	uxth.w	lr, ip
20000934:	fbb1 f0f7 	udiv	r0, r1, r7
20000938:	fb07 1510 	mls	r5, r7, r0, r1
2000093c:	0c11      	lsrs	r1, r2, #16
2000093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
20000942:	fb00 f50e 	mul.w	r5, r0, lr
20000946:	428d      	cmp	r5, r1
20000948:	fa04 f403 	lsl.w	r4, r4, r3
2000094c:	d908      	bls.n	20000960 <__udivmoddi4+0x258>
2000094e:	eb1c 0101 	adds.w	r1, ip, r1
20000952:	f100 38ff 	add.w	r8, r0, #4294967295
20000956:	d22f      	bcs.n	200009b8 <__udivmoddi4+0x2b0>
20000958:	428d      	cmp	r5, r1
2000095a:	d92d      	bls.n	200009b8 <__udivmoddi4+0x2b0>
2000095c:	3802      	subs	r0, #2
2000095e:	4461      	add	r1, ip
20000960:	1b49      	subs	r1, r1, r5
20000962:	b292      	uxth	r2, r2
20000964:	fbb1 f5f7 	udiv	r5, r1, r7
20000968:	fb07 1115 	mls	r1, r7, r5, r1
2000096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
20000970:	fb05 f10e 	mul.w	r1, r5, lr
20000974:	4291      	cmp	r1, r2
20000976:	d908      	bls.n	2000098a <__udivmoddi4+0x282>
20000978:	eb1c 0202 	adds.w	r2, ip, r2
2000097c:	f105 38ff 	add.w	r8, r5, #4294967295
20000980:	d216      	bcs.n	200009b0 <__udivmoddi4+0x2a8>
20000982:	4291      	cmp	r1, r2
20000984:	d914      	bls.n	200009b0 <__udivmoddi4+0x2a8>
20000986:	3d02      	subs	r5, #2
20000988:	4462      	add	r2, ip
2000098a:	1a52      	subs	r2, r2, r1
2000098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
20000990:	e738      	b.n	20000804 <__udivmoddi4+0xfc>
20000992:	4631      	mov	r1, r6
20000994:	4630      	mov	r0, r6
20000996:	e708      	b.n	200007aa <__udivmoddi4+0xa2>
20000998:	4639      	mov	r1, r7
2000099a:	e6e6      	b.n	2000076a <__udivmoddi4+0x62>
2000099c:	4610      	mov	r0, r2
2000099e:	e6fb      	b.n	20000798 <__udivmoddi4+0x90>
200009a0:	4548      	cmp	r0, r9
200009a2:	d2a9      	bcs.n	200008f8 <__udivmoddi4+0x1f0>
200009a4:	ebb9 0802 	subs.w	r8, r9, r2
200009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
200009ac:	3b01      	subs	r3, #1
200009ae:	e7a3      	b.n	200008f8 <__udivmoddi4+0x1f0>
200009b0:	4645      	mov	r5, r8
200009b2:	e7ea      	b.n	2000098a <__udivmoddi4+0x282>
200009b4:	462b      	mov	r3, r5
200009b6:	e794      	b.n	200008e2 <__udivmoddi4+0x1da>
200009b8:	4640      	mov	r0, r8
200009ba:	e7d1      	b.n	20000960 <__udivmoddi4+0x258>
200009bc:	46d0      	mov	r8, sl
200009be:	e77b      	b.n	200008b8 <__udivmoddi4+0x1b0>
200009c0:	3d02      	subs	r5, #2
200009c2:	4462      	add	r2, ip
200009c4:	e732      	b.n	2000082c <__udivmoddi4+0x124>
200009c6:	4608      	mov	r0, r1
200009c8:	e70a      	b.n	200007e0 <__udivmoddi4+0xd8>
200009ca:	4464      	add	r4, ip
200009cc:	3802      	subs	r0, #2
200009ce:	e742      	b.n	20000856 <__udivmoddi4+0x14e>

200009d0 <__aeabi_idiv0>:
200009d0:	4770      	bx	lr
200009d2:	bf00      	nop

200009d4 <LOC_SPI_Init>:
/* STEP 3 *************************************
 * change the init function to call as per SPI
 * port used (hint: that's the function
 * available in spi.c, check it)
 * ********************************************/
void LOC_SPI_Init(){
200009d4:	b580      	push	{r7, lr}
200009d6:	af00      	add	r7, sp, #0
	MX_SPI1_Init();        // !!! this line needs to be aligned to the SPI port used!  Check this function: it is defined in spi.c !!!
200009d8:	f000 fafc 	bl	20000fd4 <MX_SPI1_Init>
}
200009dc:	bf00      	nop
200009de:	bd80      	pop	{r7, pc}

200009e0 <LOC_Delay>:
/**********************************************
 * roughly waints for "Delay" ms before return
 * set uC clock speed. Tested on M4, maybe has
 *  to change using other uC.
 * ********************************************/
void LOC_Delay(uint32_t Delay) {
200009e0:	b480      	push	{r7}
200009e2:	b087      	sub	sp, #28
200009e4:	af00      	add	r7, sp, #0
200009e6:	6078      	str	r0, [r7, #4]
const uint32_t clock=100; 		// uC MHz
200009e8:	2364      	movs	r3, #100	; 0x64
200009ea:	617b      	str	r3, [r7, #20]
volatile uint32_t delay1;			//
volatile uint32_t multiplier=35;  // that's "converting" Delay value into time spent in the below loop
200009ec:	2323      	movs	r3, #35	; 0x23
200009ee:	60fb      	str	r3, [r7, #12]
volatile uint32_t k;
	delay1=Delay;
200009f0:	687b      	ldr	r3, [r7, #4]
200009f2:	613b      	str	r3, [r7, #16]
	for (k=0; (k<(delay1*clock*multiplier)); k++) {};
200009f4:	2300      	movs	r3, #0
200009f6:	60bb      	str	r3, [r7, #8]
200009f8:	e002      	b.n	20000a00 <LOC_Delay+0x20>
200009fa:	68bb      	ldr	r3, [r7, #8]
200009fc:	3301      	adds	r3, #1
200009fe:	60bb      	str	r3, [r7, #8]
20000a00:	693b      	ldr	r3, [r7, #16]
20000a02:	697a      	ldr	r2, [r7, #20]
20000a04:	fb02 f303 	mul.w	r3, r2, r3
20000a08:	68fa      	ldr	r2, [r7, #12]
20000a0a:	fb03 f202 	mul.w	r2, r3, r2
20000a0e:	68bb      	ldr	r3, [r7, #8]
20000a10:	429a      	cmp	r2, r3
20000a12:	d8f2      	bhi.n	200009fa <LOC_Delay+0x1a>
}
20000a14:	bf00      	nop
20000a16:	bf00      	nop
20000a18:	371c      	adds	r7, #28
20000a1a:	46bd      	mov	sp, r7
20000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a20:	4770      	bx	lr

20000a22 <HAL_GetTick>:



uint32_t HAL_GetTick(void) {
20000a22:	b480      	push	{r7}
20000a24:	af00      	add	r7, sp, #0
	return 1;
20000a26:	2301      	movs	r3, #1
}
20000a28:	4618      	mov	r0, r3
20000a2a:	46bd      	mov	sp, r7
20000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a30:	4770      	bx	lr

20000a32 <HAL_Delay>:


void HAL_Delay(uint32_t Delay) {
20000a32:	b580      	push	{r7, lr}
20000a34:	b082      	sub	sp, #8
20000a36:	af00      	add	r7, sp, #0
20000a38:	6078      	str	r0, [r7, #4]
	LOC_Delay(Delay);
20000a3a:	6878      	ldr	r0, [r7, #4]
20000a3c:	f7ff ffd0 	bl	200009e0 <LOC_Delay>
}
20000a40:	bf00      	nop
20000a42:	3708      	adds	r7, #8
20000a44:	46bd      	mov	sp, r7
20000a46:	bd80      	pop	{r7, pc}

20000a48 <HAL_InitTick>:


HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
20000a48:	b480      	push	{r7}
20000a4a:	b083      	sub	sp, #12
20000a4c:	af00      	add	r7, sp, #0
20000a4e:	6078      	str	r0, [r7, #4]
	return HAL_OK;
20000a50:	2300      	movs	r3, #0
}
20000a52:	4618      	mov	r0, r3
20000a54:	370c      	adds	r7, #12
20000a56:	46bd      	mov	sp, r7
20000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a5c:	4770      	bx	lr

20000a5e <LOC_LedOn>:



void LOC_LedOn(){
20000a5e:	b480      	push	{r7}
20000a60:	af00      	add	r7, sp, #0
#ifdef IS_LED
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_PIN_ON);
#endif //IS_LED

}
20000a62:	bf00      	nop
20000a64:	46bd      	mov	sp, r7
20000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a6a:	4770      	bx	lr

20000a6c <LOC_LedOff>:

void LOC_LedOff(){
20000a6c:	b480      	push	{r7}
20000a6e:	af00      	add	r7, sp, #0
#ifdef IS_LED
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, !LED_PIN_ON);
#endif //IS_LED
}
20000a70:	bf00      	nop
20000a72:	46bd      	mov	sp, r7
20000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
20000a78:	4770      	bx	lr
	...

20000a7c <Init>:



int Init (void){
20000a7c:	b580      	push	{r7, lr}
20000a7e:	b084      	sub	sp, #16
20000a80:	af00      	add	r7, sp, #0

	*(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
20000a82:	4b14      	ldr	r3, [pc, #80]	; (20000ad4 <Init+0x58>)
20000a84:	4a14      	ldr	r2, [pc, #80]	; (20000ad8 <Init+0x5c>)
20000a86:	601a      	str	r2, [r3, #0]

    SystemInit();
20000a88:	f000 fcd2 	bl	20001430 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     */

    SCB->VTOR = 0x20000000 | 0x200;
20000a8c:	4b13      	ldr	r3, [pc, #76]	; (20000adc <Init+0x60>)
20000a8e:	4a14      	ldr	r2, [pc, #80]	; (20000ae0 <Init+0x64>)
20000a90:	609a      	str	r2, [r3, #8]
20000a92:	2300      	movs	r3, #0
20000a94:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000a96:	687b      	ldr	r3, [r7, #4]
20000a98:	f383 8810 	msr	PRIMASK, r3
}
20000a9c:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
20000a9e:	f001 f8c5 	bl	20001c2c <HAL_Init>
    uint8_t result;

    SystemClock_Config();
20000aa2:	f000 fa29 	bl	20000ef8 <SystemClock_Config>

    MX_GPIO_Init();
20000aa6:	f000 f9cb 	bl	20000e40 <MX_GPIO_Init>
    LOC_SPI_Init();
20000aaa:	f7ff ff93 	bl	200009d4 <LOC_SPI_Init>

	LOC_LedOn();
20000aae:	f7ff ffd6 	bl	20000a5e <LOC_LedOn>
    result = Flash_Init();
20000ab2:	f001 f82e 	bl	20001b12 <Flash_Init>
20000ab6:	4603      	mov	r3, r0
20000ab8:	73fb      	strb	r3, [r7, #15]
	LOC_LedOff();
20000aba:	f7ff ffd7 	bl	20000a6c <LOC_LedOff>
20000abe:	2301      	movs	r3, #1
20000ac0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000ac2:	68bb      	ldr	r3, [r7, #8]
20000ac4:	f383 8810 	msr	PRIMASK, r3
}
20000ac8:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts

    return result;
20000aca:	7bfb      	ldrb	r3, [r7, #15]

}
20000acc:	4618      	mov	r0, r3
20000ace:	3710      	adds	r7, #16
20000ad0:	46bd      	mov	sp, r7
20000ad2:	bd80      	pop	{r7, pc}
20000ad4:	e000edf0 	.word	0xe000edf0
20000ad8:	a05f0000 	.word	0xa05f0000
20000adc:	e000ed00 	.word	0xe000ed00
20000ae0:	20000200 	.word	0x20000200

20000ae4 <Read>:
  * outputs   :
  *      R0             : "1" 			: Operation succeeded
  * 			 		  "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM	
  */
int Read (uint32_t Address, uint32_t Size, uint8_t* buffer){
20000ae4:	b580      	push	{r7, lr}
20000ae6:	b086      	sub	sp, #24
20000ae8:	af00      	add	r7, sp, #0
20000aea:	60f8      	str	r0, [r7, #12]
20000aec:	60b9      	str	r1, [r7, #8]
20000aee:	607a      	str	r2, [r7, #4]
20000af0:	2300      	movs	r3, #0
20000af2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000af4:	693b      	ldr	r3, [r7, #16]
20000af6:	f383 8810 	msr	PRIMASK, r3
}
20000afa:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	Address = Address & EXT_FLASH_ADDR_MASK;
20000afc:	68fb      	ldr	r3, [r7, #12]
20000afe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000b02:	60fb      	str	r3, [r7, #12]
	LOC_LedOn();
20000b04:	f7ff ffab 	bl	20000a5e <LOC_LedOn>
	Flash_Read(Address, buffer, Size);
20000b08:	68ba      	ldr	r2, [r7, #8]
20000b0a:	6879      	ldr	r1, [r7, #4]
20000b0c:	68f8      	ldr	r0, [r7, #12]
20000b0e:	f000 fd99 	bl	20001644 <Flash_Read>
	LOC_LedOff();
20000b12:	f7ff ffab 	bl	20000a6c <LOC_LedOff>
20000b16:	2301      	movs	r3, #1
20000b18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b1a:	697b      	ldr	r3, [r7, #20]
20000b1c:	f383 8810 	msr	PRIMASK, r3
}
20000b20:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000b22:	2301      	movs	r3, #1
} 
20000b24:	4618      	mov	r0, r3
20000b26:	3718      	adds	r7, #24
20000b28:	46bd      	mov	sp, r7
20000b2a:	bd80      	pop	{r7, pc}

20000b2c <Write>:
  * outputs   :
  *      R0           : "1" 			: Operation succeeded
  *                     "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM	
  */
int Write (uint32_t Address, uint32_t Size, uint8_t* buffer){
20000b2c:	b580      	push	{r7, lr}
20000b2e:	b086      	sub	sp, #24
20000b30:	af00      	add	r7, sp, #0
20000b32:	60f8      	str	r0, [r7, #12]
20000b34:	60b9      	str	r1, [r7, #8]
20000b36:	607a      	str	r2, [r7, #4]
20000b38:	2300      	movs	r3, #0
20000b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b3c:	693b      	ldr	r3, [r7, #16]
20000b3e:	f383 8810 	msr	PRIMASK, r3
}
20000b42:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	Address = Address & EXT_FLASH_ADDR_MASK;
20000b44:	68fb      	ldr	r3, [r7, #12]
20000b46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000b4a:	60fb      	str	r3, [r7, #12]
	LOC_LedOn();
20000b4c:	f7ff ff87 	bl	20000a5e <LOC_LedOn>
	Flash_Write(Address, buffer, Size);
20000b50:	68ba      	ldr	r2, [r7, #8]
20000b52:	6879      	ldr	r1, [r7, #4]
20000b54:	68f8      	ldr	r0, [r7, #12]
20000b56:	f000 fdda 	bl	2000170e <Flash_Write>
	LOC_LedOff();
20000b5a:	f7ff ff87 	bl	20000a6c <LOC_LedOff>
20000b5e:	2301      	movs	r3, #1
20000b60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b62:	697b      	ldr	r3, [r7, #20]
20000b64:	f383 8810 	msr	PRIMASK, r3
}
20000b68:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000b6a:	2301      	movs	r3, #1
} 
20000b6c:	4618      	mov	r0, r3
20000b6e:	3718      	adds	r7, #24
20000b70:	46bd      	mov	sp, r7
20000b72:	bd80      	pop	{r7, pc}

20000b74 <MassErase>:
  * outputs   :
  *     R0             : "1" : Operation succeeded
  * 					 "0" : Operation failure
  * Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
  */
int MassErase (void){
20000b74:	b580      	push	{r7, lr}
20000b76:	b082      	sub	sp, #8
20000b78:	af00      	add	r7, sp, #0
20000b7a:	2300      	movs	r3, #0
20000b7c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b7e:	683b      	ldr	r3, [r7, #0]
20000b80:	f383 8810 	msr	PRIMASK, r3
}
20000b84:	bf00      	nop
    __set_PRIMASK(0); //enable interrupts
	LOC_LedOn();
20000b86:	f7ff ff6a 	bl	20000a5e <LOC_LedOn>
	Flash_ChipErase();
20000b8a:	f000 fea9 	bl	200018e0 <Flash_ChipErase>
	LOC_LedOff();
20000b8e:	f7ff ff6d 	bl	20000a6c <LOC_LedOff>
20000b92:	2301      	movs	r3, #1
20000b94:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000b96:	687b      	ldr	r3, [r7, #4]
20000b98:	f383 8810 	msr	PRIMASK, r3
}
20000b9c:	bf00      	nop
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000b9e:	2301      	movs	r3, #1
}
20000ba0:	4618      	mov	r0, r3
20000ba2:	3708      	adds	r7, #8
20000ba4:	46bd      	mov	sp, r7
20000ba6:	bd80      	pop	{r7, pc}

20000ba8 <SectorErase>:
  * outputs   :
  *     R0             : "1" : Operation succeeded
  * 			 		 "0" : Operation failure
  * Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
  */
int SectorErase (uint32_t EraseStartAddress ,uint32_t EraseEndAddress) {
20000ba8:	b580      	push	{r7, lr}
20000baa:	b084      	sub	sp, #16
20000bac:	af00      	add	r7, sp, #0
20000bae:	6078      	str	r0, [r7, #4]
20000bb0:	6039      	str	r1, [r7, #0]
	EraseStartAddress = EraseStartAddress & EXT_FLASH_ADDR_MASK;
20000bb2:	687b      	ldr	r3, [r7, #4]
20000bb4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000bb8:	607b      	str	r3, [r7, #4]
	EraseEndAddress = EraseEndAddress & EXT_FLASH_ADDR_MASK;
20000bba:	683b      	ldr	r3, [r7, #0]
20000bbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000bc0:	603b      	str	r3, [r7, #0]
20000bc2:	2300      	movs	r3, #0
20000bc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000bc6:	68fb      	ldr	r3, [r7, #12]
20000bc8:	f383 8810 	msr	PRIMASK, r3
}
20000bcc:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts
	EraseStartAddress = (EraseStartAddress -  (EraseStartAddress % EXT_FLASH_BLOCK_SIZE));
20000bce:	687b      	ldr	r3, [r7, #4]
20000bd0:	0c1b      	lsrs	r3, r3, #16
20000bd2:	041b      	lsls	r3, r3, #16
20000bd4:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress) {
20000bd6:	e00a      	b.n	20000bee <SectorErase+0x46>
		LOC_LedOn();
20000bd8:	f7ff ff41 	bl	20000a5e <LOC_LedOn>
		Flash_BErase64k(EraseStartAddress);
20000bdc:	6878      	ldr	r0, [r7, #4]
20000bde:	f000 fe52 	bl	20001886 <Flash_BErase64k>
		LOC_LedOff();
20000be2:	f7ff ff43 	bl	20000a6c <LOC_LedOff>
		EraseStartAddress += EXT_FLASH_BLOCK_SIZE;
20000be6:	687b      	ldr	r3, [r7, #4]
20000be8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
20000bec:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress) {
20000bee:	683a      	ldr	r2, [r7, #0]
20000bf0:	687b      	ldr	r3, [r7, #4]
20000bf2:	429a      	cmp	r2, r3
20000bf4:	d2f0      	bcs.n	20000bd8 <SectorErase+0x30>
20000bf6:	2301      	movs	r3, #1
20000bf8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000bfa:	68bb      	ldr	r3, [r7, #8]
20000bfc:	f383 8810 	msr	PRIMASK, r3
}
20000c00:	bf00      	nop
	}
    __set_PRIMASK(1); //disable interrupts
	return 1;
20000c02:	2301      	movs	r3, #1
}
20000c04:	4618      	mov	r0, r3
20000c06:	3710      	adds	r7, #16
20000c08:	46bd      	mov	sp, r7
20000c0a:	bd80      	pop	{r7, pc}

20000c0c <CheckSum>:
  * outputs   :
  *     R0             : Checksum value
  * Note - Optional for all types of device
  * NOTE - keeping original ST algorithm: not verified and optimized
  */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
20000c0c:	b580      	push	{r7, lr}
20000c0e:	b088      	sub	sp, #32
20000c10:	af00      	add	r7, sp, #0
20000c12:	60f8      	str	r0, [r7, #12]
20000c14:	60b9      	str	r1, [r7, #8]
20000c16:	607a      	str	r2, [r7, #4]
uint8_t missalignementAddress = StartAddress%4;
20000c18:	68fb      	ldr	r3, [r7, #12]
20000c1a:	b2db      	uxtb	r3, r3
20000c1c:	f003 0303 	and.w	r3, r3, #3
20000c20:	77fb      	strb	r3, [r7, #31]
uint8_t missalignementSize = Size ;
20000c22:	68bb      	ldr	r3, [r7, #8]
20000c24:	77bb      	strb	r3, [r7, #30]
int cnt;
uint32_t Val;
//uint8_t value;
	
  StartAddress-=StartAddress%4;
20000c26:	68fb      	ldr	r3, [r7, #12]
20000c28:	f023 0303 	bic.w	r3, r3, #3
20000c2c:	60fb      	str	r3, [r7, #12]
  Size += (Size%4==0)?0:4-(Size%4);
20000c2e:	68bb      	ldr	r3, [r7, #8]
20000c30:	f003 0303 	and.w	r3, r3, #3
20000c34:	2b00      	cmp	r3, #0
20000c36:	d005      	beq.n	20000c44 <CheckSum+0x38>
20000c38:	68bb      	ldr	r3, [r7, #8]
20000c3a:	f003 0303 	and.w	r3, r3, #3
20000c3e:	f1c3 0304 	rsb	r3, r3, #4
20000c42:	e000      	b.n	20000c46 <CheckSum+0x3a>
20000c44:	2300      	movs	r3, #0
20000c46:	68ba      	ldr	r2, [r7, #8]
20000c48:	4413      	add	r3, r2
20000c4a:	60bb      	str	r3, [r7, #8]
  
  for(cnt=0; cnt<Size ; cnt+=4)
20000c4c:	2300      	movs	r3, #0
20000c4e:	61bb      	str	r3, [r7, #24]
20000c50:	e068      	b.n	20000d24 <CheckSum+0x118>
  {
	LOC_LedOn();
20000c52:	f7ff ff04 	bl	20000a5e <LOC_LedOn>
	Flash_Read(StartAddress + 1,(uint8_t *) &Val, 4);
20000c56:	68fb      	ldr	r3, [r7, #12]
20000c58:	3301      	adds	r3, #1
20000c5a:	f107 0110 	add.w	r1, r7, #16
20000c5e:	2204      	movs	r2, #4
20000c60:	4618      	mov	r0, r3
20000c62:	f000 fcef 	bl	20001644 <Flash_Read>
	LOC_LedOff();
20000c66:	f7ff ff01 	bl	20000a6c <LOC_LedOff>

	if(missalignementAddress)
20000c6a:	7ffb      	ldrb	r3, [r7, #31]
20000c6c:	2b00      	cmp	r3, #0
20000c6e:	d015      	beq.n	20000c9c <CheckSum+0x90>
    {
      for (uint8_t k=missalignementAddress; k<=3;k++){
20000c70:	7ffb      	ldrb	r3, [r7, #31]
20000c72:	75fb      	strb	r3, [r7, #23]
20000c74:	e00c      	b.n	20000c90 <CheckSum+0x84>
          InitVal += (uint8_t) (Val>>(8*k) & 0xff);
20000c76:	693a      	ldr	r2, [r7, #16]
20000c78:	7dfb      	ldrb	r3, [r7, #23]
20000c7a:	00db      	lsls	r3, r3, #3
20000c7c:	fa22 f303 	lsr.w	r3, r2, r3
20000c80:	b2db      	uxtb	r3, r3
20000c82:	461a      	mov	r2, r3
20000c84:	687b      	ldr	r3, [r7, #4]
20000c86:	4413      	add	r3, r2
20000c88:	607b      	str	r3, [r7, #4]
      for (uint8_t k=missalignementAddress; k<=3;k++){
20000c8a:	7dfb      	ldrb	r3, [r7, #23]
20000c8c:	3301      	adds	r3, #1
20000c8e:	75fb      	strb	r3, [r7, #23]
20000c90:	7dfb      	ldrb	r3, [r7, #23]
20000c92:	2b03      	cmp	r3, #3
20000c94:	d9ef      	bls.n	20000c76 <CheckSum+0x6a>
      }
      missalignementAddress=0;
20000c96:	2300      	movs	r3, #0
20000c98:	77fb      	strb	r3, [r7, #31]
20000c9a:	e03d      	b.n	20000d18 <CheckSum+0x10c>
    }
    else if((Size-missalignementSize)%4 && (Size-cnt) <=4)
20000c9c:	7fbb      	ldrb	r3, [r7, #30]
20000c9e:	68ba      	ldr	r2, [r7, #8]
20000ca0:	1ad3      	subs	r3, r2, r3
20000ca2:	f003 0303 	and.w	r3, r3, #3
20000ca6:	2b00      	cmp	r3, #0
20000ca8:	d023      	beq.n	20000cf2 <CheckSum+0xe6>
20000caa:	69bb      	ldr	r3, [r7, #24]
20000cac:	68ba      	ldr	r2, [r7, #8]
20000cae:	1ad3      	subs	r3, r2, r3
20000cb0:	2b04      	cmp	r3, #4
20000cb2:	d81e      	bhi.n	20000cf2 <CheckSum+0xe6>
    {
      for (uint8_t k=(Size-missalignementSize); k<=3;k++){
20000cb4:	68bb      	ldr	r3, [r7, #8]
20000cb6:	b2da      	uxtb	r2, r3
20000cb8:	7fbb      	ldrb	r3, [r7, #30]
20000cba:	1ad3      	subs	r3, r2, r3
20000cbc:	75bb      	strb	r3, [r7, #22]
20000cbe:	e00d      	b.n	20000cdc <CheckSum+0xd0>
          InitVal += (uint8_t) (Val>>(8*(k-1)) & 0xff);
20000cc0:	693a      	ldr	r2, [r7, #16]
20000cc2:	7dbb      	ldrb	r3, [r7, #22]
20000cc4:	3b01      	subs	r3, #1
20000cc6:	00db      	lsls	r3, r3, #3
20000cc8:	fa22 f303 	lsr.w	r3, r2, r3
20000ccc:	b2db      	uxtb	r3, r3
20000cce:	461a      	mov	r2, r3
20000cd0:	687b      	ldr	r3, [r7, #4]
20000cd2:	4413      	add	r3, r2
20000cd4:	607b      	str	r3, [r7, #4]
      for (uint8_t k=(Size-missalignementSize); k<=3;k++){
20000cd6:	7dbb      	ldrb	r3, [r7, #22]
20000cd8:	3301      	adds	r3, #1
20000cda:	75bb      	strb	r3, [r7, #22]
20000cdc:	7dbb      	ldrb	r3, [r7, #22]
20000cde:	2b03      	cmp	r3, #3
20000ce0:	d9ee      	bls.n	20000cc0 <CheckSum+0xb4>
      }
      missalignementSize=2 * missalignementSize - Size;
20000ce2:	7fbb      	ldrb	r3, [r7, #30]
20000ce4:	005b      	lsls	r3, r3, #1
20000ce6:	b2da      	uxtb	r2, r3
20000ce8:	68bb      	ldr	r3, [r7, #8]
20000cea:	b2db      	uxtb	r3, r3
20000cec:	1ad3      	subs	r3, r2, r3
20000cee:	77bb      	strb	r3, [r7, #30]
20000cf0:	e012      	b.n	20000d18 <CheckSum+0x10c>
    }
    else
    {
        for (uint8_t k=0; k<=3;k++){
20000cf2:	2300      	movs	r3, #0
20000cf4:	757b      	strb	r3, [r7, #21]
20000cf6:	e00c      	b.n	20000d12 <CheckSum+0x106>
            InitVal += (uint8_t) (Val>>(8*k) & 0xff);
20000cf8:	693a      	ldr	r2, [r7, #16]
20000cfa:	7d7b      	ldrb	r3, [r7, #21]
20000cfc:	00db      	lsls	r3, r3, #3
20000cfe:	fa22 f303 	lsr.w	r3, r2, r3
20000d02:	b2db      	uxtb	r3, r3
20000d04:	461a      	mov	r2, r3
20000d06:	687b      	ldr	r3, [r7, #4]
20000d08:	4413      	add	r3, r2
20000d0a:	607b      	str	r3, [r7, #4]
        for (uint8_t k=0; k<=3;k++){
20000d0c:	7d7b      	ldrb	r3, [r7, #21]
20000d0e:	3301      	adds	r3, #1
20000d10:	757b      	strb	r3, [r7, #21]
20000d12:	7d7b      	ldrb	r3, [r7, #21]
20000d14:	2b03      	cmp	r3, #3
20000d16:	d9ef      	bls.n	20000cf8 <CheckSum+0xec>
        }
    }
    StartAddress+=4;
20000d18:	68fb      	ldr	r3, [r7, #12]
20000d1a:	3304      	adds	r3, #4
20000d1c:	60fb      	str	r3, [r7, #12]
  for(cnt=0; cnt<Size ; cnt+=4)
20000d1e:	69bb      	ldr	r3, [r7, #24]
20000d20:	3304      	adds	r3, #4
20000d22:	61bb      	str	r3, [r7, #24]
20000d24:	69bb      	ldr	r3, [r7, #24]
20000d26:	68ba      	ldr	r2, [r7, #8]
20000d28:	429a      	cmp	r2, r3
20000d2a:	d892      	bhi.n	20000c52 <CheckSum+0x46>
  }
  
  return (InitVal);
20000d2c:	687b      	ldr	r3, [r7, #4]
}
20000d2e:	4618      	mov	r0, r3
20000d30:	3720      	adds	r7, #32
20000d32:	46bd      	mov	sp, r7
20000d34:	bd80      	pop	{r7, pc}

20000d36 <Verify>:
  *     R1             : Checksum value
  * Note: Optional for all types of device
  * NOTE - keeping original ST algorithm: not verified and optimized
  */

uint64_t Verify (uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement){
20000d36:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20000d3a:	b090      	sub	sp, #64	; 0x40
20000d3c:	af00      	add	r7, sp, #0
20000d3e:	61f8      	str	r0, [r7, #28]
20000d40:	61b9      	str	r1, [r7, #24]
20000d42:	617a      	str	r2, [r7, #20]
20000d44:	613b      	str	r3, [r7, #16]
#define BUF_SIZE 2
  uint32_t InitVal = 0;
20000d46:	2300      	movs	r3, #0
20000d48:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t VerifiedData = 0;
20000d4a:	2300      	movs	r3, #0
20000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
//  uint8_t TmpBuffer = 0x00;
	uint64_t checksum;
  Size*=4;
20000d4e:	697b      	ldr	r3, [r7, #20]
20000d50:	009b      	lsls	r3, r3, #2
20000d52:	617b      	str	r3, [r7, #20]
  uint8_t Buffer[BUF_SIZE];
  uint32_t LocAddr = MemoryAddr & EXT_FLASH_ADDR_MASK;
20000d54:	69fb      	ldr	r3, [r7, #28]
20000d56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t posBuf;
        
  checksum = CheckSum((uint32_t)LocAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
20000d5c:	693b      	ldr	r3, [r7, #16]
20000d5e:	f003 020f 	and.w	r2, r3, #15
20000d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20000d64:	18d0      	adds	r0, r2, r3
20000d66:	693b      	ldr	r3, [r7, #16]
20000d68:	0c1b      	lsrs	r3, r3, #16
20000d6a:	f003 030f 	and.w	r3, r3, #15
20000d6e:	697a      	ldr	r2, [r7, #20]
20000d70:	1ad3      	subs	r3, r2, r3
20000d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
20000d74:	4619      	mov	r1, r3
20000d76:	f7ff ff49 	bl	20000c0c <CheckSum>
20000d7a:	4603      	mov	r3, r0
20000d7c:	2200      	movs	r2, #0
20000d7e:	603b      	str	r3, [r7, #0]
20000d80:	607a      	str	r2, [r7, #4]
20000d82:	e9d7 2300 	ldrd	r2, r3, [r7]
20000d86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  
  while (Size>VerifiedData)
20000d8a:	e045      	b.n	20000e18 <Verify+0xe2>
  {
	LOC_LedOn();
20000d8c:	f7ff fe67 	bl	20000a5e <LOC_LedOn>
	Flash_Read(MemoryAddr+VerifiedData, Buffer, BUF_SIZE);
20000d90:	69fa      	ldr	r2, [r7, #28]
20000d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000d94:	4413      	add	r3, r2
20000d96:	f107 0124 	add.w	r1, r7, #36	; 0x24
20000d9a:	2202      	movs	r2, #2
20000d9c:	4618      	mov	r0, r3
20000d9e:	f000 fc51 	bl	20001644 <Flash_Read>
	LOC_LedOff();
20000da2:	f7ff fe63 	bl	20000a6c <LOC_LedOff>

	posBuf=0;
20000da6:	2300      	movs	r3, #0
20000da8:	63bb      	str	r3, [r7, #56]	; 0x38
	while ((Size>VerifiedData) && (posBuf<1024)) {
20000daa:	e02d      	b.n	20000e08 <Verify+0xd2>
	    if (Buffer[posBuf] != *((uint8_t*)RAMBufferAddr+VerifiedData))
20000dac:	f107 0224 	add.w	r2, r7, #36	; 0x24
20000db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000db2:	4413      	add	r3, r2
20000db4:	781a      	ldrb	r2, [r3, #0]
20000db6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
20000db8:	69bb      	ldr	r3, [r7, #24]
20000dba:	440b      	add	r3, r1
20000dbc:	781b      	ldrb	r3, [r3, #0]
20000dbe:	429a      	cmp	r2, r3
20000dc0:	d01c      	beq.n	20000dfc <Verify+0xc6>
	      return ((checksum<<32) + MemoryAddr+VerifiedData);
20000dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
20000dc6:	f04f 0200 	mov.w	r2, #0
20000dca:	f04f 0300 	mov.w	r3, #0
20000dce:	0003      	movs	r3, r0
20000dd0:	2200      	movs	r2, #0
20000dd2:	69f9      	ldr	r1, [r7, #28]
20000dd4:	2000      	movs	r0, #0
20000dd6:	468a      	mov	sl, r1
20000dd8:	4683      	mov	fp, r0
20000dda:	eb12 080a 	adds.w	r8, r2, sl
20000dde:	eb43 090b 	adc.w	r9, r3, fp
20000de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000de4:	2200      	movs	r2, #0
20000de6:	60bb      	str	r3, [r7, #8]
20000de8:	60fa      	str	r2, [r7, #12]
20000dea:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
20000dee:	460b      	mov	r3, r1
20000df0:	eb18 0403 	adds.w	r4, r8, r3
20000df4:	4613      	mov	r3, r2
20000df6:	eb49 0503 	adc.w	r5, r9, r3
20000dfa:	e019      	b.n	20000e30 <Verify+0xfa>
	    posBuf++;
20000dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000dfe:	3301      	adds	r3, #1
20000e00:	63bb      	str	r3, [r7, #56]	; 0x38
	    VerifiedData++;
20000e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000e04:	3301      	adds	r3, #1
20000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
	while ((Size>VerifiedData) && (posBuf<1024)) {
20000e08:	697a      	ldr	r2, [r7, #20]
20000e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000e0c:	429a      	cmp	r2, r3
20000e0e:	d903      	bls.n	20000e18 <Verify+0xe2>
20000e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20000e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20000e16:	d3c9      	bcc.n	20000dac <Verify+0x76>
  while (Size>VerifiedData)
20000e18:	697a      	ldr	r2, [r7, #20]
20000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
20000e1c:	429a      	cmp	r2, r3
20000e1e:	d8b5      	bhi.n	20000d8c <Verify+0x56>
	}
  }
       
  return (checksum<<32);
20000e20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20000e24:	f04f 0400 	mov.w	r4, #0
20000e28:	f04f 0500 	mov.w	r5, #0
20000e2c:	0015      	movs	r5, r2
20000e2e:	2400      	movs	r4, #0
}
20000e30:	4622      	mov	r2, r4
20000e32:	462b      	mov	r3, r5
20000e34:	4610      	mov	r0, r2
20000e36:	4619      	mov	r1, r3
20000e38:	3740      	adds	r7, #64	; 0x40
20000e3a:	46bd      	mov	sp, r7
20000e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

20000e40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
20000e40:	b580      	push	{r7, lr}
20000e42:	b088      	sub	sp, #32
20000e44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000e46:	f107 030c 	add.w	r3, r7, #12
20000e4a:	2200      	movs	r2, #0
20000e4c:	601a      	str	r2, [r3, #0]
20000e4e:	605a      	str	r2, [r3, #4]
20000e50:	609a      	str	r2, [r3, #8]
20000e52:	60da      	str	r2, [r3, #12]
20000e54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
20000e56:	2300      	movs	r3, #0
20000e58:	60bb      	str	r3, [r7, #8]
20000e5a:	4b1f      	ldr	r3, [pc, #124]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000e5e:	4a1e      	ldr	r2, [pc, #120]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e60:	f043 0304 	orr.w	r3, r3, #4
20000e64:	6313      	str	r3, [r2, #48]	; 0x30
20000e66:	4b1c      	ldr	r3, [pc, #112]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000e6a:	f003 0304 	and.w	r3, r3, #4
20000e6e:	60bb      	str	r3, [r7, #8]
20000e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
20000e72:	2300      	movs	r3, #0
20000e74:	607b      	str	r3, [r7, #4]
20000e76:	4b18      	ldr	r3, [pc, #96]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000e7a:	4a17      	ldr	r2, [pc, #92]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20000e80:	6313      	str	r3, [r2, #48]	; 0x30
20000e82:	4b15      	ldr	r3, [pc, #84]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
20000e8a:	607b      	str	r3, [r7, #4]
20000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20000e8e:	2300      	movs	r3, #0
20000e90:	603b      	str	r3, [r7, #0]
20000e92:	4b11      	ldr	r3, [pc, #68]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000e96:	4a10      	ldr	r2, [pc, #64]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000e98:	f043 0301 	orr.w	r3, r3, #1
20000e9c:	6313      	str	r3, [r2, #48]	; 0x30
20000e9e:	4b0e      	ldr	r3, [pc, #56]	; (20000ed8 <MX_GPIO_Init+0x98>)
20000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000ea2:	f003 0301 	and.w	r3, r3, #1
20000ea6:	603b      	str	r3, [r7, #0]
20000ea8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
20000eaa:	2201      	movs	r2, #1
20000eac:	2110      	movs	r1, #16
20000eae:	480b      	ldr	r0, [pc, #44]	; (20000edc <MX_GPIO_Init+0x9c>)
20000eb0:	f004 ff78 	bl	20005da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
20000eb4:	2310      	movs	r3, #16
20000eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000eb8:	2301      	movs	r3, #1
20000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000ebc:	2300      	movs	r3, #0
20000ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
20000ec0:	2302      	movs	r3, #2
20000ec2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
20000ec4:	f107 030c 	add.w	r3, r7, #12
20000ec8:	4619      	mov	r1, r3
20000eca:	4804      	ldr	r0, [pc, #16]	; (20000edc <MX_GPIO_Init+0x9c>)
20000ecc:	f004 fcea 	bl	200058a4 <HAL_GPIO_Init>

}
20000ed0:	bf00      	nop
20000ed2:	3720      	adds	r7, #32
20000ed4:	46bd      	mov	sp, r7
20000ed6:	bd80      	pop	{r7, pc}
20000ed8:	40023800 	.word	0x40023800
20000edc:	40020000 	.word	0x40020000

20000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000ee0:	b580      	push	{r7, lr}
20000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000ee4:	f000 fea2 	bl	20001c2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20000ee8:	f000 f806 	bl	20000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000eec:	f7ff ffa8 	bl	20000e40 <MX_GPIO_Init>
  MX_SPI1_Init();
20000ef0:	f000 f870 	bl	20000fd4 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20000ef4:	e7fe      	b.n	20000ef4 <main+0x14>
	...

20000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20000ef8:	b580      	push	{r7, lr}
20000efa:	b094      	sub	sp, #80	; 0x50
20000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000efe:	f107 0320 	add.w	r3, r7, #32
20000f02:	2230      	movs	r2, #48	; 0x30
20000f04:	2100      	movs	r1, #0
20000f06:	4618      	mov	r0, r3
20000f08:	f008 ffb3 	bl	20009e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20000f0c:	f107 030c 	add.w	r3, r7, #12
20000f10:	2200      	movs	r2, #0
20000f12:	601a      	str	r2, [r3, #0]
20000f14:	605a      	str	r2, [r3, #4]
20000f16:	609a      	str	r2, [r3, #8]
20000f18:	60da      	str	r2, [r3, #12]
20000f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20000f1c:	2300      	movs	r3, #0
20000f1e:	60bb      	str	r3, [r7, #8]
20000f20:	4b27      	ldr	r3, [pc, #156]	; (20000fc0 <SystemClock_Config+0xc8>)
20000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000f24:	4a26      	ldr	r2, [pc, #152]	; (20000fc0 <SystemClock_Config+0xc8>)
20000f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000f2a:	6413      	str	r3, [r2, #64]	; 0x40
20000f2c:	4b24      	ldr	r3, [pc, #144]	; (20000fc0 <SystemClock_Config+0xc8>)
20000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000f34:	60bb      	str	r3, [r7, #8]
20000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000f38:	2300      	movs	r3, #0
20000f3a:	607b      	str	r3, [r7, #4]
20000f3c:	4b21      	ldr	r3, [pc, #132]	; (20000fc4 <SystemClock_Config+0xcc>)
20000f3e:	681b      	ldr	r3, [r3, #0]
20000f40:	4a20      	ldr	r2, [pc, #128]	; (20000fc4 <SystemClock_Config+0xcc>)
20000f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
20000f46:	6013      	str	r3, [r2, #0]
20000f48:	4b1e      	ldr	r3, [pc, #120]	; (20000fc4 <SystemClock_Config+0xcc>)
20000f4a:	681b      	ldr	r3, [r3, #0]
20000f4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20000f50:	607b      	str	r3, [r7, #4]
20000f52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
20000f54:	2301      	movs	r3, #1
20000f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
20000f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000f5e:	2302      	movs	r3, #2
20000f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
20000f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20000f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
20000f68:	230c      	movs	r3, #12
20000f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
20000f6c:	2360      	movs	r3, #96	; 0x60
20000f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20000f70:	2302      	movs	r3, #2
20000f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
20000f74:	2304      	movs	r3, #4
20000f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20000f78:	f107 0320 	add.w	r3, r7, #32
20000f7c:	4618      	mov	r0, r3
20000f7e:	f005 fa53 	bl	20006428 <HAL_RCC_OscConfig>
20000f82:	4603      	mov	r3, r0
20000f84:	2b00      	cmp	r3, #0
20000f86:	d001      	beq.n	20000f8c <SystemClock_Config+0x94>
  {
    Error_Handler();
20000f88:	f000 f81e 	bl	20000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000f8c:	230f      	movs	r3, #15
20000f8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20000f90:	2302      	movs	r3, #2
20000f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20000f94:	2300      	movs	r3, #0
20000f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
20000f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20000f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
20000f9e:	2300      	movs	r3, #0
20000fa0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
20000fa2:	f107 030c 	add.w	r3, r7, #12
20000fa6:	2103      	movs	r1, #3
20000fa8:	4618      	mov	r0, r3
20000faa:	f005 fcb5 	bl	20006918 <HAL_RCC_ClockConfig>
20000fae:	4603      	mov	r3, r0
20000fb0:	2b00      	cmp	r3, #0
20000fb2:	d001      	beq.n	20000fb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
20000fb4:	f000 f808 	bl	20000fc8 <Error_Handler>
  }
}
20000fb8:	bf00      	nop
20000fba:	3750      	adds	r7, #80	; 0x50
20000fbc:	46bd      	mov	sp, r7
20000fbe:	bd80      	pop	{r7, pc}
20000fc0:	40023800 	.word	0x40023800
20000fc4:	40007000 	.word	0x40007000

20000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20000fc8:	b480      	push	{r7}
20000fca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20000fcc:	b672      	cpsid	i
}
20000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20000fd0:	e7fe      	b.n	20000fd0 <Error_Handler+0x8>
	...

20000fd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
20000fd4:	b580      	push	{r7, lr}
20000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
20000fd8:	4b17      	ldr	r3, [pc, #92]	; (20001038 <MX_SPI1_Init+0x64>)
20000fda:	4a18      	ldr	r2, [pc, #96]	; (2000103c <MX_SPI1_Init+0x68>)
20000fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
20000fde:	4b16      	ldr	r3, [pc, #88]	; (20001038 <MX_SPI1_Init+0x64>)
20000fe0:	f44f 7282 	mov.w	r2, #260	; 0x104
20000fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
20000fe6:	4b14      	ldr	r3, [pc, #80]	; (20001038 <MX_SPI1_Init+0x64>)
20000fe8:	2200      	movs	r2, #0
20000fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
20000fec:	4b12      	ldr	r3, [pc, #72]	; (20001038 <MX_SPI1_Init+0x64>)
20000fee:	2200      	movs	r2, #0
20000ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
20000ff2:	4b11      	ldr	r3, [pc, #68]	; (20001038 <MX_SPI1_Init+0x64>)
20000ff4:	2200      	movs	r2, #0
20000ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
20000ff8:	4b0f      	ldr	r3, [pc, #60]	; (20001038 <MX_SPI1_Init+0x64>)
20000ffa:	2200      	movs	r2, #0
20000ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
20000ffe:	4b0e      	ldr	r3, [pc, #56]	; (20001038 <MX_SPI1_Init+0x64>)
20001000:	f44f 7200 	mov.w	r2, #512	; 0x200
20001004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20001006:	4b0c      	ldr	r3, [pc, #48]	; (20001038 <MX_SPI1_Init+0x64>)
20001008:	2200      	movs	r2, #0
2000100a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
2000100c:	4b0a      	ldr	r3, [pc, #40]	; (20001038 <MX_SPI1_Init+0x64>)
2000100e:	2200      	movs	r2, #0
20001010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
20001012:	4b09      	ldr	r3, [pc, #36]	; (20001038 <MX_SPI1_Init+0x64>)
20001014:	2200      	movs	r2, #0
20001016:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20001018:	4b07      	ldr	r3, [pc, #28]	; (20001038 <MX_SPI1_Init+0x64>)
2000101a:	2200      	movs	r2, #0
2000101c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
2000101e:	4b06      	ldr	r3, [pc, #24]	; (20001038 <MX_SPI1_Init+0x64>)
20001020:	220a      	movs	r2, #10
20001022:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
20001024:	4804      	ldr	r0, [pc, #16]	; (20001038 <MX_SPI1_Init+0x64>)
20001026:	f006 faa1 	bl	2000756c <HAL_SPI_Init>
2000102a:	4603      	mov	r3, r0
2000102c:	2b00      	cmp	r3, #0
2000102e:	d001      	beq.n	20001034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
20001030:	f7ff ffca 	bl	20000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
20001034:	bf00      	nop
20001036:	bd80      	pop	{r7, pc}
20001038:	20000434 	.word	0x20000434
2000103c:	40013000 	.word	0x40013000

20001040 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
20001040:	b580      	push	{r7, lr}
20001042:	b08a      	sub	sp, #40	; 0x28
20001044:	af00      	add	r7, sp, #0
20001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20001048:	f107 0314 	add.w	r3, r7, #20
2000104c:	2200      	movs	r2, #0
2000104e:	601a      	str	r2, [r3, #0]
20001050:	605a      	str	r2, [r3, #4]
20001052:	609a      	str	r2, [r3, #8]
20001054:	60da      	str	r2, [r3, #12]
20001056:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
20001058:	687b      	ldr	r3, [r7, #4]
2000105a:	681b      	ldr	r3, [r3, #0]
2000105c:	4a19      	ldr	r2, [pc, #100]	; (200010c4 <HAL_SPI_MspInit+0x84>)
2000105e:	4293      	cmp	r3, r2
20001060:	d12b      	bne.n	200010ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
20001062:	2300      	movs	r3, #0
20001064:	613b      	str	r3, [r7, #16]
20001066:	4b18      	ldr	r3, [pc, #96]	; (200010c8 <HAL_SPI_MspInit+0x88>)
20001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000106a:	4a17      	ldr	r2, [pc, #92]	; (200010c8 <HAL_SPI_MspInit+0x88>)
2000106c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
20001070:	6453      	str	r3, [r2, #68]	; 0x44
20001072:	4b15      	ldr	r3, [pc, #84]	; (200010c8 <HAL_SPI_MspInit+0x88>)
20001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
2000107a:	613b      	str	r3, [r7, #16]
2000107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000107e:	2300      	movs	r3, #0
20001080:	60fb      	str	r3, [r7, #12]
20001082:	4b11      	ldr	r3, [pc, #68]	; (200010c8 <HAL_SPI_MspInit+0x88>)
20001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001086:	4a10      	ldr	r2, [pc, #64]	; (200010c8 <HAL_SPI_MspInit+0x88>)
20001088:	f043 0301 	orr.w	r3, r3, #1
2000108c:	6313      	str	r3, [r2, #48]	; 0x30
2000108e:	4b0e      	ldr	r3, [pc, #56]	; (200010c8 <HAL_SPI_MspInit+0x88>)
20001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001092:	f003 0301 	and.w	r3, r3, #1
20001096:	60fb      	str	r3, [r7, #12]
20001098:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
2000109a:	23e0      	movs	r3, #224	; 0xe0
2000109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000109e:	2302      	movs	r3, #2
200010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200010a2:	2300      	movs	r3, #0
200010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200010a6:	2303      	movs	r3, #3
200010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
200010aa:	2305      	movs	r3, #5
200010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
200010ae:	f107 0314 	add.w	r3, r7, #20
200010b2:	4619      	mov	r1, r3
200010b4:	4805      	ldr	r0, [pc, #20]	; (200010cc <HAL_SPI_MspInit+0x8c>)
200010b6:	f004 fbf5 	bl	200058a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
200010ba:	bf00      	nop
200010bc:	3728      	adds	r7, #40	; 0x28
200010be:	46bd      	mov	sp, r7
200010c0:	bd80      	pop	{r7, pc}
200010c2:	bf00      	nop
200010c4:	40013000 	.word	0x40013000
200010c8:	40023800 	.word	0x40023800
200010cc:	40020000 	.word	0x40020000

200010d0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
200010d0:	b580      	push	{r7, lr}
200010d2:	b082      	sub	sp, #8
200010d4:	af00      	add	r7, sp, #0
200010d6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
200010d8:	687b      	ldr	r3, [r7, #4]
200010da:	681b      	ldr	r3, [r3, #0]
200010dc:	4a08      	ldr	r2, [pc, #32]	; (20001100 <HAL_SPI_MspDeInit+0x30>)
200010de:	4293      	cmp	r3, r2
200010e0:	d109      	bne.n	200010f6 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
200010e2:	4b08      	ldr	r3, [pc, #32]	; (20001104 <HAL_SPI_MspDeInit+0x34>)
200010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200010e6:	4a07      	ldr	r2, [pc, #28]	; (20001104 <HAL_SPI_MspDeInit+0x34>)
200010e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
200010ec:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin);
200010ee:	21e0      	movs	r1, #224	; 0xe0
200010f0:	4805      	ldr	r0, [pc, #20]	; (20001108 <HAL_SPI_MspDeInit+0x38>)
200010f2:	f004 fd5b 	bl	20005bac <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
200010f6:	bf00      	nop
200010f8:	3708      	adds	r7, #8
200010fa:	46bd      	mov	sp, r7
200010fc:	bd80      	pop	{r7, pc}
200010fe:	bf00      	nop
20001100:	40013000 	.word	0x40013000
20001104:	40023800 	.word	0x40023800
20001108:	40020000 	.word	0x40020000

2000110c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000110c:	b480      	push	{r7}
2000110e:	b083      	sub	sp, #12
20001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20001112:	2300      	movs	r3, #0
20001114:	607b      	str	r3, [r7, #4]
20001116:	4b10      	ldr	r3, [pc, #64]	; (20001158 <HAL_MspInit+0x4c>)
20001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000111a:	4a0f      	ldr	r2, [pc, #60]	; (20001158 <HAL_MspInit+0x4c>)
2000111c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20001120:	6453      	str	r3, [r2, #68]	; 0x44
20001122:	4b0d      	ldr	r3, [pc, #52]	; (20001158 <HAL_MspInit+0x4c>)
20001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000112a:	607b      	str	r3, [r7, #4]
2000112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000112e:	2300      	movs	r3, #0
20001130:	603b      	str	r3, [r7, #0]
20001132:	4b09      	ldr	r3, [pc, #36]	; (20001158 <HAL_MspInit+0x4c>)
20001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001136:	4a08      	ldr	r2, [pc, #32]	; (20001158 <HAL_MspInit+0x4c>)
20001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000113c:	6413      	str	r3, [r2, #64]	; 0x40
2000113e:	4b06      	ldr	r3, [pc, #24]	; (20001158 <HAL_MspInit+0x4c>)
20001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001146:	603b      	str	r3, [r7, #0]
20001148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000114a:	bf00      	nop
2000114c:	370c      	adds	r7, #12
2000114e:	46bd      	mov	sp, r7
20001150:	f85d 7b04 	ldr.w	r7, [sp], #4
20001154:	4770      	bx	lr
20001156:	bf00      	nop
20001158:	40023800 	.word	0x40023800

2000115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000115c:	b480      	push	{r7}
2000115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
20001160:	e7fe      	b.n	20001160 <NMI_Handler+0x4>

20001162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20001162:	b480      	push	{r7}
20001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20001166:	e7fe      	b.n	20001166 <HardFault_Handler+0x4>

20001168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20001168:	b480      	push	{r7}
2000116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000116c:	e7fe      	b.n	2000116c <MemManage_Handler+0x4>

2000116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000116e:	b480      	push	{r7}
20001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20001172:	e7fe      	b.n	20001172 <BusFault_Handler+0x4>

20001174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20001174:	b480      	push	{r7}
20001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001178:	e7fe      	b.n	20001178 <UsageFault_Handler+0x4>

2000117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000117a:	b480      	push	{r7}
2000117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000117e:	bf00      	nop
20001180:	46bd      	mov	sp, r7
20001182:	f85d 7b04 	ldr.w	r7, [sp], #4
20001186:	4770      	bx	lr

20001188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20001188:	b480      	push	{r7}
2000118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000118c:	bf00      	nop
2000118e:	46bd      	mov	sp, r7
20001190:	f85d 7b04 	ldr.w	r7, [sp], #4
20001194:	4770      	bx	lr

20001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20001196:	b480      	push	{r7}
20001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000119a:	bf00      	nop
2000119c:	46bd      	mov	sp, r7
2000119e:	f85d 7b04 	ldr.w	r7, [sp], #4
200011a2:	4770      	bx	lr

200011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
200011a4:	b580      	push	{r7, lr}
200011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
200011a8:	f000 fdce 	bl	20001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
200011ac:	bf00      	nop
200011ae:	bd80      	pop	{r7, pc}

200011b0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
200011b0:	b480      	push	{r7}
200011b2:	af00      	add	r7, sp, #0
}
200011b4:	bf00      	nop
200011b6:	46bd      	mov	sp, r7
200011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200011bc:	4770      	bx	lr

200011be <_getpid>:

int _getpid(void)
{
200011be:	b480      	push	{r7}
200011c0:	af00      	add	r7, sp, #0
  return 1;
200011c2:	2301      	movs	r3, #1
}
200011c4:	4618      	mov	r0, r3
200011c6:	46bd      	mov	sp, r7
200011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200011cc:	4770      	bx	lr

200011ce <_kill>:

int _kill(int pid, int sig)
{
200011ce:	b580      	push	{r7, lr}
200011d0:	b082      	sub	sp, #8
200011d2:	af00      	add	r7, sp, #0
200011d4:	6078      	str	r0, [r7, #4]
200011d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
200011d8:	f008 fef0 	bl	20009fbc <__errno>
200011dc:	4603      	mov	r3, r0
200011de:	2216      	movs	r2, #22
200011e0:	601a      	str	r2, [r3, #0]
  return -1;
200011e2:	f04f 33ff 	mov.w	r3, #4294967295
}
200011e6:	4618      	mov	r0, r3
200011e8:	3708      	adds	r7, #8
200011ea:	46bd      	mov	sp, r7
200011ec:	bd80      	pop	{r7, pc}

200011ee <_exit>:

void _exit (int status)
{
200011ee:	b580      	push	{r7, lr}
200011f0:	b082      	sub	sp, #8
200011f2:	af00      	add	r7, sp, #0
200011f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
200011f6:	f04f 31ff 	mov.w	r1, #4294967295
200011fa:	6878      	ldr	r0, [r7, #4]
200011fc:	f7ff ffe7 	bl	200011ce <_kill>
  while (1) {}    /* Make sure we hang here */
20001200:	e7fe      	b.n	20001200 <_exit+0x12>

20001202 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
20001202:	b580      	push	{r7, lr}
20001204:	b086      	sub	sp, #24
20001206:	af00      	add	r7, sp, #0
20001208:	60f8      	str	r0, [r7, #12]
2000120a:	60b9      	str	r1, [r7, #8]
2000120c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
2000120e:	2300      	movs	r3, #0
20001210:	617b      	str	r3, [r7, #20]
20001212:	e00a      	b.n	2000122a <_read+0x28>
  {
    *ptr++ = __io_getchar();
20001214:	f3af 8000 	nop.w
20001218:	4601      	mov	r1, r0
2000121a:	68bb      	ldr	r3, [r7, #8]
2000121c:	1c5a      	adds	r2, r3, #1
2000121e:	60ba      	str	r2, [r7, #8]
20001220:	b2ca      	uxtb	r2, r1
20001222:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001224:	697b      	ldr	r3, [r7, #20]
20001226:	3301      	adds	r3, #1
20001228:	617b      	str	r3, [r7, #20]
2000122a:	697a      	ldr	r2, [r7, #20]
2000122c:	687b      	ldr	r3, [r7, #4]
2000122e:	429a      	cmp	r2, r3
20001230:	dbf0      	blt.n	20001214 <_read+0x12>
  }

  return len;
20001232:	687b      	ldr	r3, [r7, #4]
}
20001234:	4618      	mov	r0, r3
20001236:	3718      	adds	r7, #24
20001238:	46bd      	mov	sp, r7
2000123a:	bd80      	pop	{r7, pc}

2000123c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
2000123c:	b580      	push	{r7, lr}
2000123e:	b086      	sub	sp, #24
20001240:	af00      	add	r7, sp, #0
20001242:	60f8      	str	r0, [r7, #12]
20001244:	60b9      	str	r1, [r7, #8]
20001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
20001248:	2300      	movs	r3, #0
2000124a:	617b      	str	r3, [r7, #20]
2000124c:	e009      	b.n	20001262 <_write+0x26>
  {
    __io_putchar(*ptr++);
2000124e:	68bb      	ldr	r3, [r7, #8]
20001250:	1c5a      	adds	r2, r3, #1
20001252:	60ba      	str	r2, [r7, #8]
20001254:	781b      	ldrb	r3, [r3, #0]
20001256:	4618      	mov	r0, r3
20001258:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
2000125c:	697b      	ldr	r3, [r7, #20]
2000125e:	3301      	adds	r3, #1
20001260:	617b      	str	r3, [r7, #20]
20001262:	697a      	ldr	r2, [r7, #20]
20001264:	687b      	ldr	r3, [r7, #4]
20001266:	429a      	cmp	r2, r3
20001268:	dbf1      	blt.n	2000124e <_write+0x12>
  }
  return len;
2000126a:	687b      	ldr	r3, [r7, #4]
}
2000126c:	4618      	mov	r0, r3
2000126e:	3718      	adds	r7, #24
20001270:	46bd      	mov	sp, r7
20001272:	bd80      	pop	{r7, pc}

20001274 <_close>:

int _close(int file)
{
20001274:	b480      	push	{r7}
20001276:	b083      	sub	sp, #12
20001278:	af00      	add	r7, sp, #0
2000127a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
2000127c:	f04f 33ff 	mov.w	r3, #4294967295
}
20001280:	4618      	mov	r0, r3
20001282:	370c      	adds	r7, #12
20001284:	46bd      	mov	sp, r7
20001286:	f85d 7b04 	ldr.w	r7, [sp], #4
2000128a:	4770      	bx	lr

2000128c <_fstat>:


int _fstat(int file, struct stat *st)
{
2000128c:	b480      	push	{r7}
2000128e:	b083      	sub	sp, #12
20001290:	af00      	add	r7, sp, #0
20001292:	6078      	str	r0, [r7, #4]
20001294:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
20001296:	683b      	ldr	r3, [r7, #0]
20001298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000129c:	605a      	str	r2, [r3, #4]
  return 0;
2000129e:	2300      	movs	r3, #0
}
200012a0:	4618      	mov	r0, r3
200012a2:	370c      	adds	r7, #12
200012a4:	46bd      	mov	sp, r7
200012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200012aa:	4770      	bx	lr

200012ac <_isatty>:

int _isatty(int file)
{
200012ac:	b480      	push	{r7}
200012ae:	b083      	sub	sp, #12
200012b0:	af00      	add	r7, sp, #0
200012b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
200012b4:	2301      	movs	r3, #1
}
200012b6:	4618      	mov	r0, r3
200012b8:	370c      	adds	r7, #12
200012ba:	46bd      	mov	sp, r7
200012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200012c0:	4770      	bx	lr

200012c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
200012c2:	b480      	push	{r7}
200012c4:	b085      	sub	sp, #20
200012c6:	af00      	add	r7, sp, #0
200012c8:	60f8      	str	r0, [r7, #12]
200012ca:	60b9      	str	r1, [r7, #8]
200012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
200012ce:	2300      	movs	r3, #0
}
200012d0:	4618      	mov	r0, r3
200012d2:	3714      	adds	r7, #20
200012d4:	46bd      	mov	sp, r7
200012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200012da:	4770      	bx	lr

200012dc <_open>:

int _open(char *path, int flags, ...)
{
200012dc:	b40e      	push	{r1, r2, r3}
200012de:	b480      	push	{r7}
200012e0:	b082      	sub	sp, #8
200012e2:	af00      	add	r7, sp, #0
200012e4:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
200012e6:	f04f 33ff 	mov.w	r3, #4294967295
}
200012ea:	4618      	mov	r0, r3
200012ec:	3708      	adds	r7, #8
200012ee:	46bd      	mov	sp, r7
200012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200012f4:	b003      	add	sp, #12
200012f6:	4770      	bx	lr

200012f8 <_wait>:

int _wait(int *status)
{
200012f8:	b580      	push	{r7, lr}
200012fa:	b082      	sub	sp, #8
200012fc:	af00      	add	r7, sp, #0
200012fe:	6078      	str	r0, [r7, #4]
  (void)status;
  errno = ECHILD;
20001300:	f008 fe5c 	bl	20009fbc <__errno>
20001304:	4603      	mov	r3, r0
20001306:	220a      	movs	r2, #10
20001308:	601a      	str	r2, [r3, #0]
  return -1;
2000130a:	f04f 33ff 	mov.w	r3, #4294967295
}
2000130e:	4618      	mov	r0, r3
20001310:	3708      	adds	r7, #8
20001312:	46bd      	mov	sp, r7
20001314:	bd80      	pop	{r7, pc}

20001316 <_unlink>:

int _unlink(char *name)
{
20001316:	b580      	push	{r7, lr}
20001318:	b082      	sub	sp, #8
2000131a:	af00      	add	r7, sp, #0
2000131c:	6078      	str	r0, [r7, #4]
  (void)name;
  errno = ENOENT;
2000131e:	f008 fe4d 	bl	20009fbc <__errno>
20001322:	4603      	mov	r3, r0
20001324:	2202      	movs	r2, #2
20001326:	601a      	str	r2, [r3, #0]
  return -1;
20001328:	f04f 33ff 	mov.w	r3, #4294967295
}
2000132c:	4618      	mov	r0, r3
2000132e:	3708      	adds	r7, #8
20001330:	46bd      	mov	sp, r7
20001332:	bd80      	pop	{r7, pc}

20001334 <_times>:

int _times(struct tms *buf)
{
20001334:	b480      	push	{r7}
20001336:	b083      	sub	sp, #12
20001338:	af00      	add	r7, sp, #0
2000133a:	6078      	str	r0, [r7, #4]
  (void)buf;
  return -1;
2000133c:	f04f 33ff 	mov.w	r3, #4294967295
}
20001340:	4618      	mov	r0, r3
20001342:	370c      	adds	r7, #12
20001344:	46bd      	mov	sp, r7
20001346:	f85d 7b04 	ldr.w	r7, [sp], #4
2000134a:	4770      	bx	lr

2000134c <_stat>:

int _stat(char *file, struct stat *st)
{
2000134c:	b480      	push	{r7}
2000134e:	b083      	sub	sp, #12
20001350:	af00      	add	r7, sp, #0
20001352:	6078      	str	r0, [r7, #4]
20001354:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
20001356:	683b      	ldr	r3, [r7, #0]
20001358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000135c:	605a      	str	r2, [r3, #4]
  return 0;
2000135e:	2300      	movs	r3, #0
}
20001360:	4618      	mov	r0, r3
20001362:	370c      	adds	r7, #12
20001364:	46bd      	mov	sp, r7
20001366:	f85d 7b04 	ldr.w	r7, [sp], #4
2000136a:	4770      	bx	lr

2000136c <_link>:

int _link(char *old, char *new)
{
2000136c:	b580      	push	{r7, lr}
2000136e:	b082      	sub	sp, #8
20001370:	af00      	add	r7, sp, #0
20001372:	6078      	str	r0, [r7, #4]
20001374:	6039      	str	r1, [r7, #0]
  (void)old;
  (void)new;
  errno = EMLINK;
20001376:	f008 fe21 	bl	20009fbc <__errno>
2000137a:	4603      	mov	r3, r0
2000137c:	221f      	movs	r2, #31
2000137e:	601a      	str	r2, [r3, #0]
  return -1;
20001380:	f04f 33ff 	mov.w	r3, #4294967295
}
20001384:	4618      	mov	r0, r3
20001386:	3708      	adds	r7, #8
20001388:	46bd      	mov	sp, r7
2000138a:	bd80      	pop	{r7, pc}

2000138c <_fork>:

int _fork(void)
{
2000138c:	b580      	push	{r7, lr}
2000138e:	af00      	add	r7, sp, #0
  errno = EAGAIN;
20001390:	f008 fe14 	bl	20009fbc <__errno>
20001394:	4603      	mov	r3, r0
20001396:	220b      	movs	r2, #11
20001398:	601a      	str	r2, [r3, #0]
  return -1;
2000139a:	f04f 33ff 	mov.w	r3, #4294967295
}
2000139e:	4618      	mov	r0, r3
200013a0:	bd80      	pop	{r7, pc}

200013a2 <_execve>:

int _execve(char *name, char **argv, char **env)
{
200013a2:	b580      	push	{r7, lr}
200013a4:	b084      	sub	sp, #16
200013a6:	af00      	add	r7, sp, #0
200013a8:	60f8      	str	r0, [r7, #12]
200013aa:	60b9      	str	r1, [r7, #8]
200013ac:	607a      	str	r2, [r7, #4]
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
200013ae:	f008 fe05 	bl	20009fbc <__errno>
200013b2:	4603      	mov	r3, r0
200013b4:	220c      	movs	r2, #12
200013b6:	601a      	str	r2, [r3, #0]
  return -1;
200013b8:	f04f 33ff 	mov.w	r3, #4294967295
}
200013bc:	4618      	mov	r0, r3
200013be:	3710      	adds	r7, #16
200013c0:	46bd      	mov	sp, r7
200013c2:	bd80      	pop	{r7, pc}

200013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
200013c4:	b580      	push	{r7, lr}
200013c6:	b086      	sub	sp, #24
200013c8:	af00      	add	r7, sp, #0
200013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
200013cc:	4a14      	ldr	r2, [pc, #80]	; (20001420 <_sbrk+0x5c>)
200013ce:	4b15      	ldr	r3, [pc, #84]	; (20001424 <_sbrk+0x60>)
200013d0:	1ad3      	subs	r3, r2, r3
200013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
200013d4:	697b      	ldr	r3, [r7, #20]
200013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
200013d8:	4b13      	ldr	r3, [pc, #76]	; (20001428 <_sbrk+0x64>)
200013da:	681b      	ldr	r3, [r3, #0]
200013dc:	2b00      	cmp	r3, #0
200013de:	d102      	bne.n	200013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
200013e0:	4b11      	ldr	r3, [pc, #68]	; (20001428 <_sbrk+0x64>)
200013e2:	4a12      	ldr	r2, [pc, #72]	; (2000142c <_sbrk+0x68>)
200013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
200013e6:	4b10      	ldr	r3, [pc, #64]	; (20001428 <_sbrk+0x64>)
200013e8:	681a      	ldr	r2, [r3, #0]
200013ea:	687b      	ldr	r3, [r7, #4]
200013ec:	4413      	add	r3, r2
200013ee:	693a      	ldr	r2, [r7, #16]
200013f0:	429a      	cmp	r2, r3
200013f2:	d207      	bcs.n	20001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
200013f4:	f008 fde2 	bl	20009fbc <__errno>
200013f8:	4603      	mov	r3, r0
200013fa:	220c      	movs	r2, #12
200013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
200013fe:	f04f 33ff 	mov.w	r3, #4294967295
20001402:	e009      	b.n	20001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20001404:	4b08      	ldr	r3, [pc, #32]	; (20001428 <_sbrk+0x64>)
20001406:	681b      	ldr	r3, [r3, #0]
20001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000140a:	4b07      	ldr	r3, [pc, #28]	; (20001428 <_sbrk+0x64>)
2000140c:	681a      	ldr	r2, [r3, #0]
2000140e:	687b      	ldr	r3, [r7, #4]
20001410:	4413      	add	r3, r2
20001412:	4a05      	ldr	r2, [pc, #20]	; (20001428 <_sbrk+0x64>)
20001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20001416:	68fb      	ldr	r3, [r7, #12]
}
20001418:	4618      	mov	r0, r3
2000141a:	3718      	adds	r7, #24
2000141c:	46bd      	mov	sp, r7
2000141e:	bd80      	pop	{r7, pc}
20001420:	20020004 	.word	0x20020004
20001424:	00000400 	.word	0x00000400
20001428:	20000490 	.word	0x20000490
2000142c:	2000a618 	.word	0x2000a618

20001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001430:	b480      	push	{r7}
20001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001434:	4b06      	ldr	r3, [pc, #24]	; (20001450 <SystemInit+0x20>)
20001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000143a:	4a05      	ldr	r2, [pc, #20]	; (20001450 <SystemInit+0x20>)
2000143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20001444:	bf00      	nop
20001446:	46bd      	mov	sp, r7
20001448:	f85d 7b04 	ldr.w	r7, [sp], #4
2000144c:	4770      	bx	lr
2000144e:	bf00      	nop
20001450:	e000ed00 	.word	0xe000ed00

20001454 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
20001454:	b480      	push	{r7}
20001456:	b087      	sub	sp, #28
20001458:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
2000145a:	2300      	movs	r3, #0
2000145c:	613b      	str	r3, [r7, #16]
2000145e:	2300      	movs	r3, #0
20001460:	617b      	str	r3, [r7, #20]
20001462:	2302      	movs	r3, #2
20001464:	60fb      	str	r3, [r7, #12]
20001466:	2300      	movs	r3, #0
20001468:	60bb      	str	r3, [r7, #8]
2000146a:	2302      	movs	r3, #2
2000146c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
2000146e:	4b34      	ldr	r3, [pc, #208]	; (20001540 <SystemCoreClockUpdate+0xec>)
20001470:	689b      	ldr	r3, [r3, #8]
20001472:	f003 030c 	and.w	r3, r3, #12
20001476:	613b      	str	r3, [r7, #16]

  switch (tmp)
20001478:	693b      	ldr	r3, [r7, #16]
2000147a:	2b08      	cmp	r3, #8
2000147c:	d011      	beq.n	200014a2 <SystemCoreClockUpdate+0x4e>
2000147e:	693b      	ldr	r3, [r7, #16]
20001480:	2b08      	cmp	r3, #8
20001482:	d844      	bhi.n	2000150e <SystemCoreClockUpdate+0xba>
20001484:	693b      	ldr	r3, [r7, #16]
20001486:	2b00      	cmp	r3, #0
20001488:	d003      	beq.n	20001492 <SystemCoreClockUpdate+0x3e>
2000148a:	693b      	ldr	r3, [r7, #16]
2000148c:	2b04      	cmp	r3, #4
2000148e:	d004      	beq.n	2000149a <SystemCoreClockUpdate+0x46>
20001490:	e03d      	b.n	2000150e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
20001492:	4b2c      	ldr	r3, [pc, #176]	; (20001544 <SystemCoreClockUpdate+0xf0>)
20001494:	4a2c      	ldr	r2, [pc, #176]	; (20001548 <SystemCoreClockUpdate+0xf4>)
20001496:	601a      	str	r2, [r3, #0]
      break;
20001498:	e03d      	b.n	20001516 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
2000149a:	4b2a      	ldr	r3, [pc, #168]	; (20001544 <SystemCoreClockUpdate+0xf0>)
2000149c:	4a2b      	ldr	r2, [pc, #172]	; (2000154c <SystemCoreClockUpdate+0xf8>)
2000149e:	601a      	str	r2, [r3, #0]
      break;
200014a0:	e039      	b.n	20001516 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
200014a2:	4b27      	ldr	r3, [pc, #156]	; (20001540 <SystemCoreClockUpdate+0xec>)
200014a4:	685b      	ldr	r3, [r3, #4]
200014a6:	0d9b      	lsrs	r3, r3, #22
200014a8:	f003 0301 	and.w	r3, r3, #1
200014ac:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200014ae:	4b24      	ldr	r3, [pc, #144]	; (20001540 <SystemCoreClockUpdate+0xec>)
200014b0:	685b      	ldr	r3, [r3, #4]
200014b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200014b6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
200014b8:	68bb      	ldr	r3, [r7, #8]
200014ba:	2b00      	cmp	r3, #0
200014bc:	d00c      	beq.n	200014d8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200014be:	4a23      	ldr	r2, [pc, #140]	; (2000154c <SystemCoreClockUpdate+0xf8>)
200014c0:	687b      	ldr	r3, [r7, #4]
200014c2:	fbb2 f3f3 	udiv	r3, r2, r3
200014c6:	4a1e      	ldr	r2, [pc, #120]	; (20001540 <SystemCoreClockUpdate+0xec>)
200014c8:	6852      	ldr	r2, [r2, #4]
200014ca:	0992      	lsrs	r2, r2, #6
200014cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
200014d0:	fb02 f303 	mul.w	r3, r2, r3
200014d4:	617b      	str	r3, [r7, #20]
200014d6:	e00b      	b.n	200014f0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200014d8:	4a1b      	ldr	r2, [pc, #108]	; (20001548 <SystemCoreClockUpdate+0xf4>)
200014da:	687b      	ldr	r3, [r7, #4]
200014dc:	fbb2 f3f3 	udiv	r3, r2, r3
200014e0:	4a17      	ldr	r2, [pc, #92]	; (20001540 <SystemCoreClockUpdate+0xec>)
200014e2:	6852      	ldr	r2, [r2, #4]
200014e4:	0992      	lsrs	r2, r2, #6
200014e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
200014ea:	fb02 f303 	mul.w	r3, r2, r3
200014ee:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
200014f0:	4b13      	ldr	r3, [pc, #76]	; (20001540 <SystemCoreClockUpdate+0xec>)
200014f2:	685b      	ldr	r3, [r3, #4]
200014f4:	0c1b      	lsrs	r3, r3, #16
200014f6:	f003 0303 	and.w	r3, r3, #3
200014fa:	3301      	adds	r3, #1
200014fc:	005b      	lsls	r3, r3, #1
200014fe:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
20001500:	697a      	ldr	r2, [r7, #20]
20001502:	68fb      	ldr	r3, [r7, #12]
20001504:	fbb2 f3f3 	udiv	r3, r2, r3
20001508:	4a0e      	ldr	r2, [pc, #56]	; (20001544 <SystemCoreClockUpdate+0xf0>)
2000150a:	6013      	str	r3, [r2, #0]
      break;
2000150c:	e003      	b.n	20001516 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
2000150e:	4b0d      	ldr	r3, [pc, #52]	; (20001544 <SystemCoreClockUpdate+0xf0>)
20001510:	4a0d      	ldr	r2, [pc, #52]	; (20001548 <SystemCoreClockUpdate+0xf4>)
20001512:	601a      	str	r2, [r3, #0]
      break;
20001514:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
20001516:	4b0a      	ldr	r3, [pc, #40]	; (20001540 <SystemCoreClockUpdate+0xec>)
20001518:	689b      	ldr	r3, [r3, #8]
2000151a:	091b      	lsrs	r3, r3, #4
2000151c:	f003 030f 	and.w	r3, r3, #15
20001520:	4a0b      	ldr	r2, [pc, #44]	; (20001550 <SystemCoreClockUpdate+0xfc>)
20001522:	5cd3      	ldrb	r3, [r2, r3]
20001524:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
20001526:	4b07      	ldr	r3, [pc, #28]	; (20001544 <SystemCoreClockUpdate+0xf0>)
20001528:	681a      	ldr	r2, [r3, #0]
2000152a:	693b      	ldr	r3, [r7, #16]
2000152c:	fa22 f303 	lsr.w	r3, r2, r3
20001530:	4a04      	ldr	r2, [pc, #16]	; (20001544 <SystemCoreClockUpdate+0xf0>)
20001532:	6013      	str	r3, [r2, #0]
}
20001534:	bf00      	nop
20001536:	371c      	adds	r7, #28
20001538:	46bd      	mov	sp, r7
2000153a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000153e:	4770      	bx	lr
20001540:	40023800 	.word	0x40023800
20001544:	200003b0 	.word	0x200003b0
20001548:	00f42400 	.word	0x00f42400
2000154c:	017d7840 	.word	0x017d7840
20001550:	2000a5f4 	.word	0x2000a5f4

20001554 <Flash_Select>:
 * 			So testing CS pin let understand if a
 * 			transmission is still running:
 * 			before selecting chip a test over the same CS let
 * 			understand if previous transmission terminated
 ******************************************/
void Flash_Select(void) {
20001554:	b580      	push	{r7, lr}
20001556:	af00      	add	r7, sp, #0
		while (SPI_IS_BUSY) {}
20001558:	bf00      	nop
2000155a:	2110      	movs	r1, #16
2000155c:	4806      	ldr	r0, [pc, #24]	; (20001578 <Flash_Select+0x24>)
2000155e:	f004 fc09 	bl	20005d74 <HAL_GPIO_ReadPin>
20001562:	4603      	mov	r3, r0
20001564:	2b00      	cmp	r3, #0
20001566:	d0f8      	beq.n	2000155a <Flash_Select+0x6>
		HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
20001568:	2200      	movs	r2, #0
2000156a:	2110      	movs	r1, #16
2000156c:	4802      	ldr	r0, [pc, #8]	; (20001578 <Flash_Select+0x24>)
2000156e:	f004 fc19 	bl	20005da4 <HAL_GPIO_WritePin>
}
20001572:	bf00      	nop
20001574:	bd80      	pop	{r7, pc}
20001576:	bf00      	nop
20001578:	40020000 	.word	0x40020000

2000157c <Flash_UnSelect>:

/******************************************
 * @brief	disable Flash SPI
 * 			verifying that there is no a running data transfer
 ******************************************/
void Flash_UnSelect(void) {
2000157c:	b580      	push	{r7, lr}
2000157e:	af00      	add	r7, sp, #0
	// CS pin must be low (selected flash) until previous transmission is completed
#ifdef	EXT_FLASH_SPI_POLLING_MODE
	HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);	//unselect
20001580:	2201      	movs	r2, #1
20001582:	2110      	movs	r1, #16
20001584:	4802      	ldr	r0, [pc, #8]	; (20001590 <Flash_UnSelect+0x14>)
20001586:	f004 fc0d 	bl	20005da4 <HAL_GPIO_WritePin>
#endif  // FLASH_SPI_POLLING_MODE
}
2000158a:	bf00      	nop
2000158c:	bd80      	pop	{r7, pc}
2000158e:	bf00      	nop
20001590:	40020000 	.word	0x40020000

20001594 <Flash_Receive>:




void Flash_Receive(uint8_t* data, uint16_t dataSize){
20001594:	b580      	push	{r7, lr}
20001596:	b082      	sub	sp, #8
20001598:	af00      	add	r7, sp, #0
2000159a:	6078      	str	r0, [r7, #4]
2000159c:	460b      	mov	r3, r1
2000159e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
200015a0:	887a      	ldrh	r2, [r7, #2]
200015a2:	f04f 33ff 	mov.w	r3, #4294967295
200015a6:	6879      	ldr	r1, [r7, #4]
200015a8:	4803      	ldr	r0, [pc, #12]	; (200015b8 <Flash_Receive+0x24>)
200015aa:	f006 f9e7 	bl	2000797c <HAL_SPI_Receive>
}
200015ae:	bf00      	nop
200015b0:	3708      	adds	r7, #8
200015b2:	46bd      	mov	sp, r7
200015b4:	bd80      	pop	{r7, pc}
200015b6:	bf00      	nop
200015b8:	20000434 	.word	0x20000434

200015bc <Flash_Polling_Transmit>:
 * @BRIEF	engages SPI port tranferring data to Flash
 * 			just using Polling mode (TouchGFX requires this function)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 *********************************************************************/
void Flash_Polling_Transmit(uint8_t* data, uint16_t dataSize){
200015bc:	b580      	push	{r7, lr}
200015be:	b082      	sub	sp, #8
200015c0:	af00      	add	r7, sp, #0
200015c2:	6078      	str	r0, [r7, #4]
200015c4:	460b      	mov	r3, r1
200015c6:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
200015c8:	887a      	ldrh	r2, [r7, #2]
200015ca:	f04f 33ff 	mov.w	r3, #4294967295
200015ce:	6879      	ldr	r1, [r7, #4]
200015d0:	4803      	ldr	r0, [pc, #12]	; (200015e0 <Flash_Polling_Transmit+0x24>)
200015d2:	f006 f890 	bl	200076f6 <HAL_SPI_Transmit>
}
200015d6:	bf00      	nop
200015d8:	3708      	adds	r7, #8
200015da:	46bd      	mov	sp, r7
200015dc:	bd80      	pop	{r7, pc}
200015de:	bf00      	nop
200015e0:	20000434 	.word	0x20000434

200015e4 <Flash_Transmit>:
 * 			you need to set this macro even using TouchGFX (having its own configuration parameter:
 * 			set DISPL_DMA_CUTOFF and CubeMX parameter to the same value)
 * @PARAM	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 **************************/
void Flash_Transmit(uint8_t* data, uint16_t dataSize){
200015e4:	b580      	push	{r7, lr}
200015e6:	b082      	sub	sp, #8
200015e8:	af00      	add	r7, sp, #0
200015ea:	6078      	str	r0, [r7, #4]
200015ec:	460b      	mov	r3, r1
200015ee:	807b      	strh	r3, [r7, #2]
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	if (dataSize<EXT_FLASH_DMA_CUTOFF) {
#endif //FLASH_SPI_POLLING_MODE
		HAL_SPI_Transmit(&FLASH_SPI_PORT , data, dataSize, HAL_MAX_DELAY);
200015f0:	887a      	ldrh	r2, [r7, #2]
200015f2:	f04f 33ff 	mov.w	r3, #4294967295
200015f6:	6879      	ldr	r1, [r7, #4]
200015f8:	4803      	ldr	r0, [pc, #12]	; (20001608 <Flash_Transmit+0x24>)
200015fa:	f006 f87c 	bl	200076f6 <HAL_SPI_Transmit>
#ifndef	EXT_FLASH_SPI_POLLING_MODE
	} else {
		HAL_SPI_Transmit_DMA(&EXT_FLASH_SPI_PORT , data, dataSize);
	}
#endif  //FLASH_SPI_POLLING_MODE
}
200015fe:	bf00      	nop
20001600:	3708      	adds	r7, #8
20001602:	46bd      	mov	sp, r7
20001604:	bd80      	pop	{r7, pc}
20001606:	bf00      	nop
20001608:	20000434 	.word	0x20000434

2000160c <Flash_WaitForWritingComplete>:
/**************************
 * @BRIEF	keeps looping inside this function until "BUSY" bit in SR1 register
 * 			becomes 0, meaning that the runnin data operation (writing or erasing)
 * 			on the chip, ended
 **************************/
void Flash_WaitForWritingComplete(){
2000160c:	b580      	push	{r7, lr}
2000160e:	b082      	sub	sp, #8
20001610:	af00      	add	r7, sp, #0
uint8_t buffer[1];
	Flash_Select();
20001612:	f7ff ff9f 	bl	20001554 <Flash_Select>
	buffer[0] = W25_R_SR1;
20001616:	2305      	movs	r3, #5
20001618:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
2000161a:	1d3b      	adds	r3, r7, #4
2000161c:	2101      	movs	r1, #1
2000161e:	4618      	mov	r0, r3
20001620:	f7ff ffe0 	bl	200015e4 <Flash_Transmit>
	do {
		Flash_Receive(buffer, 1);  //SR1 is repeteadly sent until Flash is selected
20001624:	1d3b      	adds	r3, r7, #4
20001626:	2101      	movs	r1, #1
20001628:	4618      	mov	r0, r3
2000162a:	f7ff ffb3 	bl	20001594 <Flash_Receive>
	} while (buffer[0] & SR1_BIT_BUSY);
2000162e:	793b      	ldrb	r3, [r7, #4]
20001630:	f003 0301 	and.w	r3, r3, #1
20001634:	2b00      	cmp	r3, #0
20001636:	d1f5      	bne.n	20001624 <Flash_WaitForWritingComplete+0x18>
	Flash_UnSelect();
20001638:	f7ff ffa0 	bl	2000157c <Flash_UnSelect>
}
2000163c:	bf00      	nop
2000163e:	3708      	adds	r7, #8
20001640:	46bd      	mov	sp, r7
20001642:	bd80      	pop	{r7, pc}

20001644 <Flash_Read>:
 * 			current version of library doesn't need it
 * @PARAM	addr		EEPROM address to start reading
 *  		data		buffer to fill with read data
 * 			dataSize	number of bytes to read
 **************************/
void Flash_Read(uint32_t addr, uint8_t* data, uint32_t dataSize){
20001644:	b580      	push	{r7, lr}
20001646:	b086      	sub	sp, #24
20001648:	af00      	add	r7, sp, #0
2000164a:	60f8      	str	r0, [r7, #12]
2000164c:	60b9      	str	r1, [r7, #8]
2000164e:	607a      	str	r2, [r7, #4]
uint16_t data_to_transfer;
uint8_t buffer[5];

	buffer[0] = FLASH_READ_COMMAND;
20001650:	2303      	movs	r3, #3
20001652:	743b      	strb	r3, [r7, #16]
	buffer[1] = (addr >> 16) & 0xFF;
20001654:	68fb      	ldr	r3, [r7, #12]
20001656:	0c1b      	lsrs	r3, r3, #16
20001658:	b2db      	uxtb	r3, r3
2000165a:	747b      	strb	r3, [r7, #17]
	buffer[2] = (addr >> 8) & 0xFF;
2000165c:	68fb      	ldr	r3, [r7, #12]
2000165e:	0a1b      	lsrs	r3, r3, #8
20001660:	b2db      	uxtb	r3, r3
20001662:	74bb      	strb	r3, [r7, #18]
	buffer[3] = addr & 0xFF;
20001664:	68fb      	ldr	r3, [r7, #12]
20001666:	b2db      	uxtb	r3, r3
20001668:	74fb      	strb	r3, [r7, #19]
	buffer[4] = W25_DUMMY;
2000166a:	2300      	movs	r3, #0
2000166c:	753b      	strb	r3, [r7, #20]
	Flash_Select();
2000166e:	f7ff ff71 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, (FLASH_READ_COMMAND == W25_READ ? 4 : 5));  // "normal/slow" read command doesn't need sending dummy byte
20001672:	f107 0310 	add.w	r3, r7, #16
20001676:	2104      	movs	r1, #4
20001678:	4618      	mov	r0, r3
2000167a:	f7ff ffb3 	bl	200015e4 <Flash_Transmit>

	// dataSize is 32 bit, spi_receive handles 16bit transfers, so I have to loop...
	while (dataSize) {
2000167e:	e016      	b.n	200016ae <Flash_Read+0x6a>
		data_to_transfer = ((dataSize>0xFFFF) ? 0xFFFF : (uint16_t)dataSize);
20001680:	687b      	ldr	r3, [r7, #4]
20001682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20001686:	d202      	bcs.n	2000168e <Flash_Read+0x4a>
20001688:	687b      	ldr	r3, [r7, #4]
2000168a:	b29b      	uxth	r3, r3
2000168c:	e001      	b.n	20001692 <Flash_Read+0x4e>
2000168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
20001692:	82fb      	strh	r3, [r7, #22]
		Flash_Receive(data, data_to_transfer);
20001694:	8afb      	ldrh	r3, [r7, #22]
20001696:	4619      	mov	r1, r3
20001698:	68b8      	ldr	r0, [r7, #8]
2000169a:	f7ff ff7b 	bl	20001594 <Flash_Receive>
		data+=data_to_transfer;
2000169e:	8afb      	ldrh	r3, [r7, #22]
200016a0:	68ba      	ldr	r2, [r7, #8]
200016a2:	4413      	add	r3, r2
200016a4:	60bb      	str	r3, [r7, #8]
		dataSize-=data_to_transfer;
200016a6:	8afb      	ldrh	r3, [r7, #22]
200016a8:	687a      	ldr	r2, [r7, #4]
200016aa:	1ad3      	subs	r3, r2, r3
200016ac:	607b      	str	r3, [r7, #4]
	while (dataSize) {
200016ae:	687b      	ldr	r3, [r7, #4]
200016b0:	2b00      	cmp	r3, #0
200016b2:	d1e5      	bne.n	20001680 <Flash_Read+0x3c>
	}
	Flash_UnSelect();
200016b4:	f7ff ff62 	bl	2000157c <Flash_UnSelect>
}
200016b8:	bf00      	nop
200016ba:	3718      	adds	r7, #24
200016bc:	46bd      	mov	sp, r7
200016be:	bd80      	pop	{r7, pc}

200016c0 <Flash_SimpleWriteAPage>:
 * 			function doesn't check for the EEPROM page boundary override
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_SimpleWriteAPage(uint32_t addr, uint8_t* data, uint16_t dataSize){
200016c0:	b580      	push	{r7, lr}
200016c2:	b086      	sub	sp, #24
200016c4:	af00      	add	r7, sp, #0
200016c6:	60f8      	str	r0, [r7, #12]
200016c8:	60b9      	str	r1, [r7, #8]
200016ca:	4613      	mov	r3, r2
200016cc:	80fb      	strh	r3, [r7, #6]
uint8_t buffer[4];
	buffer[0] = W25_PAGE_P;
200016ce:	2302      	movs	r3, #2
200016d0:	753b      	strb	r3, [r7, #20]
	buffer[1] = (addr >> 16) & 0xFF;
200016d2:	68fb      	ldr	r3, [r7, #12]
200016d4:	0c1b      	lsrs	r3, r3, #16
200016d6:	b2db      	uxtb	r3, r3
200016d8:	757b      	strb	r3, [r7, #21]
	buffer[2] = (addr >> 8) & 0xFF;
200016da:	68fb      	ldr	r3, [r7, #12]
200016dc:	0a1b      	lsrs	r3, r3, #8
200016de:	b2db      	uxtb	r3, r3
200016e0:	75bb      	strb	r3, [r7, #22]
	buffer[3] = addr & 0xFF;
200016e2:	68fb      	ldr	r3, [r7, #12]
200016e4:	b2db      	uxtb	r3, r3
200016e6:	75fb      	strb	r3, [r7, #23]
	Flash_Select();
200016e8:	f7ff ff34 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 4);
200016ec:	f107 0314 	add.w	r3, r7, #20
200016f0:	2104      	movs	r1, #4
200016f2:	4618      	mov	r0, r3
200016f4:	f7ff ff76 	bl	200015e4 <Flash_Transmit>
	Flash_Transmit(data, dataSize);
200016f8:	88fb      	ldrh	r3, [r7, #6]
200016fa:	4619      	mov	r1, r3
200016fc:	68b8      	ldr	r0, [r7, #8]
200016fe:	f7ff ff71 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
20001702:	f7ff ff3b 	bl	2000157c <Flash_UnSelect>
}
20001706:	bf00      	nop
20001708:	3718      	adds	r7, #24
2000170a:	46bd      	mov	sp, r7
2000170c:	bd80      	pop	{r7, pc}

2000170e <Flash_Write>:
 * 			and waiting the writing complete each time
 * @PARAM	addr		EEPROM address to start writing
 *  		data		buffer containing data to write into EEPROM
 * 			dataSize	number of bytes to write
 ***********************************************************************/
void Flash_Write(uint32_t addr, uint8_t* data, uint32_t dataSize){
2000170e:	b580      	push	{r7, lr}
20001710:	b088      	sub	sp, #32
20001712:	af00      	add	r7, sp, #0
20001714:	60f8      	str	r0, [r7, #12]
20001716:	60b9      	str	r1, [r7, #8]
20001718:	607a      	str	r2, [r7, #4]
uint8_t buffer[4];
uint16_t quota;
uint32_t inpage_addr;

	if (dataSize==0)
2000171a:	687b      	ldr	r3, [r7, #4]
2000171c:	2b00      	cmp	r3, #0
2000171e:	d054      	beq.n	200017ca <Flash_Write+0xbc>
		return;

	// quota is the data size trasferred until now
	quota=0;
20001720:	2300      	movs	r3, #0
20001722:	83fb      	strh	r3, [r7, #30]

	// define the starting write position inside the first Flash page to write...
	inpage_addr=addr & (EXT_FLASH_PAGE_SIZE-1);
20001724:	68fb      	ldr	r3, [r7, #12]
20001726:	b2db      	uxtb	r3, r3
20001728:	61bb      	str	r3, [r7, #24]

	// ... so I can detect if more than 1 Flash page has still to be written
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
2000172a:	e025      	b.n	20001778 <Flash_Write+0x6a>
	//loop here inside, until more than 1 Flash page...

		Flash_Select();
2000172c:	f7ff ff12 	bl	20001554 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
20001730:	2306      	movs	r3, #6
20001732:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
20001734:	f107 0314 	add.w	r3, r7, #20
20001738:	2101      	movs	r1, #1
2000173a:	4618      	mov	r0, r3
2000173c:	f7ff ff52 	bl	200015e4 <Flash_Transmit>
		Flash_UnSelect();
20001740:	f7ff ff1c 	bl	2000157c <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,(EXT_FLASH_PAGE_SIZE-inpage_addr));
20001744:	8bfa      	ldrh	r2, [r7, #30]
20001746:	68fb      	ldr	r3, [r7, #12]
20001748:	18d0      	adds	r0, r2, r3
2000174a:	8bfb      	ldrh	r3, [r7, #30]
2000174c:	68ba      	ldr	r2, [r7, #8]
2000174e:	18d1      	adds	r1, r2, r3
20001750:	69bb      	ldr	r3, [r7, #24]
20001752:	b29b      	uxth	r3, r3
20001754:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
20001758:	b29b      	uxth	r3, r3
2000175a:	461a      	mov	r2, r3
2000175c:	f7ff ffb0 	bl	200016c0 <Flash_SimpleWriteAPage>
		quota+=(EXT_FLASH_PAGE_SIZE-inpage_addr);
20001760:	69bb      	ldr	r3, [r7, #24]
20001762:	b29b      	uxth	r3, r3
20001764:	8bfa      	ldrh	r2, [r7, #30]
20001766:	1ad3      	subs	r3, r2, r3
20001768:	b29b      	uxth	r3, r3
2000176a:	f503 7380 	add.w	r3, r3, #256	; 0x100
2000176e:	83fb      	strh	r3, [r7, #30]
		// having aligned data to page border on the first writing
		// next writings start from 0 position inside a page
		inpage_addr=0;
20001770:	2300      	movs	r3, #0
20001772:	61bb      	str	r3, [r7, #24]
		Flash_WaitForWritingComplete();
20001774:	f7ff ff4a 	bl	2000160c <Flash_WaitForWritingComplete>
	while ((dataSize-quota+inpage_addr)>EXT_FLASH_PAGE_SIZE){
20001778:	8bfb      	ldrh	r3, [r7, #30]
2000177a:	687a      	ldr	r2, [r7, #4]
2000177c:	1ad2      	subs	r2, r2, r3
2000177e:	69bb      	ldr	r3, [r7, #24]
20001780:	4413      	add	r3, r2
20001782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
20001786:	d8d1      	bhi.n	2000172c <Flash_Write+0x1e>
	}
	// now just the final Flash page...
	if (dataSize-quota) {
20001788:	8bfb      	ldrh	r3, [r7, #30]
2000178a:	687a      	ldr	r2, [r7, #4]
2000178c:	429a      	cmp	r2, r3
2000178e:	d01d      	beq.n	200017cc <Flash_Write+0xbe>
		Flash_Select();
20001790:	f7ff fee0 	bl	20001554 <Flash_Select>
		buffer[0] = W25_W_ENABLE;
20001794:	2306      	movs	r3, #6
20001796:	753b      	strb	r3, [r7, #20]
		Flash_Transmit(buffer, 1);
20001798:	f107 0314 	add.w	r3, r7, #20
2000179c:	2101      	movs	r1, #1
2000179e:	4618      	mov	r0, r3
200017a0:	f7ff ff20 	bl	200015e4 <Flash_Transmit>
		Flash_UnSelect();
200017a4:	f7ff feea 	bl	2000157c <Flash_UnSelect>
		Flash_SimpleWriteAPage(addr+quota,data+quota,dataSize-quota);
200017a8:	8bfa      	ldrh	r2, [r7, #30]
200017aa:	68fb      	ldr	r3, [r7, #12]
200017ac:	18d0      	adds	r0, r2, r3
200017ae:	8bfb      	ldrh	r3, [r7, #30]
200017b0:	68ba      	ldr	r2, [r7, #8]
200017b2:	18d1      	adds	r1, r2, r3
200017b4:	687b      	ldr	r3, [r7, #4]
200017b6:	b29a      	uxth	r2, r3
200017b8:	8bfb      	ldrh	r3, [r7, #30]
200017ba:	1ad3      	subs	r3, r2, r3
200017bc:	b29b      	uxth	r3, r3
200017be:	461a      	mov	r2, r3
200017c0:	f7ff ff7e 	bl	200016c0 <Flash_SimpleWriteAPage>
		Flash_WaitForWritingComplete();
200017c4:	f7ff ff22 	bl	2000160c <Flash_WaitForWritingComplete>
200017c8:	e000      	b.n	200017cc <Flash_Write+0xbe>
		return;
200017ca:	bf00      	nop
	}
}
200017cc:	3720      	adds	r7, #32
200017ce:	46bd      	mov	sp, r7
200017d0:	bd80      	pop	{r7, pc}

200017d2 <Flash_SErase4k>:
 * 			0x1000, 0x2000, 0x3000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 4k sector boundary)
 *********************************/
void Flash_SErase4k(uint32_t addr){
200017d2:	b580      	push	{r7, lr}
200017d4:	b084      	sub	sp, #16
200017d6:	af00      	add	r7, sp, #0
200017d8:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
200017da:	f7ff febb 	bl	20001554 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
200017de:	2306      	movs	r3, #6
200017e0:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
200017e2:	f107 030c 	add.w	r3, r7, #12
200017e6:	2101      	movs	r1, #1
200017e8:	4618      	mov	r0, r3
200017ea:	f7ff fefb 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
200017ee:	f7ff fec5 	bl	2000157c <Flash_UnSelect>

	buffer[0] = W25_S_ERASE4K;
200017f2:	2320      	movs	r3, #32
200017f4:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
200017f6:	687b      	ldr	r3, [r7, #4]
200017f8:	0c1b      	lsrs	r3, r3, #16
200017fa:	b2db      	uxtb	r3, r3
200017fc:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
200017fe:	687b      	ldr	r3, [r7, #4]
20001800:	0a1b      	lsrs	r3, r3, #8
20001802:	b2db      	uxtb	r3, r3
20001804:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
20001806:	687b      	ldr	r3, [r7, #4]
20001808:	b2db      	uxtb	r3, r3
2000180a:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
2000180c:	f7ff fea2 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001810:	f107 030c 	add.w	r3, r7, #12
20001814:	2104      	movs	r1, #4
20001816:	4618      	mov	r0, r3
20001818:	f7ff fee4 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
2000181c:	f7ff feae 	bl	2000157c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
20001820:	f7ff fef4 	bl	2000160c <Flash_WaitForWritingComplete>
}
20001824:	bf00      	nop
20001826:	3710      	adds	r7, #16
20001828:	46bd      	mov	sp, r7
2000182a:	bd80      	pop	{r7, pc}

2000182c <Flash_BErase32k>:
 * 			0x008000, 0x010000, 0x018000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 32k block boundary)
 *********************************/
void Flash_BErase32k(uint32_t addr){
2000182c:	b580      	push	{r7, lr}
2000182e:	b084      	sub	sp, #16
20001830:	af00      	add	r7, sp, #0
20001832:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
20001834:	f7ff fe8e 	bl	20001554 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
20001838:	2306      	movs	r3, #6
2000183a:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
2000183c:	f107 030c 	add.w	r3, r7, #12
20001840:	2101      	movs	r1, #1
20001842:	4618      	mov	r0, r3
20001844:	f7ff fece 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
20001848:	f7ff fe98 	bl	2000157c <Flash_UnSelect>

	buffer[0] = W25_B_ERASE32K;
2000184c:	2352      	movs	r3, #82	; 0x52
2000184e:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
20001850:	687b      	ldr	r3, [r7, #4]
20001852:	0c1b      	lsrs	r3, r3, #16
20001854:	b2db      	uxtb	r3, r3
20001856:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
20001858:	687b      	ldr	r3, [r7, #4]
2000185a:	0a1b      	lsrs	r3, r3, #8
2000185c:	b2db      	uxtb	r3, r3
2000185e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
20001860:	687b      	ldr	r3, [r7, #4]
20001862:	b2db      	uxtb	r3, r3
20001864:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
20001866:	f7ff fe75 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 4);
2000186a:	f107 030c 	add.w	r3, r7, #12
2000186e:	2104      	movs	r1, #4
20001870:	4618      	mov	r0, r3
20001872:	f7ff feb7 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
20001876:	f7ff fe81 	bl	2000157c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
2000187a:	f7ff fec7 	bl	2000160c <Flash_WaitForWritingComplete>
}
2000187e:	bf00      	nop
20001880:	3710      	adds	r7, #16
20001882:	46bd      	mov	sp, r7
20001884:	bd80      	pop	{r7, pc}

20001886 <Flash_BErase64k>:
 * 			0x010000, 0x020000, 0x030000, ...
 * 			waiting the writing complete in each page
 * @PARAM	addr	starting erase address
 * 					(it must be a 64k block boundary)
 *********************************/
void Flash_BErase64k(uint32_t addr){
20001886:	b580      	push	{r7, lr}
20001888:	b084      	sub	sp, #16
2000188a:	af00      	add	r7, sp, #0
2000188c:	6078      	str	r0, [r7, #4]
uint8_t buffer[4];
	Flash_Select();
2000188e:	f7ff fe61 	bl	20001554 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
20001892:	2306      	movs	r3, #6
20001894:	733b      	strb	r3, [r7, #12]
	Flash_Transmit(buffer, 1);
20001896:	f107 030c 	add.w	r3, r7, #12
2000189a:	2101      	movs	r1, #1
2000189c:	4618      	mov	r0, r3
2000189e:	f7ff fea1 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
200018a2:	f7ff fe6b 	bl	2000157c <Flash_UnSelect>

	buffer[0] = W25_B_ERASE64K;
200018a6:	23d8      	movs	r3, #216	; 0xd8
200018a8:	733b      	strb	r3, [r7, #12]
	buffer[1] = (addr >> 16) & 0xFF;
200018aa:	687b      	ldr	r3, [r7, #4]
200018ac:	0c1b      	lsrs	r3, r3, #16
200018ae:	b2db      	uxtb	r3, r3
200018b0:	737b      	strb	r3, [r7, #13]
	buffer[2] = (addr >> 8) & 0xFF;
200018b2:	687b      	ldr	r3, [r7, #4]
200018b4:	0a1b      	lsrs	r3, r3, #8
200018b6:	b2db      	uxtb	r3, r3
200018b8:	73bb      	strb	r3, [r7, #14]
	buffer[3] = addr & 0xFF;
200018ba:	687b      	ldr	r3, [r7, #4]
200018bc:	b2db      	uxtb	r3, r3
200018be:	73fb      	strb	r3, [r7, #15]
	Flash_Select();
200018c0:	f7ff fe48 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 4);
200018c4:	f107 030c 	add.w	r3, r7, #12
200018c8:	2104      	movs	r1, #4
200018ca:	4618      	mov	r0, r3
200018cc:	f7ff fe8a 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
200018d0:	f7ff fe54 	bl	2000157c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
200018d4:	f7ff fe9a 	bl	2000160c <Flash_WaitForWritingComplete>
}
200018d8:	bf00      	nop
200018da:	3710      	adds	r7, #16
200018dc:	46bd      	mov	sp, r7
200018de:	bd80      	pop	{r7, pc}

200018e0 <Flash_ChipErase>:
 * @BRIEF	Full chip erase to 0XFF
 * 			Chip Erase may need up to 100s
 * 			(typ. 20s)
 * 			waiting the writing complete in each page
 *********************************/
void Flash_ChipErase(){
200018e0:	b580      	push	{r7, lr}
200018e2:	b082      	sub	sp, #8
200018e4:	af00      	add	r7, sp, #0
uint8_t buffer[4];
	Flash_Select();
200018e6:	f7ff fe35 	bl	20001554 <Flash_Select>
	buffer[0] = W25_W_ENABLE;
200018ea:	2306      	movs	r3, #6
200018ec:	713b      	strb	r3, [r7, #4]
	Flash_Transmit(buffer, 1);
200018ee:	1d3b      	adds	r3, r7, #4
200018f0:	2101      	movs	r1, #1
200018f2:	4618      	mov	r0, r3
200018f4:	f7ff fe76 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
200018f8:	f7ff fe40 	bl	2000157c <Flash_UnSelect>

	buffer[0] = W25_CH_ERASE;
200018fc:	23c7      	movs	r3, #199	; 0xc7
200018fe:	713b      	strb	r3, [r7, #4]
	Flash_Select();
20001900:	f7ff fe28 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 1);
20001904:	1d3b      	adds	r3, r7, #4
20001906:	2101      	movs	r1, #1
20001908:	4618      	mov	r0, r3
2000190a:	f7ff fe6b 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
2000190e:	f7ff fe35 	bl	2000157c <Flash_UnSelect>
	Flash_WaitForWritingComplete();
20001912:	f7ff fe7b 	bl	2000160c <Flash_WaitForWritingComplete>
}
20001916:	bf00      	nop
20001918:	3708      	adds	r7, #8
2000191a:	46bd      	mov	sp, r7
2000191c:	bd80      	pop	{r7, pc}

2000191e <Flash_PowerDown>:
/**********************************
 * @BRIEF	Initiates a powerdown
 * 			after a powerDown only accepted a porweUp command
 * 			opwerDown operation is 3us long
 *********************************/
void Flash_PowerDown(){
2000191e:	b580      	push	{r7, lr}
20001920:	b082      	sub	sp, #8
20001922:	af00      	add	r7, sp, #0
uint8_t buffer[4];

	buffer[0] = W25_POWERDOWN;
20001924:	23b9      	movs	r3, #185	; 0xb9
20001926:	713b      	strb	r3, [r7, #4]
	Flash_Select();
20001928:	f7ff fe14 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 1);
2000192c:	1d3b      	adds	r3, r7, #4
2000192e:	2101      	movs	r1, #1
20001930:	4618      	mov	r0, r3
20001932:	f7ff fe57 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
20001936:	f7ff fe21 	bl	2000157c <Flash_UnSelect>
}
2000193a:	bf00      	nop
2000193c:	3708      	adds	r7, #8
2000193e:	46bd      	mov	sp, r7
20001940:	bd80      	pop	{r7, pc}

20001942 <Flash_PowerUp>:


/**********************************
 * @BRIEF	Release from powerdown (3 us to restart) or read device ID
 *********************************/
void Flash_PowerUp(){
20001942:	b580      	push	{r7, lr}
20001944:	b082      	sub	sp, #8
20001946:	af00      	add	r7, sp, #0
uint8_t buffer[4];

	buffer[0] = W25_POWERUP_ID;
20001948:	23ab      	movs	r3, #171	; 0xab
2000194a:	713b      	strb	r3, [r7, #4]
	Flash_Select();
2000194c:	f7ff fe02 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 1);
20001950:	1d3b      	adds	r3, r7, #4
20001952:	2101      	movs	r1, #1
20001954:	4618      	mov	r0, r3
20001956:	f7ff fe45 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
2000195a:	f7ff fe0f 	bl	2000157c <Flash_UnSelect>
	HAL_Delay(1);
2000195e:	2001      	movs	r0, #1
20001960:	f7ff f867 	bl	20000a32 <HAL_Delay>
}
20001964:	bf00      	nop
20001966:	3708      	adds	r7, #8
20001968:	46bd      	mov	sp, r7
2000196a:	bd80      	pop	{r7, pc}

2000196c <Flash_ReadDevID>:

/**********************************
 * @BRIEF	read device id from chip
 * @RETURN	device id
 *********************************/
uint8_t Flash_ReadDevID(){
2000196c:	b580      	push	{r7, lr}
2000196e:	b082      	sub	sp, #8
20001970:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data;

	buffer[0] = W25_POWERUP_ID;
20001972:	23ab      	movs	r3, #171	; 0xab
20001974:	713b      	strb	r3, [r7, #4]
	buffer[1] = W25_DUMMY;
20001976:	2300      	movs	r3, #0
20001978:	717b      	strb	r3, [r7, #5]
	buffer[2] = W25_DUMMY;
2000197a:	2300      	movs	r3, #0
2000197c:	71bb      	strb	r3, [r7, #6]
	buffer[3] = W25_DUMMY;
2000197e:	2300      	movs	r3, #0
20001980:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001982:	f7ff fde7 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 4);
20001986:	1d3b      	adds	r3, r7, #4
20001988:	2104      	movs	r1, #4
2000198a:	4618      	mov	r0, r3
2000198c:	f7ff fe2a 	bl	200015e4 <Flash_Transmit>
	Flash_Receive(&data, 1);
20001990:	1cfb      	adds	r3, r7, #3
20001992:	2101      	movs	r1, #1
20001994:	4618      	mov	r0, r3
20001996:	f7ff fdfd 	bl	20001594 <Flash_Receive>
	Flash_UnSelect();
2000199a:	f7ff fdef 	bl	2000157c <Flash_UnSelect>
	return data;
2000199e:	78fb      	ldrb	r3, [r7, #3]
}
200019a0:	4618      	mov	r0, r3
200019a2:	3708      	adds	r7, #8
200019a4:	46bd      	mov	sp, r7
200019a6:	bd80      	pop	{r7, pc}

200019a8 <Flash_ReadManufactutrerAndDevID>:





uint16_t Flash_ReadManufactutrerAndDevID() {
200019a8:	b580      	push	{r7, lr}
200019aa:	b082      	sub	sp, #8
200019ac:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint16_t data;

	buffer[0] = W25_POWERUP_ID;
200019ae:	23ab      	movs	r3, #171	; 0xab
200019b0:	713b      	strb	r3, [r7, #4]
	buffer[1] = W25_DUMMY;
200019b2:	2300      	movs	r3, #0
200019b4:	717b      	strb	r3, [r7, #5]
	buffer[2] = W25_DUMMY;
200019b6:	2300      	movs	r3, #0
200019b8:	71bb      	strb	r3, [r7, #6]
	buffer[3] = W25_DUMMY;
200019ba:	2300      	movs	r3, #0
200019bc:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
200019be:	f7ff fdc9 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 4);
200019c2:	1d3b      	adds	r3, r7, #4
200019c4:	2104      	movs	r1, #4
200019c6:	4618      	mov	r0, r3
200019c8:	f7ff fe0c 	bl	200015e4 <Flash_Transmit>
	Flash_Receive((uint8_t*)&data, 2);
200019cc:	1cbb      	adds	r3, r7, #2
200019ce:	2102      	movs	r1, #2
200019d0:	4618      	mov	r0, r3
200019d2:	f7ff fddf 	bl	20001594 <Flash_Receive>
	Flash_UnSelect();
200019d6:	f7ff fdd1 	bl	2000157c <Flash_UnSelect>
	return data;
200019da:	887b      	ldrh	r3, [r7, #2]
}
200019dc:	4618      	mov	r0, r3
200019de:	3708      	adds	r7, #8
200019e0:	46bd      	mov	sp, r7
200019e2:	bd80      	pop	{r7, pc}

200019e4 <Flash_ReadJedecID>:
 * 			10H ->	 5Mb		11H ->  10Mb		12H ->  20Mb
 * 			13H ->  40Mb		14H ->  80Mb		15H ->  16Mb
 * 			16H ->  32Mb		17H ->  64Mb		18H -> 128Mb
 * 			19H -> 256Mb		20H -> 512Mb		21H ->   1Gb
 ******************************************************************/
uint32_t Flash_ReadJedecID() {
200019e4:	b580      	push	{r7, lr}
200019e6:	b084      	sub	sp, #16
200019e8:	af00      	add	r7, sp, #0
uint8_t buffer[4];
uint8_t data[3];
uint32_t result;

	buffer[0] = W25_JEDEC_ID;
200019ea:	239f      	movs	r3, #159	; 0x9f
200019ec:	723b      	strb	r3, [r7, #8]
	Flash_Select();
200019ee:	f7ff fdb1 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 1);
200019f2:	f107 0308 	add.w	r3, r7, #8
200019f6:	2101      	movs	r1, #1
200019f8:	4618      	mov	r0, r3
200019fa:	f7ff fdf3 	bl	200015e4 <Flash_Transmit>
	Flash_Receive(data, 3);
200019fe:	1d3b      	adds	r3, r7, #4
20001a00:	2103      	movs	r1, #3
20001a02:	4618      	mov	r0, r3
20001a04:	f7ff fdc6 	bl	20001594 <Flash_Receive>
	Flash_UnSelect();
20001a08:	f7ff fdb8 	bl	2000157c <Flash_UnSelect>
	result=((data[0]<<16) | (data[1] <<8) | data[2]);
20001a0c:	793b      	ldrb	r3, [r7, #4]
20001a0e:	041a      	lsls	r2, r3, #16
20001a10:	797b      	ldrb	r3, [r7, #5]
20001a12:	021b      	lsls	r3, r3, #8
20001a14:	4313      	orrs	r3, r2
20001a16:	79ba      	ldrb	r2, [r7, #6]
20001a18:	4313      	orrs	r3, r2
20001a1a:	60fb      	str	r3, [r7, #12]
	return result;
20001a1c:	68fb      	ldr	r3, [r7, #12]
}
20001a1e:	4618      	mov	r0, r3
20001a20:	3710      	adds	r7, #16
20001a22:	46bd      	mov	sp, r7
20001a24:	bd80      	pop	{r7, pc}

20001a26 <Flash_ReadSFDP>:


/*********************************
 * @RETURN	256byte SFDP register content:
 *********************************/
void Flash_ReadSFDP(uint8_t* data) {
20001a26:	b580      	push	{r7, lr}
20001a28:	b084      	sub	sp, #16
20001a2a:	af00      	add	r7, sp, #0
20001a2c:	6078      	str	r0, [r7, #4]
uint8_t buffer[5];
	buffer[0] = W25_R_SFPD_REG;
20001a2e:	235a      	movs	r3, #90	; 0x5a
20001a30:	723b      	strb	r3, [r7, #8]
	for (uint8_t k=1;k<5;k++)
20001a32:	2301      	movs	r3, #1
20001a34:	73fb      	strb	r3, [r7, #15]
20001a36:	e008      	b.n	20001a4a <Flash_ReadSFDP+0x24>
		buffer[k]=0;
20001a38:	7bfb      	ldrb	r3, [r7, #15]
20001a3a:	3310      	adds	r3, #16
20001a3c:	443b      	add	r3, r7
20001a3e:	2200      	movs	r2, #0
20001a40:	f803 2c08 	strb.w	r2, [r3, #-8]
	for (uint8_t k=1;k<5;k++)
20001a44:	7bfb      	ldrb	r3, [r7, #15]
20001a46:	3301      	adds	r3, #1
20001a48:	73fb      	strb	r3, [r7, #15]
20001a4a:	7bfb      	ldrb	r3, [r7, #15]
20001a4c:	2b04      	cmp	r3, #4
20001a4e:	d9f3      	bls.n	20001a38 <Flash_ReadSFDP+0x12>
	Flash_Select();
20001a50:	f7ff fd80 	bl	20001554 <Flash_Select>
	Flash_Transmit(buffer, 5);
20001a54:	f107 0308 	add.w	r3, r7, #8
20001a58:	2105      	movs	r1, #5
20001a5a:	4618      	mov	r0, r3
20001a5c:	f7ff fdc2 	bl	200015e4 <Flash_Transmit>
	Flash_Receive(data, 256);
20001a60:	f44f 7180 	mov.w	r1, #256	; 0x100
20001a64:	6878      	ldr	r0, [r7, #4]
20001a66:	f7ff fd95 	bl	20001594 <Flash_Receive>
	Flash_UnSelect();
20001a6a:	f7ff fd87 	bl	2000157c <Flash_UnSelect>
}
20001a6e:	bf00      	nop
20001a70:	3710      	adds	r7, #16
20001a72:	46bd      	mov	sp, r7
20001a74:	bd80      	pop	{r7, pc}

20001a76 <Flash_TestAvailability>:
 * 			reading SFDP record, it must return
 * 			a string beginning with "SFDP"
 * @RETURN	1 	test passed
 * 			0	no
 *********************************/
uint8_t Flash_TestAvailability() {
20001a76:	b580      	push	{r7, lr}
20001a78:	b0c2      	sub	sp, #264	; 0x108
20001a7a:	af00      	add	r7, sp, #0
uint8_t data[256];
uint8_t test=1;
20001a7c:	2301      	movs	r3, #1
20001a7e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	for (uint8_t k=0;k!=254;k++)
20001a82:	2300      	movs	r3, #0
20001a84:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
20001a88:	e00c      	b.n	20001aa4 <Flash_TestAvailability+0x2e>
		  data[k]=0xFF;
20001a8a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
20001a8e:	f507 7284 	add.w	r2, r7, #264	; 0x108
20001a92:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
20001a96:	21ff      	movs	r1, #255	; 0xff
20001a98:	54d1      	strb	r1, [r2, r3]
	for (uint8_t k=0;k!=254;k++)
20001a9a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
20001a9e:	3301      	adds	r3, #1
20001aa0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
20001aa4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
20001aa8:	2bfe      	cmp	r3, #254	; 0xfe
20001aaa:	d1ee      	bne.n	20001a8a <Flash_TestAvailability+0x14>
	Flash_ReadSFDP(data);
20001aac:	1d3b      	adds	r3, r7, #4
20001aae:	4618      	mov	r0, r3
20001ab0:	f7ff ffb9 	bl	20001a26 <Flash_ReadSFDP>
	if (data[0]!='S')
20001ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001abc:	781b      	ldrb	r3, [r3, #0]
20001abe:	2b53      	cmp	r3, #83	; 0x53
20001ac0:	d002      	beq.n	20001ac8 <Flash_TestAvailability+0x52>
		test=0;
20001ac2:	2300      	movs	r3, #0
20001ac4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[1]!='F')
20001ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001acc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001ad0:	785b      	ldrb	r3, [r3, #1]
20001ad2:	2b46      	cmp	r3, #70	; 0x46
20001ad4:	d002      	beq.n	20001adc <Flash_TestAvailability+0x66>
		test=0;
20001ad6:	2300      	movs	r3, #0
20001ad8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[2]!='D')
20001adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001ae4:	789b      	ldrb	r3, [r3, #2]
20001ae6:	2b44      	cmp	r3, #68	; 0x44
20001ae8:	d002      	beq.n	20001af0 <Flash_TestAvailability+0x7a>
		test=0;
20001aea:	2300      	movs	r3, #0
20001aec:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (data[3]!='P')
20001af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
20001af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
20001af8:	78db      	ldrb	r3, [r3, #3]
20001afa:	2b50      	cmp	r3, #80	; 0x50
20001afc:	d002      	beq.n	20001b04 <Flash_TestAvailability+0x8e>
		test=0;
20001afe:	2300      	movs	r3, #0
20001b00:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	return test;
20001b04:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
20001b08:	4618      	mov	r0, r3
20001b0a:	f507 7784 	add.w	r7, r7, #264	; 0x108
20001b0e:	46bd      	mov	sp, r7
20001b10:	bd80      	pop	{r7, pc}

20001b12 <Flash_Init>:

/******************************************************************
 * @BRIEF	reading manufacutrer and device ID
 * 			checking if connected device is a Winbond Flash
 ******************************************************************/
uint8_t Flash_Init(){
20001b12:	b580      	push	{r7, lr}
20001b14:	b082      	sub	sp, #8
20001b16:	af00      	add	r7, sp, #0
uint32_t JedecID;
	HAL_Delay(6);	// supposing init is called on system startup: 5 ms (tPUW) required after power-up to be fully available
20001b18:	2006      	movs	r0, #6
20001b1a:	f7fe ff8a 	bl	20000a32 <HAL_Delay>
	Flash_Reset();
20001b1e:	f000 f816 	bl	20001b4e <Flash_Reset>
	if (!Flash_TestAvailability())
20001b22:	f7ff ffa8 	bl	20001a76 <Flash_TestAvailability>
20001b26:	4603      	mov	r3, r0
20001b28:	2b00      	cmp	r3, #0
20001b2a:	d101      	bne.n	20001b30 <Flash_Init+0x1e>
		return 0;
20001b2c:	2300      	movs	r3, #0
20001b2e:	e00a      	b.n	20001b46 <Flash_Init+0x34>
	JedecID=Flash_ReadJedecID() ;	//select the memSize byte
20001b30:	f7ff ff58 	bl	200019e4 <Flash_ReadJedecID>
20001b34:	6078      	str	r0, [r7, #4]
	if (((JedecID >> 16) & 0XFF) != 0xEF)  // if ManufacturerID is not Winbond (0xEF)
20001b36:	687b      	ldr	r3, [r7, #4]
20001b38:	0c1b      	lsrs	r3, r3, #16
20001b3a:	b2db      	uxtb	r3, r3
20001b3c:	2bef      	cmp	r3, #239	; 0xef
20001b3e:	d001      	beq.n	20001b44 <Flash_Init+0x32>
		return 0;
20001b40:	2300      	movs	r3, #0
20001b42:	e000      	b.n	20001b46 <Flash_Init+0x34>
	return 1;  //return memSize as per table in Flash_ReadJedecID() definition
20001b44:	2301      	movs	r3, #1
}
20001b46:	4618      	mov	r0, r3
20001b48:	3708      	adds	r7, #8
20001b4a:	46bd      	mov	sp, r7
20001b4c:	bd80      	pop	{r7, pc}

20001b4e <Flash_Reset>:





void Flash_Reset(){
20001b4e:	b580      	push	{r7, lr}
20001b50:	b082      	sub	sp, #8
20001b52:	af00      	add	r7, sp, #0
uint8_t command;
	command = W25_RESET_EN;
20001b54:	2366      	movs	r3, #102	; 0x66
20001b56:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001b58:	f7ff fcfc 	bl	20001554 <Flash_Select>
	Flash_Transmit(&command, 1);
20001b5c:	1dfb      	adds	r3, r7, #7
20001b5e:	2101      	movs	r1, #1
20001b60:	4618      	mov	r0, r3
20001b62:	f7ff fd3f 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
20001b66:	f7ff fd09 	bl	2000157c <Flash_UnSelect>
	command = W25_RESET;
20001b6a:	2399      	movs	r3, #153	; 0x99
20001b6c:	71fb      	strb	r3, [r7, #7]
	Flash_Select();
20001b6e:	f7ff fcf1 	bl	20001554 <Flash_Select>
	Flash_Transmit(&command, 1);
20001b72:	1dfb      	adds	r3, r7, #7
20001b74:	2101      	movs	r1, #1
20001b76:	4618      	mov	r0, r3
20001b78:	f7ff fd34 	bl	200015e4 <Flash_Transmit>
	Flash_UnSelect();
20001b7c:	f7ff fcfe 	bl	2000157c <Flash_UnSelect>
	HAL_Delay(1);	// 30us needed by resetting
20001b80:	2001      	movs	r0, #1
20001b82:	f7fe ff56 	bl	20000a32 <HAL_Delay>
}
20001b86:	bf00      	nop
20001b88:	3708      	adds	r7, #8
20001b8a:	46bd      	mov	sp, r7
20001b8c:	bd80      	pop	{r7, pc}

20001b8e <DataReader_WaitForReceiveDone>:





void DataReader_WaitForReceiveDone(){
20001b8e:	b480      	push	{r7}
20001b90:	af00      	add	r7, sp, #0
// nothing to do, being reading always in polling mode
	return;
20001b92:	bf00      	nop
}
20001b94:	46bd      	mov	sp, r7
20001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b9a:	4770      	bx	lr

20001b9c <DataReader_ReadData>:

void DataReader_ReadData(uint32_t address24, uint8_t* buffer, uint32_t length){
20001b9c:	b580      	push	{r7, lr}
20001b9e:	b084      	sub	sp, #16
20001ba0:	af00      	add	r7, sp, #0
20001ba2:	60f8      	str	r0, [r7, #12]
20001ba4:	60b9      	str	r1, [r7, #8]
20001ba6:	607a      	str	r2, [r7, #4]
	Flash_Read(address24, buffer, length);
20001ba8:	687a      	ldr	r2, [r7, #4]
20001baa:	68b9      	ldr	r1, [r7, #8]
20001bac:	68f8      	ldr	r0, [r7, #12]
20001bae:	f7ff fd49 	bl	20001644 <Flash_Read>
}
20001bb2:	bf00      	nop
20001bb4:	3710      	adds	r7, #16
20001bb6:	46bd      	mov	sp, r7
20001bb8:	bd80      	pop	{r7, pc}

20001bba <DataReader_StartDMAReadData>:


void DataReader_StartDMAReadData(uint32_t address24, uint8_t* buffer, uint32_t length){
20001bba:	b580      	push	{r7, lr}
20001bbc:	b084      	sub	sp, #16
20001bbe:	af00      	add	r7, sp, #0
20001bc0:	60f8      	str	r0, [r7, #12]
20001bc2:	60b9      	str	r1, [r7, #8]
20001bc4:	607a      	str	r2, [r7, #4]
//currently using polling mode even if requested DMA
	Flash_Read(address24, buffer, length);
20001bc6:	687a      	ldr	r2, [r7, #4]
20001bc8:	68b9      	ldr	r1, [r7, #8]
20001bca:	68f8      	ldr	r0, [r7, #12]
20001bcc:	f7ff fd3a 	bl	20001644 <Flash_Read>
}
20001bd0:	bf00      	nop
20001bd2:	3710      	adds	r7, #16
20001bd4:	46bd      	mov	sp, r7
20001bd6:	bd80      	pop	{r7, pc}

20001bd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
20001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 20001c10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
20001bdc:	f7ff fc28 	bl	20001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001be0:	480c      	ldr	r0, [pc, #48]	; (20001c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
20001be2:	490d      	ldr	r1, [pc, #52]	; (20001c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
20001be4:	4a0d      	ldr	r2, [pc, #52]	; (20001c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
20001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001be8:	e002      	b.n	20001bf0 <LoopCopyDataInit>

20001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001bee:	3304      	adds	r3, #4

20001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
20001bf4:	d3f9      	bcc.n	20001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20001bf6:	4a0a      	ldr	r2, [pc, #40]	; (20001c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
20001bf8:	4c0a      	ldr	r4, [pc, #40]	; (20001c24 <LoopFillZerobss+0x22>)
  movs r3, #0
20001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
20001bfc:	e001      	b.n	20001c02 <LoopFillZerobss>

20001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001c00:	3204      	adds	r2, #4

20001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
20001c04:	d3fb      	bcc.n	20001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
20001c06:	f008 f9df 	bl	20009fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
20001c0a:	f7ff f969 	bl	20000ee0 <main>
  bx  lr    
20001c0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
20001c10:	20020004 	.word	0x20020004
  ldr r0, =_sdata
20001c14:	200003a8 	.word	0x200003a8
  ldr r1, =_edata
20001c18:	20000418 	.word	0x20000418
  ldr r2, =_sidata
20001c1c:	200003a8 	.word	0x200003a8
  ldr r2, =_sbss
20001c20:	20000418 	.word	0x20000418
  ldr r4, =_ebss
20001c24:	20000608 	.word	0x20000608

20001c28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
20001c28:	e7fe      	b.n	20001c28 <ADC_IRQHandler>
	...

20001c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20001c2c:	b580      	push	{r7, lr}
20001c2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20001c30:	4b0e      	ldr	r3, [pc, #56]	; (20001c6c <HAL_Init+0x40>)
20001c32:	681b      	ldr	r3, [r3, #0]
20001c34:	4a0d      	ldr	r2, [pc, #52]	; (20001c6c <HAL_Init+0x40>)
20001c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001c3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
20001c3c:	4b0b      	ldr	r3, [pc, #44]	; (20001c6c <HAL_Init+0x40>)
20001c3e:	681b      	ldr	r3, [r3, #0]
20001c40:	4a0a      	ldr	r2, [pc, #40]	; (20001c6c <HAL_Init+0x40>)
20001c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20001c46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
20001c48:	4b08      	ldr	r3, [pc, #32]	; (20001c6c <HAL_Init+0x40>)
20001c4a:	681b      	ldr	r3, [r3, #0]
20001c4c:	4a07      	ldr	r2, [pc, #28]	; (20001c6c <HAL_Init+0x40>)
20001c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20001c54:	2003      	movs	r0, #3
20001c56:	f000 fbc3 	bl	200023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
20001c5a:	200f      	movs	r0, #15
20001c5c:	f7fe fef4 	bl	20000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
20001c60:	f7ff fa54 	bl	2000110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001c64:	2300      	movs	r3, #0
}
20001c66:	4618      	mov	r0, r3
20001c68:	bd80      	pop	{r7, pc}
20001c6a:	bf00      	nop
20001c6c:	40023c00 	.word	0x40023c00

20001c70 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
20001c70:	b580      	push	{r7, lr}
20001c72:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
20001c74:	4b11      	ldr	r3, [pc, #68]	; (20001cbc <HAL_DeInit+0x4c>)
20001c76:	4a12      	ldr	r2, [pc, #72]	; (20001cc0 <HAL_DeInit+0x50>)
20001c78:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
20001c7a:	4b10      	ldr	r3, [pc, #64]	; (20001cbc <HAL_DeInit+0x4c>)
20001c7c:	2200      	movs	r2, #0
20001c7e:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
20001c80:	4b0e      	ldr	r3, [pc, #56]	; (20001cbc <HAL_DeInit+0x4c>)
20001c82:	4a10      	ldr	r2, [pc, #64]	; (20001cc4 <HAL_DeInit+0x54>)
20001c84:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
20001c86:	4b0d      	ldr	r3, [pc, #52]	; (20001cbc <HAL_DeInit+0x4c>)
20001c88:	2200      	movs	r2, #0
20001c8a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
20001c8c:	4b0b      	ldr	r3, [pc, #44]	; (20001cbc <HAL_DeInit+0x4c>)
20001c8e:	4a0e      	ldr	r2, [pc, #56]	; (20001cc8 <HAL_DeInit+0x58>)
20001c90:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
20001c92:	4b0a      	ldr	r3, [pc, #40]	; (20001cbc <HAL_DeInit+0x4c>)
20001c94:	2200      	movs	r2, #0
20001c96:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
20001c98:	4b08      	ldr	r3, [pc, #32]	; (20001cbc <HAL_DeInit+0x4c>)
20001c9a:	2280      	movs	r2, #128	; 0x80
20001c9c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
20001c9e:	4b07      	ldr	r3, [pc, #28]	; (20001cbc <HAL_DeInit+0x4c>)
20001ca0:	2200      	movs	r2, #0
20001ca2:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
20001ca4:	4b05      	ldr	r3, [pc, #20]	; (20001cbc <HAL_DeInit+0x4c>)
20001ca6:	f04f 32ff 	mov.w	r2, #4294967295
20001caa:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
20001cac:	4b03      	ldr	r3, [pc, #12]	; (20001cbc <HAL_DeInit+0x4c>)
20001cae:	2200      	movs	r2, #0
20001cb0:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
20001cb2:	f000 f812 	bl	20001cda <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
20001cb6:	2300      	movs	r3, #0
}
20001cb8:	4618      	mov	r0, r3
20001cba:	bd80      	pop	{r7, pc}
20001cbc:	40023800 	.word	0x40023800
20001cc0:	10e2c80f 	.word	0x10e2c80f
20001cc4:	00177931 	.word	0x00177931
20001cc8:	0060109f 	.word	0x0060109f
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20001ccc:	b480      	push	{r7}
20001cce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
20001cd0:	bf00      	nop
20001cd2:	46bd      	mov	sp, r7
20001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001cd8:	4770      	bx	lr

20001cda <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
20001cda:	b480      	push	{r7}
20001cdc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
20001cde:	bf00      	nop
20001ce0:	46bd      	mov	sp, r7
20001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ce6:	4770      	bx	lr
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001ce8:	b580      	push	{r7, lr}
20001cea:	b082      	sub	sp, #8
20001cec:	af00      	add	r7, sp, #0
20001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001cf0:	4b12      	ldr	r3, [pc, #72]	; (20001d3c <HAL_MspDeInit+0x62>)
20001cf2:	681a      	ldr	r2, [r3, #0]
20001cf4:	4b12      	ldr	r3, [pc, #72]	; (20001d40 <HAL_MspDeInit+0x66>)
20001cf6:	781b      	ldrb	r3, [r3, #0]
20001cf8:	4619      	mov	r1, r3
20001cfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
20001d02:	fbb2 f3f3 	udiv	r3, r2, r3
20001d06:	4618      	mov	r0, r3
20001d08:	f000 fbb1 	bl	2000246e <HAL_SYSTICK_Config>
20001d0c:	4603      	mov	r3, r0
20001d0e:	2b00      	cmp	r3, #0
20001d10:	d001      	beq.n	20001d16 <HAL_MspDeInit+0x3c>
  {
    return HAL_ERROR;
20001d12:	2301      	movs	r3, #1
20001d14:	e00e      	b.n	20001d34 <HAL_MspDeInit+0x5a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001d16:	687b      	ldr	r3, [r7, #4]
20001d18:	2b0f      	cmp	r3, #15
20001d1a:	d80a      	bhi.n	20001d32 <HAL_MspDeInit+0x58>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
20001d1c:	2200      	movs	r2, #0
20001d1e:	6879      	ldr	r1, [r7, #4]
20001d20:	f04f 30ff 	mov.w	r0, #4294967295
20001d24:	f000 fb67 	bl	200023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
20001d28:	4a06      	ldr	r2, [pc, #24]	; (20001d44 <HAL_MspDeInit+0x6a>)
20001d2a:	687b      	ldr	r3, [r7, #4]
20001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
20001d2e:	2300      	movs	r3, #0
20001d30:	e000      	b.n	20001d34 <HAL_MspDeInit+0x5a>
    return HAL_ERROR;
20001d32:	2301      	movs	r3, #1
}
20001d34:	4618      	mov	r0, r3
20001d36:	3708      	adds	r7, #8
20001d38:	46bd      	mov	sp, r7
20001d3a:	bd80      	pop	{r7, pc}
20001d3c:	200003b0 	.word	0x200003b0
20001d40:	200003b8 	.word	0x200003b8
20001d44:	200003b4 	.word	0x200003b4

20001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001d48:	b480      	push	{r7}
20001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
20001d4c:	4b06      	ldr	r3, [pc, #24]	; (20001d68 <HAL_IncTick+0x20>)
20001d4e:	781b      	ldrb	r3, [r3, #0]
20001d50:	461a      	mov	r2, r3
20001d52:	4b06      	ldr	r3, [pc, #24]	; (20001d6c <HAL_IncTick+0x24>)
20001d54:	681b      	ldr	r3, [r3, #0]
20001d56:	4413      	add	r3, r2
20001d58:	4a04      	ldr	r2, [pc, #16]	; (20001d6c <HAL_IncTick+0x24>)
20001d5a:	6013      	str	r3, [r2, #0]
}
20001d5c:	bf00      	nop
20001d5e:	46bd      	mov	sp, r7
20001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d64:	4770      	bx	lr
20001d66:	bf00      	nop
20001d68:	200003b8 	.word	0x200003b8
20001d6c:	20000494 	.word	0x20000494
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001d70:	b480      	push	{r7}
20001d72:	af00      	add	r7, sp, #0
  return uwTick;
20001d74:	4b03      	ldr	r3, [pc, #12]	; (20001d84 <HAL_IncTick+0x3c>)
20001d76:	681b      	ldr	r3, [r3, #0]
}
20001d78:	4618      	mov	r0, r3
20001d7a:	46bd      	mov	sp, r7
20001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d80:	4770      	bx	lr
20001d82:	bf00      	nop
20001d84:	20000494 	.word	0x20000494

20001d88 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
20001d88:	b480      	push	{r7}
20001d8a:	af00      	add	r7, sp, #0
  return uwTickPrio;
20001d8c:	4b03      	ldr	r3, [pc, #12]	; (20001d9c <HAL_GetTickPrio+0x14>)
20001d8e:	681b      	ldr	r3, [r3, #0]
}
20001d90:	4618      	mov	r0, r3
20001d92:	46bd      	mov	sp, r7
20001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d98:	4770      	bx	lr
20001d9a:	bf00      	nop
20001d9c:	200003b4 	.word	0x200003b4

20001da0 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
20001da0:	b580      	push	{r7, lr}
20001da2:	b084      	sub	sp, #16
20001da4:	af00      	add	r7, sp, #0
20001da6:	4603      	mov	r3, r0
20001da8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
20001daa:	2300      	movs	r3, #0
20001dac:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
20001dae:	4b0e      	ldr	r3, [pc, #56]	; (20001de8 <HAL_SetTickFreq+0x48>)
20001db0:	781b      	ldrb	r3, [r3, #0]
20001db2:	79fa      	ldrb	r2, [r7, #7]
20001db4:	429a      	cmp	r2, r3
20001db6:	d012      	beq.n	20001dde <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
20001db8:	4b0b      	ldr	r3, [pc, #44]	; (20001de8 <HAL_SetTickFreq+0x48>)
20001dba:	781b      	ldrb	r3, [r3, #0]
20001dbc:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
20001dbe:	4a0a      	ldr	r2, [pc, #40]	; (20001de8 <HAL_SetTickFreq+0x48>)
20001dc0:	79fb      	ldrb	r3, [r7, #7]
20001dc2:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
20001dc4:	4b09      	ldr	r3, [pc, #36]	; (20001dec <HAL_SetTickFreq+0x4c>)
20001dc6:	681b      	ldr	r3, [r3, #0]
20001dc8:	4618      	mov	r0, r3
20001dca:	f7fe fe3d 	bl	20000a48 <HAL_InitTick>
20001dce:	4603      	mov	r3, r0
20001dd0:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
20001dd2:	7bfb      	ldrb	r3, [r7, #15]
20001dd4:	2b00      	cmp	r3, #0
20001dd6:	d002      	beq.n	20001dde <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
20001dd8:	4a03      	ldr	r2, [pc, #12]	; (20001de8 <HAL_SetTickFreq+0x48>)
20001dda:	7bbb      	ldrb	r3, [r7, #14]
20001ddc:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
20001dde:	7bfb      	ldrb	r3, [r7, #15]
}
20001de0:	4618      	mov	r0, r3
20001de2:	3710      	adds	r7, #16
20001de4:	46bd      	mov	sp, r7
20001de6:	bd80      	pop	{r7, pc}
20001de8:	200003b8 	.word	0x200003b8
20001dec:	200003b4 	.word	0x200003b4

20001df0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
20001df0:	b480      	push	{r7}
20001df2:	af00      	add	r7, sp, #0
  return uwTickFreq;
20001df4:	4b03      	ldr	r3, [pc, #12]	; (20001e04 <HAL_GetTickFreq+0x14>)
20001df6:	781b      	ldrb	r3, [r3, #0]
}
20001df8:	4618      	mov	r0, r3
20001dfa:	46bd      	mov	sp, r7
20001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e00:	4770      	bx	lr
20001e02:	bf00      	nop
20001e04:	200003b8 	.word	0x200003b8
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
20001e08:	b580      	push	{r7, lr}
20001e0a:	b084      	sub	sp, #16
20001e0c:	af00      	add	r7, sp, #0
20001e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
20001e10:	f7fe fe07 	bl	20000a22 <HAL_GetTick>
20001e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
20001e16:	687b      	ldr	r3, [r7, #4]
20001e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
20001e1a:	68fb      	ldr	r3, [r7, #12]
20001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
20001e20:	d005      	beq.n	20001e2e <HAL_GetTickFreq+0x3e>
  {
    wait += (uint32_t)(uwTickFreq);
20001e22:	4b0a      	ldr	r3, [pc, #40]	; (20001e4c <HAL_GetTickFreq+0x5c>)
20001e24:	781b      	ldrb	r3, [r3, #0]
20001e26:	461a      	mov	r2, r3
20001e28:	68fb      	ldr	r3, [r7, #12]
20001e2a:	4413      	add	r3, r2
20001e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
20001e2e:	bf00      	nop
20001e30:	f7fe fdf7 	bl	20000a22 <HAL_GetTick>
20001e34:	4602      	mov	r2, r0
20001e36:	68bb      	ldr	r3, [r7, #8]
20001e38:	1ad3      	subs	r3, r2, r3
20001e3a:	68fa      	ldr	r2, [r7, #12]
20001e3c:	429a      	cmp	r2, r3
20001e3e:	d8f7      	bhi.n	20001e30 <HAL_GetTickFreq+0x40>
  {
  }
}
20001e40:	bf00      	nop
20001e42:	bf00      	nop
20001e44:	3710      	adds	r7, #16
20001e46:	46bd      	mov	sp, r7
20001e48:	bd80      	pop	{r7, pc}
20001e4a:	bf00      	nop
20001e4c:	200003b8 	.word	0x200003b8

20001e50 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
20001e50:	b480      	push	{r7}
20001e52:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
20001e54:	4b05      	ldr	r3, [pc, #20]	; (20001e6c <HAL_SuspendTick+0x1c>)
20001e56:	681b      	ldr	r3, [r3, #0]
20001e58:	4a04      	ldr	r2, [pc, #16]	; (20001e6c <HAL_SuspendTick+0x1c>)
20001e5a:	f023 0302 	bic.w	r3, r3, #2
20001e5e:	6013      	str	r3, [r2, #0]
}
20001e60:	bf00      	nop
20001e62:	46bd      	mov	sp, r7
20001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e68:	4770      	bx	lr
20001e6a:	bf00      	nop
20001e6c:	e000e010 	.word	0xe000e010

20001e70 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
20001e70:	b480      	push	{r7}
20001e72:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
20001e74:	4b05      	ldr	r3, [pc, #20]	; (20001e8c <HAL_ResumeTick+0x1c>)
20001e76:	681b      	ldr	r3, [r3, #0]
20001e78:	4a04      	ldr	r2, [pc, #16]	; (20001e8c <HAL_ResumeTick+0x1c>)
20001e7a:	f043 0302 	orr.w	r3, r3, #2
20001e7e:	6013      	str	r3, [r2, #0]
}
20001e80:	bf00      	nop
20001e82:	46bd      	mov	sp, r7
20001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e88:	4770      	bx	lr
20001e8a:	bf00      	nop
20001e8c:	e000e010 	.word	0xe000e010

20001e90 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
20001e90:	b480      	push	{r7}
20001e92:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
20001e94:	4b02      	ldr	r3, [pc, #8]	; (20001ea0 <HAL_GetHalVersion+0x10>)
}
20001e96:	4618      	mov	r0, r3
20001e98:	46bd      	mov	sp, r7
20001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e9e:	4770      	bx	lr
20001ea0:	01080200 	.word	0x01080200

20001ea4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
20001ea4:	b480      	push	{r7}
20001ea6:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
20001ea8:	4b03      	ldr	r3, [pc, #12]	; (20001eb8 <HAL_GetREVID+0x14>)
20001eaa:	681b      	ldr	r3, [r3, #0]
20001eac:	0c1b      	lsrs	r3, r3, #16
}
20001eae:	4618      	mov	r0, r3
20001eb0:	46bd      	mov	sp, r7
20001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
20001eb6:	4770      	bx	lr
20001eb8:	e0042000 	.word	0xe0042000

20001ebc <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
20001ebc:	b480      	push	{r7}
20001ebe:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
20001ec0:	4b04      	ldr	r3, [pc, #16]	; (20001ed4 <HAL_GetDEVID+0x18>)
20001ec2:	681b      	ldr	r3, [r3, #0]
20001ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
20001ec8:	4618      	mov	r0, r3
20001eca:	46bd      	mov	sp, r7
20001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ed0:	4770      	bx	lr
20001ed2:	bf00      	nop
20001ed4:	e0042000 	.word	0xe0042000

20001ed8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
20001ed8:	b480      	push	{r7}
20001eda:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001edc:	4b05      	ldr	r3, [pc, #20]	; (20001ef4 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001ede:	685b      	ldr	r3, [r3, #4]
20001ee0:	4a04      	ldr	r2, [pc, #16]	; (20001ef4 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001ee2:	f043 0301 	orr.w	r3, r3, #1
20001ee6:	6053      	str	r3, [r2, #4]
}
20001ee8:	bf00      	nop
20001eea:	46bd      	mov	sp, r7
20001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ef0:	4770      	bx	lr
20001ef2:	bf00      	nop
20001ef4:	e0042000 	.word	0xe0042000

20001ef8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
20001ef8:	b480      	push	{r7}
20001efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001efc:	4b05      	ldr	r3, [pc, #20]	; (20001f14 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001efe:	685b      	ldr	r3, [r3, #4]
20001f00:	4a04      	ldr	r2, [pc, #16]	; (20001f14 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001f02:	f023 0301 	bic.w	r3, r3, #1
20001f06:	6053      	str	r3, [r2, #4]
}
20001f08:	bf00      	nop
20001f0a:	46bd      	mov	sp, r7
20001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f10:	4770      	bx	lr
20001f12:	bf00      	nop
20001f14:	e0042000 	.word	0xe0042000

20001f18 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
20001f18:	b480      	push	{r7}
20001f1a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001f1c:	4b05      	ldr	r3, [pc, #20]	; (20001f34 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001f1e:	685b      	ldr	r3, [r3, #4]
20001f20:	4a04      	ldr	r2, [pc, #16]	; (20001f34 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001f22:	f043 0302 	orr.w	r3, r3, #2
20001f26:	6053      	str	r3, [r2, #4]
}
20001f28:	bf00      	nop
20001f2a:	46bd      	mov	sp, r7
20001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f30:	4770      	bx	lr
20001f32:	bf00      	nop
20001f34:	e0042000 	.word	0xe0042000

20001f38 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
20001f38:	b480      	push	{r7}
20001f3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001f3c:	4b05      	ldr	r3, [pc, #20]	; (20001f54 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001f3e:	685b      	ldr	r3, [r3, #4]
20001f40:	4a04      	ldr	r2, [pc, #16]	; (20001f54 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001f42:	f023 0302 	bic.w	r3, r3, #2
20001f46:	6053      	str	r3, [r2, #4]
}
20001f48:	bf00      	nop
20001f4a:	46bd      	mov	sp, r7
20001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f50:	4770      	bx	lr
20001f52:	bf00      	nop
20001f54:	e0042000 	.word	0xe0042000

20001f58 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
20001f58:	b480      	push	{r7}
20001f5a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001f5c:	4b05      	ldr	r3, [pc, #20]	; (20001f74 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001f5e:	685b      	ldr	r3, [r3, #4]
20001f60:	4a04      	ldr	r2, [pc, #16]	; (20001f74 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001f62:	f043 0304 	orr.w	r3, r3, #4
20001f66:	6053      	str	r3, [r2, #4]
}
20001f68:	bf00      	nop
20001f6a:	46bd      	mov	sp, r7
20001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f70:	4770      	bx	lr
20001f72:	bf00      	nop
20001f74:	e0042000 	.word	0xe0042000

20001f78 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
20001f78:	b480      	push	{r7}
20001f7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001f7c:	4b05      	ldr	r3, [pc, #20]	; (20001f94 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001f7e:	685b      	ldr	r3, [r3, #4]
20001f80:	4a04      	ldr	r2, [pc, #16]	; (20001f94 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001f82:	f023 0304 	bic.w	r3, r3, #4
20001f86:	6053      	str	r3, [r2, #4]
}
20001f88:	bf00      	nop
20001f8a:	46bd      	mov	sp, r7
20001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f90:	4770      	bx	lr
20001f92:	bf00      	nop
20001f94:	e0042000 	.word	0xe0042000

20001f98 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
20001f98:	b480      	push	{r7}
20001f9a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
20001f9c:	4b03      	ldr	r3, [pc, #12]	; (20001fac <HAL_EnableCompensationCell+0x14>)
20001f9e:	2201      	movs	r2, #1
20001fa0:	601a      	str	r2, [r3, #0]
}
20001fa2:	bf00      	nop
20001fa4:	46bd      	mov	sp, r7
20001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001faa:	4770      	bx	lr
20001fac:	42270400 	.word	0x42270400

20001fb0 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
20001fb0:	b480      	push	{r7}
20001fb2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
20001fb4:	4b03      	ldr	r3, [pc, #12]	; (20001fc4 <HAL_DisableCompensationCell+0x14>)
20001fb6:	2200      	movs	r2, #0
20001fb8:	601a      	str	r2, [r3, #0]
}
20001fba:	bf00      	nop
20001fbc:	46bd      	mov	sp, r7
20001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fc2:	4770      	bx	lr
20001fc4:	42270400 	.word	0x42270400

20001fc8 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
20001fc8:	b480      	push	{r7}
20001fca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
20001fcc:	4b03      	ldr	r3, [pc, #12]	; (20001fdc <HAL_GetUIDw0+0x14>)
20001fce:	681b      	ldr	r3, [r3, #0]
}
20001fd0:	4618      	mov	r0, r3
20001fd2:	46bd      	mov	sp, r7
20001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001fd8:	4770      	bx	lr
20001fda:	bf00      	nop
20001fdc:	1fff7a10 	.word	0x1fff7a10

20001fe0 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
20001fe0:	b480      	push	{r7}
20001fe2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
20001fe4:	4b03      	ldr	r3, [pc, #12]	; (20001ff4 <HAL_GetUIDw1+0x14>)
20001fe6:	681b      	ldr	r3, [r3, #0]
}
20001fe8:	4618      	mov	r0, r3
20001fea:	46bd      	mov	sp, r7
20001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ff0:	4770      	bx	lr
20001ff2:	bf00      	nop
20001ff4:	1fff7a14 	.word	0x1fff7a14

20001ff8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
20001ff8:	b480      	push	{r7}
20001ffa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
20001ffc:	4b03      	ldr	r3, [pc, #12]	; (2000200c <HAL_GetUIDw2+0x14>)
20001ffe:	681b      	ldr	r3, [r3, #0]
}
20002000:	4618      	mov	r0, r3
20002002:	46bd      	mov	sp, r7
20002004:	f85d 7b04 	ldr.w	r7, [sp], #4
20002008:	4770      	bx	lr
2000200a:	bf00      	nop
2000200c:	1fff7a18 	.word	0x1fff7a18

20002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20002010:	b480      	push	{r7}
20002012:	b085      	sub	sp, #20
20002014:	af00      	add	r7, sp, #0
20002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20002018:	687b      	ldr	r3, [r7, #4]
2000201a:	f003 0307 	and.w	r3, r3, #7
2000201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20002020:	4b0c      	ldr	r3, [pc, #48]	; (20002054 <__NVIC_SetPriorityGrouping+0x44>)
20002022:	68db      	ldr	r3, [r3, #12]
20002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20002026:	68ba      	ldr	r2, [r7, #8]
20002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000202c:	4013      	ands	r3, r2
2000202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20002030:	68fb      	ldr	r3, [r7, #12]
20002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20002034:	68bb      	ldr	r3, [r7, #8]
20002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20002042:	4a04      	ldr	r2, [pc, #16]	; (20002054 <__NVIC_SetPriorityGrouping+0x44>)
20002044:	68bb      	ldr	r3, [r7, #8]
20002046:	60d3      	str	r3, [r2, #12]
}
20002048:	bf00      	nop
2000204a:	3714      	adds	r7, #20
2000204c:	46bd      	mov	sp, r7
2000204e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002052:	4770      	bx	lr
20002054:	e000ed00 	.word	0xe000ed00

20002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20002058:	b480      	push	{r7}
2000205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000205c:	4b04      	ldr	r3, [pc, #16]	; (20002070 <__NVIC_GetPriorityGrouping+0x18>)
2000205e:	68db      	ldr	r3, [r3, #12]
20002060:	0a1b      	lsrs	r3, r3, #8
20002062:	f003 0307 	and.w	r3, r3, #7
}
20002066:	4618      	mov	r0, r3
20002068:	46bd      	mov	sp, r7
2000206a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000206e:	4770      	bx	lr
20002070:	e000ed00 	.word	0xe000ed00

20002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20002074:	b480      	push	{r7}
20002076:	b083      	sub	sp, #12
20002078:	af00      	add	r7, sp, #0
2000207a:	4603      	mov	r3, r0
2000207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002082:	2b00      	cmp	r3, #0
20002084:	db0b      	blt.n	2000209e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20002086:	79fb      	ldrb	r3, [r7, #7]
20002088:	f003 021f 	and.w	r2, r3, #31
2000208c:	4907      	ldr	r1, [pc, #28]	; (200020ac <__NVIC_EnableIRQ+0x38>)
2000208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002092:	095b      	lsrs	r3, r3, #5
20002094:	2001      	movs	r0, #1
20002096:	fa00 f202 	lsl.w	r2, r0, r2
2000209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
2000209e:	bf00      	nop
200020a0:	370c      	adds	r7, #12
200020a2:	46bd      	mov	sp, r7
200020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
200020a8:	4770      	bx	lr
200020aa:	bf00      	nop
200020ac:	e000e100 	.word	0xe000e100

200020b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
200020b0:	b480      	push	{r7}
200020b2:	b083      	sub	sp, #12
200020b4:	af00      	add	r7, sp, #0
200020b6:	4603      	mov	r3, r0
200020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020be:	2b00      	cmp	r3, #0
200020c0:	db12      	blt.n	200020e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
200020c2:	79fb      	ldrb	r3, [r7, #7]
200020c4:	f003 021f 	and.w	r2, r3, #31
200020c8:	490a      	ldr	r1, [pc, #40]	; (200020f4 <__NVIC_DisableIRQ+0x44>)
200020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
200020ce:	095b      	lsrs	r3, r3, #5
200020d0:	2001      	movs	r0, #1
200020d2:	fa00 f202 	lsl.w	r2, r0, r2
200020d6:	3320      	adds	r3, #32
200020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
200020dc:	f3bf 8f4f 	dsb	sy
}
200020e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
200020e2:	f3bf 8f6f 	isb	sy
}
200020e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
200020e8:	bf00      	nop
200020ea:	370c      	adds	r7, #12
200020ec:	46bd      	mov	sp, r7
200020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200020f2:	4770      	bx	lr
200020f4:	e000e100 	.word	0xe000e100

200020f8 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
200020f8:	b480      	push	{r7}
200020fa:	b083      	sub	sp, #12
200020fc:	af00      	add	r7, sp, #0
200020fe:	4603      	mov	r3, r0
20002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002106:	2b00      	cmp	r3, #0
20002108:	db0e      	blt.n	20002128 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
2000210a:	4a0b      	ldr	r2, [pc, #44]	; (20002138 <__NVIC_GetPendingIRQ+0x40>)
2000210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002110:	095b      	lsrs	r3, r3, #5
20002112:	3340      	adds	r3, #64	; 0x40
20002114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20002118:	79fb      	ldrb	r3, [r7, #7]
2000211a:	f003 031f 	and.w	r3, r3, #31
2000211e:	fa22 f303 	lsr.w	r3, r2, r3
20002122:	f003 0301 	and.w	r3, r3, #1
20002126:	e000      	b.n	2000212a <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
20002128:	2300      	movs	r3, #0
  }
}
2000212a:	4618      	mov	r0, r3
2000212c:	370c      	adds	r7, #12
2000212e:	46bd      	mov	sp, r7
20002130:	f85d 7b04 	ldr.w	r7, [sp], #4
20002134:	4770      	bx	lr
20002136:	bf00      	nop
20002138:	e000e100 	.word	0xe000e100

2000213c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
2000213c:	b480      	push	{r7}
2000213e:	b083      	sub	sp, #12
20002140:	af00      	add	r7, sp, #0
20002142:	4603      	mov	r3, r0
20002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000214a:	2b00      	cmp	r3, #0
2000214c:	db0c      	blt.n	20002168 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000214e:	79fb      	ldrb	r3, [r7, #7]
20002150:	f003 021f 	and.w	r2, r3, #31
20002154:	4907      	ldr	r1, [pc, #28]	; (20002174 <__NVIC_SetPendingIRQ+0x38>)
20002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000215a:	095b      	lsrs	r3, r3, #5
2000215c:	2001      	movs	r0, #1
2000215e:	fa00 f202 	lsl.w	r2, r0, r2
20002162:	3340      	adds	r3, #64	; 0x40
20002164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20002168:	bf00      	nop
2000216a:	370c      	adds	r7, #12
2000216c:	46bd      	mov	sp, r7
2000216e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002172:	4770      	bx	lr
20002174:	e000e100 	.word	0xe000e100

20002178 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002178:	b480      	push	{r7}
2000217a:	b083      	sub	sp, #12
2000217c:	af00      	add	r7, sp, #0
2000217e:	4603      	mov	r3, r0
20002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002186:	2b00      	cmp	r3, #0
20002188:	db0c      	blt.n	200021a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000218a:	79fb      	ldrb	r3, [r7, #7]
2000218c:	f003 021f 	and.w	r2, r3, #31
20002190:	4907      	ldr	r1, [pc, #28]	; (200021b0 <__NVIC_ClearPendingIRQ+0x38>)
20002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002196:	095b      	lsrs	r3, r3, #5
20002198:	2001      	movs	r0, #1
2000219a:	fa00 f202 	lsl.w	r2, r0, r2
2000219e:	3360      	adds	r3, #96	; 0x60
200021a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
200021a4:	bf00      	nop
200021a6:	370c      	adds	r7, #12
200021a8:	46bd      	mov	sp, r7
200021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200021ae:	4770      	bx	lr
200021b0:	e000e100 	.word	0xe000e100

200021b4 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
200021b4:	b480      	push	{r7}
200021b6:	b083      	sub	sp, #12
200021b8:	af00      	add	r7, sp, #0
200021ba:	4603      	mov	r3, r0
200021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
200021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021c2:	2b00      	cmp	r3, #0
200021c4:	db0e      	blt.n	200021e4 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
200021c6:	4a0b      	ldr	r2, [pc, #44]	; (200021f4 <__NVIC_GetActive+0x40>)
200021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021cc:	095b      	lsrs	r3, r3, #5
200021ce:	3380      	adds	r3, #128	; 0x80
200021d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
200021d4:	79fb      	ldrb	r3, [r7, #7]
200021d6:	f003 031f 	and.w	r3, r3, #31
200021da:	fa22 f303 	lsr.w	r3, r2, r3
200021de:	f003 0301 	and.w	r3, r3, #1
200021e2:	e000      	b.n	200021e6 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
200021e4:	2300      	movs	r3, #0
  }
}
200021e6:	4618      	mov	r0, r3
200021e8:	370c      	adds	r7, #12
200021ea:	46bd      	mov	sp, r7
200021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200021f0:	4770      	bx	lr
200021f2:	bf00      	nop
200021f4:	e000e100 	.word	0xe000e100

200021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200021f8:	b480      	push	{r7}
200021fa:	b083      	sub	sp, #12
200021fc:	af00      	add	r7, sp, #0
200021fe:	4603      	mov	r3, r0
20002200:	6039      	str	r1, [r7, #0]
20002202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002208:	2b00      	cmp	r3, #0
2000220a:	db0a      	blt.n	20002222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000220c:	683b      	ldr	r3, [r7, #0]
2000220e:	b2da      	uxtb	r2, r3
20002210:	490c      	ldr	r1, [pc, #48]	; (20002244 <__NVIC_SetPriority+0x4c>)
20002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002216:	0112      	lsls	r2, r2, #4
20002218:	b2d2      	uxtb	r2, r2
2000221a:	440b      	add	r3, r1
2000221c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20002220:	e00a      	b.n	20002238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20002222:	683b      	ldr	r3, [r7, #0]
20002224:	b2da      	uxtb	r2, r3
20002226:	4908      	ldr	r1, [pc, #32]	; (20002248 <__NVIC_SetPriority+0x50>)
20002228:	79fb      	ldrb	r3, [r7, #7]
2000222a:	f003 030f 	and.w	r3, r3, #15
2000222e:	3b04      	subs	r3, #4
20002230:	0112      	lsls	r2, r2, #4
20002232:	b2d2      	uxtb	r2, r2
20002234:	440b      	add	r3, r1
20002236:	761a      	strb	r2, [r3, #24]
}
20002238:	bf00      	nop
2000223a:	370c      	adds	r7, #12
2000223c:	46bd      	mov	sp, r7
2000223e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002242:	4770      	bx	lr
20002244:	e000e100 	.word	0xe000e100
20002248:	e000ed00 	.word	0xe000ed00

2000224c <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
2000224c:	b480      	push	{r7}
2000224e:	b083      	sub	sp, #12
20002250:	af00      	add	r7, sp, #0
20002252:	4603      	mov	r3, r0
20002254:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
20002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000225a:	2b00      	cmp	r3, #0
2000225c:	db09      	blt.n	20002272 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
2000225e:	4a0d      	ldr	r2, [pc, #52]	; (20002294 <__NVIC_GetPriority+0x48>)
20002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002264:	4413      	add	r3, r2
20002266:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
2000226a:	b2db      	uxtb	r3, r3
2000226c:	091b      	lsrs	r3, r3, #4
2000226e:	b2db      	uxtb	r3, r3
20002270:	e009      	b.n	20002286 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
20002272:	4a09      	ldr	r2, [pc, #36]	; (20002298 <__NVIC_GetPriority+0x4c>)
20002274:	79fb      	ldrb	r3, [r7, #7]
20002276:	f003 030f 	and.w	r3, r3, #15
2000227a:	3b04      	subs	r3, #4
2000227c:	4413      	add	r3, r2
2000227e:	7e1b      	ldrb	r3, [r3, #24]
20002280:	b2db      	uxtb	r3, r3
20002282:	091b      	lsrs	r3, r3, #4
20002284:	b2db      	uxtb	r3, r3
  }
}
20002286:	4618      	mov	r0, r3
20002288:	370c      	adds	r7, #12
2000228a:	46bd      	mov	sp, r7
2000228c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002290:	4770      	bx	lr
20002292:	bf00      	nop
20002294:	e000e100 	.word	0xe000e100
20002298:	e000ed00 	.word	0xe000ed00

2000229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000229c:	b480      	push	{r7}
2000229e:	b089      	sub	sp, #36	; 0x24
200022a0:	af00      	add	r7, sp, #0
200022a2:	60f8      	str	r0, [r7, #12]
200022a4:	60b9      	str	r1, [r7, #8]
200022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
200022a8:	68fb      	ldr	r3, [r7, #12]
200022aa:	f003 0307 	and.w	r3, r3, #7
200022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
200022b0:	69fb      	ldr	r3, [r7, #28]
200022b2:	f1c3 0307 	rsb	r3, r3, #7
200022b6:	2b04      	cmp	r3, #4
200022b8:	bf28      	it	cs
200022ba:	2304      	movcs	r3, #4
200022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
200022be:	69fb      	ldr	r3, [r7, #28]
200022c0:	3304      	adds	r3, #4
200022c2:	2b06      	cmp	r3, #6
200022c4:	d902      	bls.n	200022cc <NVIC_EncodePriority+0x30>
200022c6:	69fb      	ldr	r3, [r7, #28]
200022c8:	3b03      	subs	r3, #3
200022ca:	e000      	b.n	200022ce <NVIC_EncodePriority+0x32>
200022cc:	2300      	movs	r3, #0
200022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200022d0:	f04f 32ff 	mov.w	r2, #4294967295
200022d4:	69bb      	ldr	r3, [r7, #24]
200022d6:	fa02 f303 	lsl.w	r3, r2, r3
200022da:	43da      	mvns	r2, r3
200022dc:	68bb      	ldr	r3, [r7, #8]
200022de:	401a      	ands	r2, r3
200022e0:	697b      	ldr	r3, [r7, #20]
200022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
200022e4:	f04f 31ff 	mov.w	r1, #4294967295
200022e8:	697b      	ldr	r3, [r7, #20]
200022ea:	fa01 f303 	lsl.w	r3, r1, r3
200022ee:	43d9      	mvns	r1, r3
200022f0:	687b      	ldr	r3, [r7, #4]
200022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200022f4:	4313      	orrs	r3, r2
         );
}
200022f6:	4618      	mov	r0, r3
200022f8:	3724      	adds	r7, #36	; 0x24
200022fa:	46bd      	mov	sp, r7
200022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20002300:	4770      	bx	lr

20002302 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
20002302:	b480      	push	{r7}
20002304:	b089      	sub	sp, #36	; 0x24
20002306:	af00      	add	r7, sp, #0
20002308:	60f8      	str	r0, [r7, #12]
2000230a:	60b9      	str	r1, [r7, #8]
2000230c:	607a      	str	r2, [r7, #4]
2000230e:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20002310:	68bb      	ldr	r3, [r7, #8]
20002312:	f003 0307 	and.w	r3, r3, #7
20002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20002318:	69fb      	ldr	r3, [r7, #28]
2000231a:	f1c3 0307 	rsb	r3, r3, #7
2000231e:	2b04      	cmp	r3, #4
20002320:	bf28      	it	cs
20002322:	2304      	movcs	r3, #4
20002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20002326:	69fb      	ldr	r3, [r7, #28]
20002328:	3304      	adds	r3, #4
2000232a:	2b06      	cmp	r3, #6
2000232c:	d902      	bls.n	20002334 <NVIC_DecodePriority+0x32>
2000232e:	69fb      	ldr	r3, [r7, #28]
20002330:	3b03      	subs	r3, #3
20002332:	e000      	b.n	20002336 <NVIC_DecodePriority+0x34>
20002334:	2300      	movs	r3, #0
20002336:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
20002338:	68fa      	ldr	r2, [r7, #12]
2000233a:	697b      	ldr	r3, [r7, #20]
2000233c:	40da      	lsrs	r2, r3
2000233e:	f04f 31ff 	mov.w	r1, #4294967295
20002342:	69bb      	ldr	r3, [r7, #24]
20002344:	fa01 f303 	lsl.w	r3, r1, r3
20002348:	43db      	mvns	r3, r3
2000234a:	401a      	ands	r2, r3
2000234c:	687b      	ldr	r3, [r7, #4]
2000234e:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
20002350:	f04f 32ff 	mov.w	r2, #4294967295
20002354:	697b      	ldr	r3, [r7, #20]
20002356:	fa02 f303 	lsl.w	r3, r2, r3
2000235a:	43da      	mvns	r2, r3
2000235c:	68fb      	ldr	r3, [r7, #12]
2000235e:	401a      	ands	r2, r3
20002360:	683b      	ldr	r3, [r7, #0]
20002362:	601a      	str	r2, [r3, #0]
}
20002364:	bf00      	nop
20002366:	3724      	adds	r7, #36	; 0x24
20002368:	46bd      	mov	sp, r7
2000236a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000236e:	4770      	bx	lr

20002370 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
20002370:	b480      	push	{r7}
20002372:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
20002374:	f3bf 8f4f 	dsb	sy
}
20002378:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
2000237a:	4b06      	ldr	r3, [pc, #24]	; (20002394 <__NVIC_SystemReset+0x24>)
2000237c:	68db      	ldr	r3, [r3, #12]
2000237e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20002382:	4904      	ldr	r1, [pc, #16]	; (20002394 <__NVIC_SystemReset+0x24>)
20002384:	4b04      	ldr	r3, [pc, #16]	; (20002398 <__NVIC_SystemReset+0x28>)
20002386:	4313      	orrs	r3, r2
20002388:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
2000238a:	f3bf 8f4f 	dsb	sy
}
2000238e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
20002390:	bf00      	nop
20002392:	e7fd      	b.n	20002390 <__NVIC_SystemReset+0x20>
20002394:	e000ed00 	.word	0xe000ed00
20002398:	05fa0004 	.word	0x05fa0004

2000239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000239c:	b580      	push	{r7, lr}
2000239e:	b082      	sub	sp, #8
200023a0:	af00      	add	r7, sp, #0
200023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200023a4:	687b      	ldr	r3, [r7, #4]
200023a6:	3b01      	subs	r3, #1
200023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200023ac:	d301      	bcc.n	200023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200023ae:	2301      	movs	r3, #1
200023b0:	e00f      	b.n	200023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200023b2:	4a0a      	ldr	r2, [pc, #40]	; (200023dc <SysTick_Config+0x40>)
200023b4:	687b      	ldr	r3, [r7, #4]
200023b6:	3b01      	subs	r3, #1
200023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200023ba:	210f      	movs	r1, #15
200023bc:	f04f 30ff 	mov.w	r0, #4294967295
200023c0:	f7ff ff1a 	bl	200021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200023c4:	4b05      	ldr	r3, [pc, #20]	; (200023dc <SysTick_Config+0x40>)
200023c6:	2200      	movs	r2, #0
200023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200023ca:	4b04      	ldr	r3, [pc, #16]	; (200023dc <SysTick_Config+0x40>)
200023cc:	2207      	movs	r2, #7
200023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200023d0:	2300      	movs	r3, #0
}
200023d2:	4618      	mov	r0, r3
200023d4:	3708      	adds	r7, #8
200023d6:	46bd      	mov	sp, r7
200023d8:	bd80      	pop	{r7, pc}
200023da:	bf00      	nop
200023dc:	e000e010 	.word	0xe000e010

200023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200023e0:	b580      	push	{r7, lr}
200023e2:	b082      	sub	sp, #8
200023e4:	af00      	add	r7, sp, #0
200023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
200023e8:	6878      	ldr	r0, [r7, #4]
200023ea:	f7ff fe11 	bl	20002010 <__NVIC_SetPriorityGrouping>
}
200023ee:	bf00      	nop
200023f0:	3708      	adds	r7, #8
200023f2:	46bd      	mov	sp, r7
200023f4:	bd80      	pop	{r7, pc}

200023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
200023f6:	b580      	push	{r7, lr}
200023f8:	b086      	sub	sp, #24
200023fa:	af00      	add	r7, sp, #0
200023fc:	4603      	mov	r3, r0
200023fe:	60b9      	str	r1, [r7, #8]
20002400:	607a      	str	r2, [r7, #4]
20002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
20002404:	2300      	movs	r3, #0
20002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20002408:	f7ff fe26 	bl	20002058 <__NVIC_GetPriorityGrouping>
2000240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000240e:	687a      	ldr	r2, [r7, #4]
20002410:	68b9      	ldr	r1, [r7, #8]
20002412:	6978      	ldr	r0, [r7, #20]
20002414:	f7ff ff42 	bl	2000229c <NVIC_EncodePriority>
20002418:	4602      	mov	r2, r0
2000241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000241e:	4611      	mov	r1, r2
20002420:	4618      	mov	r0, r3
20002422:	f7ff fee9 	bl	200021f8 <__NVIC_SetPriority>
}
20002426:	bf00      	nop
20002428:	3718      	adds	r7, #24
2000242a:	46bd      	mov	sp, r7
2000242c:	bd80      	pop	{r7, pc}

2000242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
2000242e:	b580      	push	{r7, lr}
20002430:	b082      	sub	sp, #8
20002432:	af00      	add	r7, sp, #0
20002434:	4603      	mov	r3, r0
20002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000243c:	4618      	mov	r0, r3
2000243e:	f7ff fe19 	bl	20002074 <__NVIC_EnableIRQ>
}
20002442:	bf00      	nop
20002444:	3708      	adds	r7, #8
20002446:	46bd      	mov	sp, r7
20002448:	bd80      	pop	{r7, pc}

2000244a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
2000244a:	b580      	push	{r7, lr}
2000244c:	b082      	sub	sp, #8
2000244e:	af00      	add	r7, sp, #0
20002450:	4603      	mov	r3, r0
20002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
20002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002458:	4618      	mov	r0, r3
2000245a:	f7ff fe29 	bl	200020b0 <__NVIC_DisableIRQ>
}
2000245e:	bf00      	nop
20002460:	3708      	adds	r7, #8
20002462:	46bd      	mov	sp, r7
20002464:	bd80      	pop	{r7, pc}

20002466 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
20002466:	b580      	push	{r7, lr}
20002468:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
2000246a:	f7ff ff81 	bl	20002370 <__NVIC_SystemReset>

2000246e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000246e:	b580      	push	{r7, lr}
20002470:	b082      	sub	sp, #8
20002472:	af00      	add	r7, sp, #0
20002474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
20002476:	6878      	ldr	r0, [r7, #4]
20002478:	f7ff ff90 	bl	2000239c <SysTick_Config>
2000247c:	4603      	mov	r3, r0
}
2000247e:	4618      	mov	r0, r3
20002480:	3708      	adds	r7, #8
20002482:	46bd      	mov	sp, r7
20002484:	bd80      	pop	{r7, pc}
	...

20002488 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
20002488:	b480      	push	{r7}
2000248a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
2000248c:	f3bf 8f5f 	dmb	sy
}
20002490:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
20002492:	4b07      	ldr	r3, [pc, #28]	; (200024b0 <HAL_MPU_Disable+0x28>)
20002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002496:	4a06      	ldr	r2, [pc, #24]	; (200024b0 <HAL_MPU_Disable+0x28>)
20002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000249c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
2000249e:	4b05      	ldr	r3, [pc, #20]	; (200024b4 <HAL_MPU_Disable+0x2c>)
200024a0:	2200      	movs	r2, #0
200024a2:	605a      	str	r2, [r3, #4]
}
200024a4:	bf00      	nop
200024a6:	46bd      	mov	sp, r7
200024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200024ac:	4770      	bx	lr
200024ae:	bf00      	nop
200024b0:	e000ed00 	.word	0xe000ed00
200024b4:	e000ed90 	.word	0xe000ed90

200024b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
200024b8:	b480      	push	{r7}
200024ba:	b083      	sub	sp, #12
200024bc:	af00      	add	r7, sp, #0
200024be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
200024c0:	4a0b      	ldr	r2, [pc, #44]	; (200024f0 <HAL_MPU_Enable+0x38>)
200024c2:	687b      	ldr	r3, [r7, #4]
200024c4:	f043 0301 	orr.w	r3, r3, #1
200024c8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
200024ca:	4b0a      	ldr	r3, [pc, #40]	; (200024f4 <HAL_MPU_Enable+0x3c>)
200024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200024ce:	4a09      	ldr	r2, [pc, #36]	; (200024f4 <HAL_MPU_Enable+0x3c>)
200024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200024d4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
200024d6:	f3bf 8f4f 	dsb	sy
}
200024da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
200024dc:	f3bf 8f6f 	isb	sy
}
200024e0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
200024e2:	bf00      	nop
200024e4:	370c      	adds	r7, #12
200024e6:	46bd      	mov	sp, r7
200024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200024ec:	4770      	bx	lr
200024ee:	bf00      	nop
200024f0:	e000ed90 	.word	0xe000ed90
200024f4:	e000ed00 	.word	0xe000ed00

200024f8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
200024f8:	b480      	push	{r7}
200024fa:	b083      	sub	sp, #12
200024fc:	af00      	add	r7, sp, #0
200024fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
20002500:	687b      	ldr	r3, [r7, #4]
20002502:	785a      	ldrb	r2, [r3, #1]
20002504:	4b1d      	ldr	r3, [pc, #116]	; (2000257c <HAL_MPU_ConfigRegion+0x84>)
20002506:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
20002508:	687b      	ldr	r3, [r7, #4]
2000250a:	781b      	ldrb	r3, [r3, #0]
2000250c:	2b00      	cmp	r3, #0
2000250e:	d029      	beq.n	20002564 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
20002510:	4a1a      	ldr	r2, [pc, #104]	; (2000257c <HAL_MPU_ConfigRegion+0x84>)
20002512:	687b      	ldr	r3, [r7, #4]
20002514:	685b      	ldr	r3, [r3, #4]
20002516:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20002518:	687b      	ldr	r3, [r7, #4]
2000251a:	7b1b      	ldrb	r3, [r3, #12]
2000251c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
2000251e:	687b      	ldr	r3, [r7, #4]
20002520:	7adb      	ldrb	r3, [r3, #11]
20002522:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20002524:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
20002526:	687b      	ldr	r3, [r7, #4]
20002528:	7a9b      	ldrb	r3, [r3, #10]
2000252a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
2000252c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
2000252e:	687b      	ldr	r3, [r7, #4]
20002530:	7b5b      	ldrb	r3, [r3, #13]
20002532:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
20002534:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
20002536:	687b      	ldr	r3, [r7, #4]
20002538:	7b9b      	ldrb	r3, [r3, #14]
2000253a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
2000253c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
2000253e:	687b      	ldr	r3, [r7, #4]
20002540:	7bdb      	ldrb	r3, [r3, #15]
20002542:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
20002544:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
20002546:	687b      	ldr	r3, [r7, #4]
20002548:	7a5b      	ldrb	r3, [r3, #9]
2000254a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
2000254c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2000254e:	687b      	ldr	r3, [r7, #4]
20002550:	7a1b      	ldrb	r3, [r3, #8]
20002552:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
20002554:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
20002556:	687a      	ldr	r2, [r7, #4]
20002558:	7812      	ldrb	r2, [r2, #0]
2000255a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
2000255c:	4a07      	ldr	r2, [pc, #28]	; (2000257c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
2000255e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
20002560:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
20002562:	e005      	b.n	20002570 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
20002564:	4b05      	ldr	r3, [pc, #20]	; (2000257c <HAL_MPU_ConfigRegion+0x84>)
20002566:	2200      	movs	r2, #0
20002568:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
2000256a:	4b04      	ldr	r3, [pc, #16]	; (2000257c <HAL_MPU_ConfigRegion+0x84>)
2000256c:	2200      	movs	r2, #0
2000256e:	611a      	str	r2, [r3, #16]
}
20002570:	bf00      	nop
20002572:	370c      	adds	r7, #12
20002574:	46bd      	mov	sp, r7
20002576:	f85d 7b04 	ldr.w	r7, [sp], #4
2000257a:	4770      	bx	lr
2000257c:	e000ed90 	.word	0xe000ed90

20002580 <HAL_CORTEX_ClearEvent>:
/**
  * @brief  Clear pending events.
  * @retval None
  */
void HAL_CORTEX_ClearEvent(void)
{
20002580:	b480      	push	{r7}
20002582:	af00      	add	r7, sp, #0
  __SEV();
20002584:	bf40      	sev
  __WFE();
20002586:	bf20      	wfe
}
20002588:	bf00      	nop
2000258a:	46bd      	mov	sp, r7
2000258c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002590:	4770      	bx	lr

20002592 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
20002592:	b580      	push	{r7, lr}
20002594:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
20002596:	f7ff fd5f 	bl	20002058 <__NVIC_GetPriorityGrouping>
2000259a:	4603      	mov	r3, r0
}
2000259c:	4618      	mov	r0, r3
2000259e:	bd80      	pop	{r7, pc}

200025a0 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
200025a0:	b580      	push	{r7, lr}
200025a2:	b084      	sub	sp, #16
200025a4:	af00      	add	r7, sp, #0
200025a6:	60b9      	str	r1, [r7, #8]
200025a8:	607a      	str	r2, [r7, #4]
200025aa:	603b      	str	r3, [r7, #0]
200025ac:	4603      	mov	r3, r0
200025ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
200025b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
200025b4:	4618      	mov	r0, r3
200025b6:	f7ff fe49 	bl	2000224c <__NVIC_GetPriority>
200025ba:	683b      	ldr	r3, [r7, #0]
200025bc:	687a      	ldr	r2, [r7, #4]
200025be:	68b9      	ldr	r1, [r7, #8]
200025c0:	f7ff fe9f 	bl	20002302 <NVIC_DecodePriority>
}
200025c4:	bf00      	nop
200025c6:	3710      	adds	r7, #16
200025c8:	46bd      	mov	sp, r7
200025ca:	bd80      	pop	{r7, pc}

200025cc <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
200025cc:	b580      	push	{r7, lr}
200025ce:	b082      	sub	sp, #8
200025d0:	af00      	add	r7, sp, #0
200025d2:	4603      	mov	r3, r0
200025d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
200025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
200025da:	4618      	mov	r0, r3
200025dc:	f7ff fdae 	bl	2000213c <__NVIC_SetPendingIRQ>
}
200025e0:	bf00      	nop
200025e2:	3708      	adds	r7, #8
200025e4:	46bd      	mov	sp, r7
200025e6:	bd80      	pop	{r7, pc}

200025e8 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
200025e8:	b580      	push	{r7, lr}
200025ea:	b082      	sub	sp, #8
200025ec:	af00      	add	r7, sp, #0
200025ee:	4603      	mov	r3, r0
200025f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
200025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200025f6:	4618      	mov	r0, r3
200025f8:	f7ff fd7e 	bl	200020f8 <__NVIC_GetPendingIRQ>
200025fc:	4603      	mov	r3, r0
}
200025fe:	4618      	mov	r0, r3
20002600:	3708      	adds	r7, #8
20002602:	46bd      	mov	sp, r7
20002604:	bd80      	pop	{r7, pc}

20002606 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20002606:	b580      	push	{r7, lr}
20002608:	b082      	sub	sp, #8
2000260a:	af00      	add	r7, sp, #0
2000260c:	4603      	mov	r3, r0
2000260e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
20002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002614:	4618      	mov	r0, r3
20002616:	f7ff fdaf 	bl	20002178 <__NVIC_ClearPendingIRQ>
}
2000261a:	bf00      	nop
2000261c:	3708      	adds	r7, #8
2000261e:	46bd      	mov	sp, r7
20002620:	bd80      	pop	{r7, pc}

20002622 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
20002622:	b580      	push	{r7, lr}
20002624:	b082      	sub	sp, #8
20002626:	af00      	add	r7, sp, #0
20002628:	4603      	mov	r3, r0
2000262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
2000262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002630:	4618      	mov	r0, r3
20002632:	f7ff fdbf 	bl	200021b4 <__NVIC_GetActive>
20002636:	4603      	mov	r3, r0
}
20002638:	4618      	mov	r0, r3
2000263a:	3708      	adds	r7, #8
2000263c:	46bd      	mov	sp, r7
2000263e:	bd80      	pop	{r7, pc}

20002640 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
20002640:	b480      	push	{r7}
20002642:	b083      	sub	sp, #12
20002644:	af00      	add	r7, sp, #0
20002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
20002648:	687b      	ldr	r3, [r7, #4]
2000264a:	2b04      	cmp	r3, #4
2000264c:	d106      	bne.n	2000265c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
2000264e:	4b09      	ldr	r3, [pc, #36]	; (20002674 <HAL_SYSTICK_CLKSourceConfig+0x34>)
20002650:	681b      	ldr	r3, [r3, #0]
20002652:	4a08      	ldr	r2, [pc, #32]	; (20002674 <HAL_SYSTICK_CLKSourceConfig+0x34>)
20002654:	f043 0304 	orr.w	r3, r3, #4
20002658:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
2000265a:	e005      	b.n	20002668 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
2000265c:	4b05      	ldr	r3, [pc, #20]	; (20002674 <HAL_SYSTICK_CLKSourceConfig+0x34>)
2000265e:	681b      	ldr	r3, [r3, #0]
20002660:	4a04      	ldr	r2, [pc, #16]	; (20002674 <HAL_SYSTICK_CLKSourceConfig+0x34>)
20002662:	f023 0304 	bic.w	r3, r3, #4
20002666:	6013      	str	r3, [r2, #0]
}
20002668:	bf00      	nop
2000266a:	370c      	adds	r7, #12
2000266c:	46bd      	mov	sp, r7
2000266e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002672:	4770      	bx	lr
20002674:	e000e010 	.word	0xe000e010

20002678 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
20002678:	b580      	push	{r7, lr}
2000267a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
2000267c:	f000 f802 	bl	20002684 <HAL_SYSTICK_Callback>
}
20002680:	bf00      	nop
20002682:	bd80      	pop	{r7, pc}

20002684 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
20002684:	b480      	push	{r7}
20002686:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
20002688:	bf00      	nop
2000268a:	46bd      	mov	sp, r7
2000268c:	f85d 7b04 	ldr.w	r7, [sp], #4
20002690:	4770      	bx	lr
	...

20002694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
20002694:	b580      	push	{r7, lr}
20002696:	b086      	sub	sp, #24
20002698:	af00      	add	r7, sp, #0
2000269a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
2000269c:	2300      	movs	r3, #0
2000269e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
200026a0:	f7fe f9bf 	bl	20000a22 <HAL_GetTick>
200026a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
200026a6:	687b      	ldr	r3, [r7, #4]
200026a8:	2b00      	cmp	r3, #0
200026aa:	d101      	bne.n	200026b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
200026ac:	2301      	movs	r3, #1
200026ae:	e099      	b.n	200027e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
200026b0:	687b      	ldr	r3, [r7, #4]
200026b2:	2202      	movs	r2, #2
200026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
200026b8:	687b      	ldr	r3, [r7, #4]
200026ba:	2200      	movs	r2, #0
200026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
200026c0:	687b      	ldr	r3, [r7, #4]
200026c2:	681b      	ldr	r3, [r3, #0]
200026c4:	681a      	ldr	r2, [r3, #0]
200026c6:	687b      	ldr	r3, [r7, #4]
200026c8:	681b      	ldr	r3, [r3, #0]
200026ca:	f022 0201 	bic.w	r2, r2, #1
200026ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
200026d0:	e00f      	b.n	200026f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
200026d2:	f7fe f9a6 	bl	20000a22 <HAL_GetTick>
200026d6:	4602      	mov	r2, r0
200026d8:	693b      	ldr	r3, [r7, #16]
200026da:	1ad3      	subs	r3, r2, r3
200026dc:	2b05      	cmp	r3, #5
200026de:	d908      	bls.n	200026f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
200026e0:	687b      	ldr	r3, [r7, #4]
200026e2:	2220      	movs	r2, #32
200026e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
200026e6:	687b      	ldr	r3, [r7, #4]
200026e8:	2203      	movs	r2, #3
200026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
200026ee:	2303      	movs	r3, #3
200026f0:	e078      	b.n	200027e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
200026f2:	687b      	ldr	r3, [r7, #4]
200026f4:	681b      	ldr	r3, [r3, #0]
200026f6:	681b      	ldr	r3, [r3, #0]
200026f8:	f003 0301 	and.w	r3, r3, #1
200026fc:	2b00      	cmp	r3, #0
200026fe:	d1e8      	bne.n	200026d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
20002700:	687b      	ldr	r3, [r7, #4]
20002702:	681b      	ldr	r3, [r3, #0]
20002704:	681b      	ldr	r3, [r3, #0]
20002706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
20002708:	697a      	ldr	r2, [r7, #20]
2000270a:	4b38      	ldr	r3, [pc, #224]	; (200027ec <HAL_DMA_Init+0x158>)
2000270c:	4013      	ands	r3, r2
2000270e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20002710:	687b      	ldr	r3, [r7, #4]
20002712:	685a      	ldr	r2, [r3, #4]
20002714:	687b      	ldr	r3, [r7, #4]
20002716:	689b      	ldr	r3, [r3, #8]
20002718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2000271a:	687b      	ldr	r3, [r7, #4]
2000271c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2000271e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
20002720:	687b      	ldr	r3, [r7, #4]
20002722:	691b      	ldr	r3, [r3, #16]
20002724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20002726:	687b      	ldr	r3, [r7, #4]
20002728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
2000272a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
2000272c:	687b      	ldr	r3, [r7, #4]
2000272e:	699b      	ldr	r3, [r3, #24]
20002730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
20002732:	687b      	ldr	r3, [r7, #4]
20002734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
20002736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
20002738:	687b      	ldr	r3, [r7, #4]
2000273a:	6a1b      	ldr	r3, [r3, #32]
2000273c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
2000273e:	697a      	ldr	r2, [r7, #20]
20002740:	4313      	orrs	r3, r2
20002742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20002744:	687b      	ldr	r3, [r7, #4]
20002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002748:	2b04      	cmp	r3, #4
2000274a:	d107      	bne.n	2000275c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
2000274c:	687b      	ldr	r3, [r7, #4]
2000274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
20002750:	687b      	ldr	r3, [r7, #4]
20002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20002754:	4313      	orrs	r3, r2
20002756:	697a      	ldr	r2, [r7, #20]
20002758:	4313      	orrs	r3, r2
2000275a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
2000275c:	687b      	ldr	r3, [r7, #4]
2000275e:	681b      	ldr	r3, [r3, #0]
20002760:	697a      	ldr	r2, [r7, #20]
20002762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
20002764:	687b      	ldr	r3, [r7, #4]
20002766:	681b      	ldr	r3, [r3, #0]
20002768:	695b      	ldr	r3, [r3, #20]
2000276a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
2000276c:	697b      	ldr	r3, [r7, #20]
2000276e:	f023 0307 	bic.w	r3, r3, #7
20002772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
20002774:	687b      	ldr	r3, [r7, #4]
20002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002778:	697a      	ldr	r2, [r7, #20]
2000277a:	4313      	orrs	r3, r2
2000277c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
2000277e:	687b      	ldr	r3, [r7, #4]
20002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002782:	2b04      	cmp	r3, #4
20002784:	d117      	bne.n	200027b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
20002786:	687b      	ldr	r3, [r7, #4]
20002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000278a:	697a      	ldr	r2, [r7, #20]
2000278c:	4313      	orrs	r3, r2
2000278e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
20002790:	687b      	ldr	r3, [r7, #4]
20002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002794:	2b00      	cmp	r3, #0
20002796:	d00e      	beq.n	200027b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
20002798:	6878      	ldr	r0, [r7, #4]
2000279a:	f000 fd51 	bl	20003240 <DMA_CheckFifoParam>
2000279e:	4603      	mov	r3, r0
200027a0:	2b00      	cmp	r3, #0
200027a2:	d008      	beq.n	200027b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
200027a4:	687b      	ldr	r3, [r7, #4]
200027a6:	2240      	movs	r2, #64	; 0x40
200027a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
200027aa:	687b      	ldr	r3, [r7, #4]
200027ac:	2201      	movs	r2, #1
200027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
200027b2:	2301      	movs	r3, #1
200027b4:	e016      	b.n	200027e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
200027b6:	687b      	ldr	r3, [r7, #4]
200027b8:	681b      	ldr	r3, [r3, #0]
200027ba:	697a      	ldr	r2, [r7, #20]
200027bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
200027be:	6878      	ldr	r0, [r7, #4]
200027c0:	f000 fd08 	bl	200031d4 <DMA_CalcBaseAndBitshift>
200027c4:	4603      	mov	r3, r0
200027c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
200027c8:	687b      	ldr	r3, [r7, #4]
200027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200027cc:	223f      	movs	r2, #63	; 0x3f
200027ce:	409a      	lsls	r2, r3
200027d0:	68fb      	ldr	r3, [r7, #12]
200027d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200027d4:	687b      	ldr	r3, [r7, #4]
200027d6:	2200      	movs	r2, #0
200027d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
200027da:	687b      	ldr	r3, [r7, #4]
200027dc:	2201      	movs	r2, #1
200027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
200027e2:	2300      	movs	r3, #0
}
200027e4:	4618      	mov	r0, r3
200027e6:	3718      	adds	r7, #24
200027e8:	46bd      	mov	sp, r7
200027ea:	bd80      	pop	{r7, pc}
200027ec:	f010803f 	.word	0xf010803f

200027f0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
200027f0:	b580      	push	{r7, lr}
200027f2:	b084      	sub	sp, #16
200027f4:	af00      	add	r7, sp, #0
200027f6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
200027f8:	687b      	ldr	r3, [r7, #4]
200027fa:	2b00      	cmp	r3, #0
200027fc:	d101      	bne.n	20002802 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
200027fe:	2301      	movs	r3, #1
20002800:	e050      	b.n	200028a4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
20002802:	687b      	ldr	r3, [r7, #4]
20002804:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002808:	b2db      	uxtb	r3, r3
2000280a:	2b02      	cmp	r3, #2
2000280c:	d101      	bne.n	20002812 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
2000280e:	2302      	movs	r3, #2
20002810:	e048      	b.n	200028a4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
20002812:	687b      	ldr	r3, [r7, #4]
20002814:	681b      	ldr	r3, [r3, #0]
20002816:	681a      	ldr	r2, [r3, #0]
20002818:	687b      	ldr	r3, [r7, #4]
2000281a:	681b      	ldr	r3, [r3, #0]
2000281c:	f022 0201 	bic.w	r2, r2, #1
20002820:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
20002822:	687b      	ldr	r3, [r7, #4]
20002824:	681b      	ldr	r3, [r3, #0]
20002826:	2200      	movs	r2, #0
20002828:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
2000282a:	687b      	ldr	r3, [r7, #4]
2000282c:	681b      	ldr	r3, [r3, #0]
2000282e:	2200      	movs	r2, #0
20002830:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
20002832:	687b      	ldr	r3, [r7, #4]
20002834:	681b      	ldr	r3, [r3, #0]
20002836:	2200      	movs	r2, #0
20002838:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
2000283a:	687b      	ldr	r3, [r7, #4]
2000283c:	681b      	ldr	r3, [r3, #0]
2000283e:	2200      	movs	r2, #0
20002840:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
20002842:	687b      	ldr	r3, [r7, #4]
20002844:	681b      	ldr	r3, [r3, #0]
20002846:	2200      	movs	r2, #0
20002848:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
2000284a:	687b      	ldr	r3, [r7, #4]
2000284c:	681b      	ldr	r3, [r3, #0]
2000284e:	2221      	movs	r2, #33	; 0x21
20002850:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20002852:	6878      	ldr	r0, [r7, #4]
20002854:	f000 fcbe 	bl	200031d4 <DMA_CalcBaseAndBitshift>
20002858:	4603      	mov	r3, r0
2000285a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
2000285c:	687b      	ldr	r3, [r7, #4]
2000285e:	2200      	movs	r2, #0
20002860:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
20002862:	687b      	ldr	r3, [r7, #4]
20002864:	2200      	movs	r2, #0
20002866:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
20002868:	687b      	ldr	r3, [r7, #4]
2000286a:	2200      	movs	r2, #0
2000286c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
2000286e:	687b      	ldr	r3, [r7, #4]
20002870:	2200      	movs	r2, #0
20002872:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
20002874:	687b      	ldr	r3, [r7, #4]
20002876:	2200      	movs	r2, #0
20002878:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
2000287a:	687b      	ldr	r3, [r7, #4]
2000287c:	2200      	movs	r2, #0
2000287e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20002880:	687b      	ldr	r3, [r7, #4]
20002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002884:	223f      	movs	r2, #63	; 0x3f
20002886:	409a      	lsls	r2, r3
20002888:	68fb      	ldr	r3, [r7, #12]
2000288a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000288c:	687b      	ldr	r3, [r7, #4]
2000288e:	2200      	movs	r2, #0
20002890:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
20002892:	687b      	ldr	r3, [r7, #4]
20002894:	2200      	movs	r2, #0
20002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
2000289a:	687b      	ldr	r3, [r7, #4]
2000289c:	2200      	movs	r2, #0
2000289e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
200028a2:	2300      	movs	r3, #0
}
200028a4:	4618      	mov	r0, r3
200028a6:	3710      	adds	r7, #16
200028a8:	46bd      	mov	sp, r7
200028aa:	bd80      	pop	{r7, pc}

200028ac <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
200028ac:	b580      	push	{r7, lr}
200028ae:	b086      	sub	sp, #24
200028b0:	af00      	add	r7, sp, #0
200028b2:	60f8      	str	r0, [r7, #12]
200028b4:	60b9      	str	r1, [r7, #8]
200028b6:	607a      	str	r2, [r7, #4]
200028b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200028ba:	2300      	movs	r3, #0
200028bc:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
200028be:	68fb      	ldr	r3, [r7, #12]
200028c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200028c4:	2b01      	cmp	r3, #1
200028c6:	d101      	bne.n	200028cc <HAL_DMA_Start+0x20>
200028c8:	2302      	movs	r3, #2
200028ca:	e026      	b.n	2000291a <HAL_DMA_Start+0x6e>
200028cc:	68fb      	ldr	r3, [r7, #12]
200028ce:	2201      	movs	r2, #1
200028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
200028d4:	68fb      	ldr	r3, [r7, #12]
200028d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200028da:	b2db      	uxtb	r3, r3
200028dc:	2b01      	cmp	r3, #1
200028de:	d115      	bne.n	2000290c <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200028e0:	68fb      	ldr	r3, [r7, #12]
200028e2:	2202      	movs	r2, #2
200028e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200028e8:	68fb      	ldr	r3, [r7, #12]
200028ea:	2200      	movs	r2, #0
200028ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
200028ee:	683b      	ldr	r3, [r7, #0]
200028f0:	687a      	ldr	r2, [r7, #4]
200028f2:	68b9      	ldr	r1, [r7, #8]
200028f4:	68f8      	ldr	r0, [r7, #12]
200028f6:	f000 fc3f 	bl	20003178 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
200028fa:	68fb      	ldr	r3, [r7, #12]
200028fc:	681b      	ldr	r3, [r3, #0]
200028fe:	681a      	ldr	r2, [r3, #0]
20002900:	68fb      	ldr	r3, [r7, #12]
20002902:	681b      	ldr	r3, [r3, #0]
20002904:	f042 0201 	orr.w	r2, r2, #1
20002908:	601a      	str	r2, [r3, #0]
2000290a:	e005      	b.n	20002918 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
2000290c:	68fb      	ldr	r3, [r7, #12]
2000290e:	2200      	movs	r2, #0
20002910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
20002914:	2302      	movs	r3, #2
20002916:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
20002918:	7dfb      	ldrb	r3, [r7, #23]
}
2000291a:	4618      	mov	r0, r3
2000291c:	3718      	adds	r7, #24
2000291e:	46bd      	mov	sp, r7
20002920:	bd80      	pop	{r7, pc}

20002922 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20002922:	b580      	push	{r7, lr}
20002924:	b086      	sub	sp, #24
20002926:	af00      	add	r7, sp, #0
20002928:	60f8      	str	r0, [r7, #12]
2000292a:	60b9      	str	r1, [r7, #8]
2000292c:	607a      	str	r2, [r7, #4]
2000292e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002930:	2300      	movs	r3, #0
20002932:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002934:	68fb      	ldr	r3, [r7, #12]
20002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002938:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
2000293a:	68fb      	ldr	r3, [r7, #12]
2000293c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002940:	2b01      	cmp	r3, #1
20002942:	d101      	bne.n	20002948 <HAL_DMA_Start_IT+0x26>
20002944:	2302      	movs	r3, #2
20002946:	e040      	b.n	200029ca <HAL_DMA_Start_IT+0xa8>
20002948:	68fb      	ldr	r3, [r7, #12]
2000294a:	2201      	movs	r2, #1
2000294c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20002950:	68fb      	ldr	r3, [r7, #12]
20002952:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002956:	b2db      	uxtb	r3, r3
20002958:	2b01      	cmp	r3, #1
2000295a:	d12f      	bne.n	200029bc <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
2000295c:	68fb      	ldr	r3, [r7, #12]
2000295e:	2202      	movs	r2, #2
20002960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002964:	68fb      	ldr	r3, [r7, #12]
20002966:	2200      	movs	r2, #0
20002968:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
2000296a:	683b      	ldr	r3, [r7, #0]
2000296c:	687a      	ldr	r2, [r7, #4]
2000296e:	68b9      	ldr	r1, [r7, #8]
20002970:	68f8      	ldr	r0, [r7, #12]
20002972:	f000 fc01 	bl	20003178 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002976:	68fb      	ldr	r3, [r7, #12]
20002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000297a:	223f      	movs	r2, #63	; 0x3f
2000297c:	409a      	lsls	r2, r3
2000297e:	693b      	ldr	r3, [r7, #16]
20002980:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20002982:	68fb      	ldr	r3, [r7, #12]
20002984:	681b      	ldr	r3, [r3, #0]
20002986:	681a      	ldr	r2, [r3, #0]
20002988:	68fb      	ldr	r3, [r7, #12]
2000298a:	681b      	ldr	r3, [r3, #0]
2000298c:	f042 0216 	orr.w	r2, r2, #22
20002990:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
20002992:	68fb      	ldr	r3, [r7, #12]
20002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002996:	2b00      	cmp	r3, #0
20002998:	d007      	beq.n	200029aa <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
2000299a:	68fb      	ldr	r3, [r7, #12]
2000299c:	681b      	ldr	r3, [r3, #0]
2000299e:	681a      	ldr	r2, [r3, #0]
200029a0:	68fb      	ldr	r3, [r7, #12]
200029a2:	681b      	ldr	r3, [r3, #0]
200029a4:	f042 0208 	orr.w	r2, r2, #8
200029a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
200029aa:	68fb      	ldr	r3, [r7, #12]
200029ac:	681b      	ldr	r3, [r3, #0]
200029ae:	681a      	ldr	r2, [r3, #0]
200029b0:	68fb      	ldr	r3, [r7, #12]
200029b2:	681b      	ldr	r3, [r3, #0]
200029b4:	f042 0201 	orr.w	r2, r2, #1
200029b8:	601a      	str	r2, [r3, #0]
200029ba:	e005      	b.n	200029c8 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
200029bc:	68fb      	ldr	r3, [r7, #12]
200029be:	2200      	movs	r2, #0
200029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
200029c4:	2302      	movs	r3, #2
200029c6:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
200029c8:	7dfb      	ldrb	r3, [r7, #23]
}
200029ca:	4618      	mov	r0, r3
200029cc:	3718      	adds	r7, #24
200029ce:	46bd      	mov	sp, r7
200029d0:	bd80      	pop	{r7, pc}

200029d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
200029d2:	b580      	push	{r7, lr}
200029d4:	b084      	sub	sp, #16
200029d6:	af00      	add	r7, sp, #0
200029d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
200029da:	687b      	ldr	r3, [r7, #4]
200029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200029de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
200029e0:	f7fe f81f 	bl	20000a22 <HAL_GetTick>
200029e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
200029e6:	687b      	ldr	r3, [r7, #4]
200029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200029ec:	b2db      	uxtb	r3, r3
200029ee:	2b02      	cmp	r3, #2
200029f0:	d008      	beq.n	20002a04 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
200029f2:	687b      	ldr	r3, [r7, #4]
200029f4:	2280      	movs	r2, #128	; 0x80
200029f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
200029f8:	687b      	ldr	r3, [r7, #4]
200029fa:	2200      	movs	r2, #0
200029fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
20002a00:	2301      	movs	r3, #1
20002a02:	e052      	b.n	20002aaa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002a04:	687b      	ldr	r3, [r7, #4]
20002a06:	681b      	ldr	r3, [r3, #0]
20002a08:	681a      	ldr	r2, [r3, #0]
20002a0a:	687b      	ldr	r3, [r7, #4]
20002a0c:	681b      	ldr	r3, [r3, #0]
20002a0e:	f022 0216 	bic.w	r2, r2, #22
20002a12:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
20002a14:	687b      	ldr	r3, [r7, #4]
20002a16:	681b      	ldr	r3, [r3, #0]
20002a18:	695a      	ldr	r2, [r3, #20]
20002a1a:	687b      	ldr	r3, [r7, #4]
20002a1c:	681b      	ldr	r3, [r3, #0]
20002a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20002a22:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002a24:	687b      	ldr	r3, [r7, #4]
20002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002a28:	2b00      	cmp	r3, #0
20002a2a:	d103      	bne.n	20002a34 <HAL_DMA_Abort+0x62>
20002a2c:	687b      	ldr	r3, [r7, #4]
20002a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002a30:	2b00      	cmp	r3, #0
20002a32:	d007      	beq.n	20002a44 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
20002a34:	687b      	ldr	r3, [r7, #4]
20002a36:	681b      	ldr	r3, [r3, #0]
20002a38:	681a      	ldr	r2, [r3, #0]
20002a3a:	687b      	ldr	r3, [r7, #4]
20002a3c:	681b      	ldr	r3, [r3, #0]
20002a3e:	f022 0208 	bic.w	r2, r2, #8
20002a42:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002a44:	687b      	ldr	r3, [r7, #4]
20002a46:	681b      	ldr	r3, [r3, #0]
20002a48:	681a      	ldr	r2, [r3, #0]
20002a4a:	687b      	ldr	r3, [r7, #4]
20002a4c:	681b      	ldr	r3, [r3, #0]
20002a4e:	f022 0201 	bic.w	r2, r2, #1
20002a52:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002a54:	e013      	b.n	20002a7e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
20002a56:	f7fd ffe4 	bl	20000a22 <HAL_GetTick>
20002a5a:	4602      	mov	r2, r0
20002a5c:	68bb      	ldr	r3, [r7, #8]
20002a5e:	1ad3      	subs	r3, r2, r3
20002a60:	2b05      	cmp	r3, #5
20002a62:	d90c      	bls.n	20002a7e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002a64:	687b      	ldr	r3, [r7, #4]
20002a66:	2220      	movs	r2, #32
20002a68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
20002a6a:	687b      	ldr	r3, [r7, #4]
20002a6c:	2203      	movs	r2, #3
20002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002a72:	687b      	ldr	r3, [r7, #4]
20002a74:	2200      	movs	r2, #0
20002a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
20002a7a:	2303      	movs	r3, #3
20002a7c:	e015      	b.n	20002aaa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002a7e:	687b      	ldr	r3, [r7, #4]
20002a80:	681b      	ldr	r3, [r3, #0]
20002a82:	681b      	ldr	r3, [r3, #0]
20002a84:	f003 0301 	and.w	r3, r3, #1
20002a88:	2b00      	cmp	r3, #0
20002a8a:	d1e4      	bne.n	20002a56 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002a8c:	687b      	ldr	r3, [r7, #4]
20002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002a90:	223f      	movs	r2, #63	; 0x3f
20002a92:	409a      	lsls	r2, r3
20002a94:	68fb      	ldr	r3, [r7, #12]
20002a96:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
20002a98:	687b      	ldr	r3, [r7, #4]
20002a9a:	2201      	movs	r2, #1
20002a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002aa0:	687b      	ldr	r3, [r7, #4]
20002aa2:	2200      	movs	r2, #0
20002aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
20002aa8:	2300      	movs	r3, #0
}
20002aaa:	4618      	mov	r0, r3
20002aac:	3710      	adds	r7, #16
20002aae:	46bd      	mov	sp, r7
20002ab0:	bd80      	pop	{r7, pc}

20002ab2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
20002ab2:	b480      	push	{r7}
20002ab4:	b083      	sub	sp, #12
20002ab6:	af00      	add	r7, sp, #0
20002ab8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002aba:	687b      	ldr	r3, [r7, #4]
20002abc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002ac0:	b2db      	uxtb	r3, r3
20002ac2:	2b02      	cmp	r3, #2
20002ac4:	d004      	beq.n	20002ad0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002ac6:	687b      	ldr	r3, [r7, #4]
20002ac8:	2280      	movs	r2, #128	; 0x80
20002aca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002acc:	2301      	movs	r3, #1
20002ace:	e00c      	b.n	20002aea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
20002ad0:	687b      	ldr	r3, [r7, #4]
20002ad2:	2205      	movs	r2, #5
20002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002ad8:	687b      	ldr	r3, [r7, #4]
20002ada:	681b      	ldr	r3, [r3, #0]
20002adc:	681a      	ldr	r2, [r3, #0]
20002ade:	687b      	ldr	r3, [r7, #4]
20002ae0:	681b      	ldr	r3, [r3, #0]
20002ae2:	f022 0201 	bic.w	r2, r2, #1
20002ae6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
20002ae8:	2300      	movs	r3, #0
}
20002aea:	4618      	mov	r0, r3
20002aec:	370c      	adds	r7, #12
20002aee:	46bd      	mov	sp, r7
20002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
20002af4:	4770      	bx	lr

20002af6 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
20002af6:	b580      	push	{r7, lr}
20002af8:	b08a      	sub	sp, #40	; 0x28
20002afa:	af00      	add	r7, sp, #0
20002afc:	60f8      	str	r0, [r7, #12]
20002afe:	460b      	mov	r3, r1
20002b00:	607a      	str	r2, [r7, #4]
20002b02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
20002b04:	2300      	movs	r3, #0
20002b06:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
20002b08:	f7fd ff8b 	bl	20000a22 <HAL_GetTick>
20002b0c:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
20002b0e:	68fb      	ldr	r3, [r7, #12]
20002b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002b14:	b2db      	uxtb	r3, r3
20002b16:	2b02      	cmp	r3, #2
20002b18:	d008      	beq.n	20002b2c <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
20002b1a:	68fb      	ldr	r3, [r7, #12]
20002b1c:	2280      	movs	r2, #128	; 0x80
20002b1e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
20002b20:	68fb      	ldr	r3, [r7, #12]
20002b22:	2200      	movs	r2, #0
20002b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
20002b28:	2301      	movs	r3, #1
20002b2a:	e0bf      	b.n	20002cac <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
20002b2c:	68fb      	ldr	r3, [r7, #12]
20002b2e:	681b      	ldr	r3, [r3, #0]
20002b30:	681b      	ldr	r3, [r3, #0]
20002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002b36:	2b00      	cmp	r3, #0
20002b38:	d005      	beq.n	20002b46 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002b3a:	68fb      	ldr	r3, [r7, #12]
20002b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
20002b40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002b42:	2301      	movs	r3, #1
20002b44:	e0b2      	b.n	20002cac <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002b46:	7afb      	ldrb	r3, [r7, #11]
20002b48:	2b00      	cmp	r3, #0
20002b4a:	d106      	bne.n	20002b5a <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002b4c:	68fb      	ldr	r3, [r7, #12]
20002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b50:	2220      	movs	r2, #32
20002b52:	fa02 f303 	lsl.w	r3, r2, r3
20002b56:	627b      	str	r3, [r7, #36]	; 0x24
20002b58:	e005      	b.n	20002b66 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002b5a:	68fb      	ldr	r3, [r7, #12]
20002b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002b5e:	2210      	movs	r2, #16
20002b60:	fa02 f303 	lsl.w	r3, r2, r3
20002b64:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002b66:	68fb      	ldr	r3, [r7, #12]
20002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002b6a:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
20002b6c:	697b      	ldr	r3, [r7, #20]
20002b6e:	681b      	ldr	r3, [r3, #0]
20002b70:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002b72:	e05a      	b.n	20002c2a <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
20002b74:	687b      	ldr	r3, [r7, #4]
20002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
20002b7a:	d017      	beq.n	20002bac <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20002b7c:	687b      	ldr	r3, [r7, #4]
20002b7e:	2b00      	cmp	r3, #0
20002b80:	d007      	beq.n	20002b92 <HAL_DMA_PollForTransfer+0x9c>
20002b82:	f7fd ff4e 	bl	20000a22 <HAL_GetTick>
20002b86:	4602      	mov	r2, r0
20002b88:	69bb      	ldr	r3, [r7, #24]
20002b8a:	1ad3      	subs	r3, r2, r3
20002b8c:	687a      	ldr	r2, [r7, #4]
20002b8e:	429a      	cmp	r2, r3
20002b90:	d20c      	bcs.n	20002bac <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002b92:	68fb      	ldr	r3, [r7, #12]
20002b94:	2220      	movs	r2, #32
20002b96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002b98:	68fb      	ldr	r3, [r7, #12]
20002b9a:	2201      	movs	r2, #1
20002b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002ba0:	68fb      	ldr	r3, [r7, #12]
20002ba2:	2200      	movs	r2, #0
20002ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
20002ba8:	2303      	movs	r3, #3
20002baa:	e07f      	b.n	20002cac <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
20002bac:	697b      	ldr	r3, [r7, #20]
20002bae:	681b      	ldr	r3, [r3, #0]
20002bb0:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002bb2:	68fb      	ldr	r3, [r7, #12]
20002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bb6:	2208      	movs	r2, #8
20002bb8:	409a      	lsls	r2, r3
20002bba:	6a3b      	ldr	r3, [r7, #32]
20002bbc:	4013      	ands	r3, r2
20002bbe:	2b00      	cmp	r3, #0
20002bc0:	d00b      	beq.n	20002bda <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002bc2:	68fb      	ldr	r3, [r7, #12]
20002bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002bc6:	f043 0201 	orr.w	r2, r3, #1
20002bca:	68fb      	ldr	r3, [r7, #12]
20002bcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002bce:	68fb      	ldr	r3, [r7, #12]
20002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bd2:	2208      	movs	r2, #8
20002bd4:	409a      	lsls	r2, r3
20002bd6:	697b      	ldr	r3, [r7, #20]
20002bd8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002bda:	68fb      	ldr	r3, [r7, #12]
20002bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bde:	2201      	movs	r2, #1
20002be0:	409a      	lsls	r2, r3
20002be2:	6a3b      	ldr	r3, [r7, #32]
20002be4:	4013      	ands	r3, r2
20002be6:	2b00      	cmp	r3, #0
20002be8:	d00b      	beq.n	20002c02 <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002bea:	68fb      	ldr	r3, [r7, #12]
20002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002bee:	f043 0202 	orr.w	r2, r3, #2
20002bf2:	68fb      	ldr	r3, [r7, #12]
20002bf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002bf6:	68fb      	ldr	r3, [r7, #12]
20002bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002bfa:	2201      	movs	r2, #1
20002bfc:	409a      	lsls	r2, r3
20002bfe:	697b      	ldr	r3, [r7, #20]
20002c00:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002c02:	68fb      	ldr	r3, [r7, #12]
20002c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c06:	2204      	movs	r2, #4
20002c08:	409a      	lsls	r2, r3
20002c0a:	6a3b      	ldr	r3, [r7, #32]
20002c0c:	4013      	ands	r3, r2
20002c0e:	2b00      	cmp	r3, #0
20002c10:	d00b      	beq.n	20002c2a <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002c12:	68fb      	ldr	r3, [r7, #12]
20002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002c16:	f043 0204 	orr.w	r2, r3, #4
20002c1a:	68fb      	ldr	r3, [r7, #12]
20002c1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002c1e:	68fb      	ldr	r3, [r7, #12]
20002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c22:	2204      	movs	r2, #4
20002c24:	409a      	lsls	r2, r3
20002c26:	697b      	ldr	r3, [r7, #20]
20002c28:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
20002c2a:	6a3a      	ldr	r2, [r7, #32]
20002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002c2e:	4013      	ands	r3, r2
20002c30:	2b00      	cmp	r3, #0
20002c32:	d105      	bne.n	20002c40 <HAL_DMA_PollForTransfer+0x14a>
20002c34:	68fb      	ldr	r3, [r7, #12]
20002c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002c38:	f003 0301 	and.w	r3, r3, #1
20002c3c:	2b00      	cmp	r3, #0
20002c3e:	d099      	beq.n	20002b74 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002c40:	68fb      	ldr	r3, [r7, #12]
20002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002c44:	2b00      	cmp	r3, #0
20002c46:	d018      	beq.n	20002c7a <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002c48:	68fb      	ldr	r3, [r7, #12]
20002c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002c4c:	f003 0301 	and.w	r3, r3, #1
20002c50:	2b00      	cmp	r3, #0
20002c52:	d012      	beq.n	20002c7a <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
20002c54:	68f8      	ldr	r0, [r7, #12]
20002c56:	f7ff febc 	bl	200029d2 <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002c5a:	68fb      	ldr	r3, [r7, #12]
20002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c5e:	2230      	movs	r2, #48	; 0x30
20002c60:	409a      	lsls	r2, r3
20002c62:	697b      	ldr	r3, [r7, #20]
20002c64:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
20002c66:	68fb      	ldr	r3, [r7, #12]
20002c68:	2201      	movs	r2, #1
20002c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20002c6e:	68fb      	ldr	r3, [r7, #12]
20002c70:	2200      	movs	r2, #0
20002c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
20002c76:	2301      	movs	r3, #1
20002c78:	e018      	b.n	20002cac <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002c7a:	7afb      	ldrb	r3, [r7, #11]
20002c7c:	2b00      	cmp	r3, #0
20002c7e:	d10e      	bne.n	20002c9e <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002c80:	68fb      	ldr	r3, [r7, #12]
20002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002c84:	2230      	movs	r2, #48	; 0x30
20002c86:	409a      	lsls	r2, r3
20002c88:	697b      	ldr	r3, [r7, #20]
20002c8a:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
20002c8c:	68fb      	ldr	r3, [r7, #12]
20002c8e:	2201      	movs	r2, #1
20002c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002c94:	68fb      	ldr	r3, [r7, #12]
20002c96:	2200      	movs	r2, #0
20002c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
20002c9c:	e005      	b.n	20002caa <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20002c9e:	68fb      	ldr	r3, [r7, #12]
20002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002ca2:	2210      	movs	r2, #16
20002ca4:	409a      	lsls	r2, r3
20002ca6:	697b      	ldr	r3, [r7, #20]
20002ca8:	609a      	str	r2, [r3, #8]
  }
  
  return status;
20002caa:	7ffb      	ldrb	r3, [r7, #31]
}
20002cac:	4618      	mov	r0, r3
20002cae:	3728      	adds	r7, #40	; 0x28
20002cb0:	46bd      	mov	sp, r7
20002cb2:	bd80      	pop	{r7, pc}

20002cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
20002cb4:	b580      	push	{r7, lr}
20002cb6:	b086      	sub	sp, #24
20002cb8:	af00      	add	r7, sp, #0
20002cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
20002cbc:	2300      	movs	r3, #0
20002cbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
20002cc0:	4b8e      	ldr	r3, [pc, #568]	; (20002efc <HAL_DMA_IRQHandler+0x248>)
20002cc2:	681b      	ldr	r3, [r3, #0]
20002cc4:	4a8e      	ldr	r2, [pc, #568]	; (20002f00 <HAL_DMA_IRQHandler+0x24c>)
20002cc6:	fba2 2303 	umull	r2, r3, r2, r3
20002cca:	0a9b      	lsrs	r3, r3, #10
20002ccc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002cce:	687b      	ldr	r3, [r7, #4]
20002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002cd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
20002cd4:	693b      	ldr	r3, [r7, #16]
20002cd6:	681b      	ldr	r3, [r3, #0]
20002cd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002cda:	687b      	ldr	r3, [r7, #4]
20002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002cde:	2208      	movs	r2, #8
20002ce0:	409a      	lsls	r2, r3
20002ce2:	68fb      	ldr	r3, [r7, #12]
20002ce4:	4013      	ands	r3, r2
20002ce6:	2b00      	cmp	r3, #0
20002ce8:	d01a      	beq.n	20002d20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
20002cea:	687b      	ldr	r3, [r7, #4]
20002cec:	681b      	ldr	r3, [r3, #0]
20002cee:	681b      	ldr	r3, [r3, #0]
20002cf0:	f003 0304 	and.w	r3, r3, #4
20002cf4:	2b00      	cmp	r3, #0
20002cf6:	d013      	beq.n	20002d20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
20002cf8:	687b      	ldr	r3, [r7, #4]
20002cfa:	681b      	ldr	r3, [r3, #0]
20002cfc:	681a      	ldr	r2, [r3, #0]
20002cfe:	687b      	ldr	r3, [r7, #4]
20002d00:	681b      	ldr	r3, [r3, #0]
20002d02:	f022 0204 	bic.w	r2, r2, #4
20002d06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002d08:	687b      	ldr	r3, [r7, #4]
20002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d0c:	2208      	movs	r2, #8
20002d0e:	409a      	lsls	r2, r3
20002d10:	693b      	ldr	r3, [r7, #16]
20002d12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
20002d14:	687b      	ldr	r3, [r7, #4]
20002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002d18:	f043 0201 	orr.w	r2, r3, #1
20002d1c:	687b      	ldr	r3, [r7, #4]
20002d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002d20:	687b      	ldr	r3, [r7, #4]
20002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d24:	2201      	movs	r2, #1
20002d26:	409a      	lsls	r2, r3
20002d28:	68fb      	ldr	r3, [r7, #12]
20002d2a:	4013      	ands	r3, r2
20002d2c:	2b00      	cmp	r3, #0
20002d2e:	d012      	beq.n	20002d56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
20002d30:	687b      	ldr	r3, [r7, #4]
20002d32:	681b      	ldr	r3, [r3, #0]
20002d34:	695b      	ldr	r3, [r3, #20]
20002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
20002d3a:	2b00      	cmp	r3, #0
20002d3c:	d00b      	beq.n	20002d56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
20002d3e:	687b      	ldr	r3, [r7, #4]
20002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d42:	2201      	movs	r2, #1
20002d44:	409a      	lsls	r2, r3
20002d46:	693b      	ldr	r3, [r7, #16]
20002d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002d4a:	687b      	ldr	r3, [r7, #4]
20002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002d4e:	f043 0202 	orr.w	r2, r3, #2
20002d52:	687b      	ldr	r3, [r7, #4]
20002d54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
20002d56:	687b      	ldr	r3, [r7, #4]
20002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d5a:	2204      	movs	r2, #4
20002d5c:	409a      	lsls	r2, r3
20002d5e:	68fb      	ldr	r3, [r7, #12]
20002d60:	4013      	ands	r3, r2
20002d62:	2b00      	cmp	r3, #0
20002d64:	d012      	beq.n	20002d8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
20002d66:	687b      	ldr	r3, [r7, #4]
20002d68:	681b      	ldr	r3, [r3, #0]
20002d6a:	681b      	ldr	r3, [r3, #0]
20002d6c:	f003 0302 	and.w	r3, r3, #2
20002d70:	2b00      	cmp	r3, #0
20002d72:	d00b      	beq.n	20002d8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
20002d74:	687b      	ldr	r3, [r7, #4]
20002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d78:	2204      	movs	r2, #4
20002d7a:	409a      	lsls	r2, r3
20002d7c:	693b      	ldr	r3, [r7, #16]
20002d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002d80:	687b      	ldr	r3, [r7, #4]
20002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002d84:	f043 0204 	orr.w	r2, r3, #4
20002d88:	687b      	ldr	r3, [r7, #4]
20002d8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
20002d8c:	687b      	ldr	r3, [r7, #4]
20002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002d90:	2210      	movs	r2, #16
20002d92:	409a      	lsls	r2, r3
20002d94:	68fb      	ldr	r3, [r7, #12]
20002d96:	4013      	ands	r3, r2
20002d98:	2b00      	cmp	r3, #0
20002d9a:	d043      	beq.n	20002e24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
20002d9c:	687b      	ldr	r3, [r7, #4]
20002d9e:	681b      	ldr	r3, [r3, #0]
20002da0:	681b      	ldr	r3, [r3, #0]
20002da2:	f003 0308 	and.w	r3, r3, #8
20002da6:	2b00      	cmp	r3, #0
20002da8:	d03c      	beq.n	20002e24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002daa:	687b      	ldr	r3, [r7, #4]
20002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002dae:	2210      	movs	r2, #16
20002db0:	409a      	lsls	r2, r3
20002db2:	693b      	ldr	r3, [r7, #16]
20002db4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002db6:	687b      	ldr	r3, [r7, #4]
20002db8:	681b      	ldr	r3, [r3, #0]
20002dba:	681b      	ldr	r3, [r3, #0]
20002dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002dc0:	2b00      	cmp	r3, #0
20002dc2:	d018      	beq.n	20002df6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002dc4:	687b      	ldr	r3, [r7, #4]
20002dc6:	681b      	ldr	r3, [r3, #0]
20002dc8:	681b      	ldr	r3, [r3, #0]
20002dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002dce:	2b00      	cmp	r3, #0
20002dd0:	d108      	bne.n	20002de4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
20002dd2:	687b      	ldr	r3, [r7, #4]
20002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002dd6:	2b00      	cmp	r3, #0
20002dd8:	d024      	beq.n	20002e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
20002dda:	687b      	ldr	r3, [r7, #4]
20002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002dde:	6878      	ldr	r0, [r7, #4]
20002de0:	4798      	blx	r3
20002de2:	e01f      	b.n	20002e24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
20002de4:	687b      	ldr	r3, [r7, #4]
20002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002de8:	2b00      	cmp	r3, #0
20002dea:	d01b      	beq.n	20002e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
20002dec:	687b      	ldr	r3, [r7, #4]
20002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002df0:	6878      	ldr	r0, [r7, #4]
20002df2:	4798      	blx	r3
20002df4:	e016      	b.n	20002e24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002df6:	687b      	ldr	r3, [r7, #4]
20002df8:	681b      	ldr	r3, [r3, #0]
20002dfa:	681b      	ldr	r3, [r3, #0]
20002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002e00:	2b00      	cmp	r3, #0
20002e02:	d107      	bne.n	20002e14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002e04:	687b      	ldr	r3, [r7, #4]
20002e06:	681b      	ldr	r3, [r3, #0]
20002e08:	681a      	ldr	r2, [r3, #0]
20002e0a:	687b      	ldr	r3, [r7, #4]
20002e0c:	681b      	ldr	r3, [r3, #0]
20002e0e:	f022 0208 	bic.w	r2, r2, #8
20002e12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
20002e14:	687b      	ldr	r3, [r7, #4]
20002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e18:	2b00      	cmp	r3, #0
20002e1a:	d003      	beq.n	20002e24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
20002e1c:	687b      	ldr	r3, [r7, #4]
20002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e20:	6878      	ldr	r0, [r7, #4]
20002e22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
20002e24:	687b      	ldr	r3, [r7, #4]
20002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002e28:	2220      	movs	r2, #32
20002e2a:	409a      	lsls	r2, r3
20002e2c:	68fb      	ldr	r3, [r7, #12]
20002e2e:	4013      	ands	r3, r2
20002e30:	2b00      	cmp	r3, #0
20002e32:	f000 808f 	beq.w	20002f54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
20002e36:	687b      	ldr	r3, [r7, #4]
20002e38:	681b      	ldr	r3, [r3, #0]
20002e3a:	681b      	ldr	r3, [r3, #0]
20002e3c:	f003 0310 	and.w	r3, r3, #16
20002e40:	2b00      	cmp	r3, #0
20002e42:	f000 8087 	beq.w	20002f54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
20002e46:	687b      	ldr	r3, [r7, #4]
20002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002e4a:	2220      	movs	r2, #32
20002e4c:	409a      	lsls	r2, r3
20002e4e:	693b      	ldr	r3, [r7, #16]
20002e50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
20002e52:	687b      	ldr	r3, [r7, #4]
20002e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002e58:	b2db      	uxtb	r3, r3
20002e5a:	2b05      	cmp	r3, #5
20002e5c:	d136      	bne.n	20002ecc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
20002e5e:	687b      	ldr	r3, [r7, #4]
20002e60:	681b      	ldr	r3, [r3, #0]
20002e62:	681a      	ldr	r2, [r3, #0]
20002e64:	687b      	ldr	r3, [r7, #4]
20002e66:	681b      	ldr	r3, [r3, #0]
20002e68:	f022 0216 	bic.w	r2, r2, #22
20002e6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
20002e6e:	687b      	ldr	r3, [r7, #4]
20002e70:	681b      	ldr	r3, [r3, #0]
20002e72:	695a      	ldr	r2, [r3, #20]
20002e74:	687b      	ldr	r3, [r7, #4]
20002e76:	681b      	ldr	r3, [r3, #0]
20002e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20002e7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002e7e:	687b      	ldr	r3, [r7, #4]
20002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002e82:	2b00      	cmp	r3, #0
20002e84:	d103      	bne.n	20002e8e <HAL_DMA_IRQHandler+0x1da>
20002e86:	687b      	ldr	r3, [r7, #4]
20002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002e8a:	2b00      	cmp	r3, #0
20002e8c:	d007      	beq.n	20002e9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002e8e:	687b      	ldr	r3, [r7, #4]
20002e90:	681b      	ldr	r3, [r3, #0]
20002e92:	681a      	ldr	r2, [r3, #0]
20002e94:	687b      	ldr	r3, [r7, #4]
20002e96:	681b      	ldr	r3, [r3, #0]
20002e98:	f022 0208 	bic.w	r2, r2, #8
20002e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
20002e9e:	687b      	ldr	r3, [r7, #4]
20002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002ea2:	223f      	movs	r2, #63	; 0x3f
20002ea4:	409a      	lsls	r2, r3
20002ea6:	693b      	ldr	r3, [r7, #16]
20002ea8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002eaa:	687b      	ldr	r3, [r7, #4]
20002eac:	2201      	movs	r2, #1
20002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002eb2:	687b      	ldr	r3, [r7, #4]
20002eb4:	2200      	movs	r2, #0
20002eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
20002eba:	687b      	ldr	r3, [r7, #4]
20002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002ebe:	2b00      	cmp	r3, #0
20002ec0:	d07e      	beq.n	20002fc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
20002ec2:	687b      	ldr	r3, [r7, #4]
20002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002ec6:	6878      	ldr	r0, [r7, #4]
20002ec8:	4798      	blx	r3
        }
        return;
20002eca:	e079      	b.n	20002fc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002ecc:	687b      	ldr	r3, [r7, #4]
20002ece:	681b      	ldr	r3, [r3, #0]
20002ed0:	681b      	ldr	r3, [r3, #0]
20002ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002ed6:	2b00      	cmp	r3, #0
20002ed8:	d01d      	beq.n	20002f16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002eda:	687b      	ldr	r3, [r7, #4]
20002edc:	681b      	ldr	r3, [r3, #0]
20002ede:	681b      	ldr	r3, [r3, #0]
20002ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002ee4:	2b00      	cmp	r3, #0
20002ee6:	d10d      	bne.n	20002f04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
20002ee8:	687b      	ldr	r3, [r7, #4]
20002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002eec:	2b00      	cmp	r3, #0
20002eee:	d031      	beq.n	20002f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
20002ef0:	687b      	ldr	r3, [r7, #4]
20002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002ef4:	6878      	ldr	r0, [r7, #4]
20002ef6:	4798      	blx	r3
20002ef8:	e02c      	b.n	20002f54 <HAL_DMA_IRQHandler+0x2a0>
20002efa:	bf00      	nop
20002efc:	200003b0 	.word	0x200003b0
20002f00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
20002f04:	687b      	ldr	r3, [r7, #4]
20002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002f08:	2b00      	cmp	r3, #0
20002f0a:	d023      	beq.n	20002f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
20002f0c:	687b      	ldr	r3, [r7, #4]
20002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002f10:	6878      	ldr	r0, [r7, #4]
20002f12:	4798      	blx	r3
20002f14:	e01e      	b.n	20002f54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002f16:	687b      	ldr	r3, [r7, #4]
20002f18:	681b      	ldr	r3, [r3, #0]
20002f1a:	681b      	ldr	r3, [r3, #0]
20002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002f20:	2b00      	cmp	r3, #0
20002f22:	d10f      	bne.n	20002f44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
20002f24:	687b      	ldr	r3, [r7, #4]
20002f26:	681b      	ldr	r3, [r3, #0]
20002f28:	681a      	ldr	r2, [r3, #0]
20002f2a:	687b      	ldr	r3, [r7, #4]
20002f2c:	681b      	ldr	r3, [r3, #0]
20002f2e:	f022 0210 	bic.w	r2, r2, #16
20002f32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
20002f34:	687b      	ldr	r3, [r7, #4]
20002f36:	2201      	movs	r2, #1
20002f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20002f3c:	687b      	ldr	r3, [r7, #4]
20002f3e:	2200      	movs	r2, #0
20002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
20002f44:	687b      	ldr	r3, [r7, #4]
20002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002f48:	2b00      	cmp	r3, #0
20002f4a:	d003      	beq.n	20002f54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
20002f4c:	687b      	ldr	r3, [r7, #4]
20002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002f50:	6878      	ldr	r0, [r7, #4]
20002f52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002f54:	687b      	ldr	r3, [r7, #4]
20002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002f58:	2b00      	cmp	r3, #0
20002f5a:	d032      	beq.n	20002fc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002f5c:	687b      	ldr	r3, [r7, #4]
20002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002f60:	f003 0301 	and.w	r3, r3, #1
20002f64:	2b00      	cmp	r3, #0
20002f66:	d022      	beq.n	20002fae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
20002f68:	687b      	ldr	r3, [r7, #4]
20002f6a:	2205      	movs	r2, #5
20002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
20002f70:	687b      	ldr	r3, [r7, #4]
20002f72:	681b      	ldr	r3, [r3, #0]
20002f74:	681a      	ldr	r2, [r3, #0]
20002f76:	687b      	ldr	r3, [r7, #4]
20002f78:	681b      	ldr	r3, [r3, #0]
20002f7a:	f022 0201 	bic.w	r2, r2, #1
20002f7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
20002f80:	68bb      	ldr	r3, [r7, #8]
20002f82:	3301      	adds	r3, #1
20002f84:	60bb      	str	r3, [r7, #8]
20002f86:	697a      	ldr	r2, [r7, #20]
20002f88:	429a      	cmp	r2, r3
20002f8a:	d307      	bcc.n	20002f9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
20002f8c:	687b      	ldr	r3, [r7, #4]
20002f8e:	681b      	ldr	r3, [r3, #0]
20002f90:	681b      	ldr	r3, [r3, #0]
20002f92:	f003 0301 	and.w	r3, r3, #1
20002f96:	2b00      	cmp	r3, #0
20002f98:	d1f2      	bne.n	20002f80 <HAL_DMA_IRQHandler+0x2cc>
20002f9a:	e000      	b.n	20002f9e <HAL_DMA_IRQHandler+0x2ea>
          break;
20002f9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20002f9e:	687b      	ldr	r3, [r7, #4]
20002fa0:	2201      	movs	r2, #1
20002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20002fa6:	687b      	ldr	r3, [r7, #4]
20002fa8:	2200      	movs	r2, #0
20002faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
20002fae:	687b      	ldr	r3, [r7, #4]
20002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002fb2:	2b00      	cmp	r3, #0
20002fb4:	d005      	beq.n	20002fc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
20002fb6:	687b      	ldr	r3, [r7, #4]
20002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002fba:	6878      	ldr	r0, [r7, #4]
20002fbc:	4798      	blx	r3
20002fbe:	e000      	b.n	20002fc2 <HAL_DMA_IRQHandler+0x30e>
        return;
20002fc0:	bf00      	nop
    }
  }
}
20002fc2:	3718      	adds	r7, #24
20002fc4:	46bd      	mov	sp, r7
20002fc6:	bd80      	pop	{r7, pc}

20002fc8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
20002fc8:	b480      	push	{r7}
20002fca:	b087      	sub	sp, #28
20002fcc:	af00      	add	r7, sp, #0
20002fce:	60f8      	str	r0, [r7, #12]
20002fd0:	460b      	mov	r3, r1
20002fd2:	607a      	str	r2, [r7, #4]
20002fd4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
20002fd6:	2300      	movs	r3, #0
20002fd8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
20002fda:	68fb      	ldr	r3, [r7, #12]
20002fdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002fe0:	2b01      	cmp	r3, #1
20002fe2:	d101      	bne.n	20002fe8 <HAL_DMA_RegisterCallback+0x20>
20002fe4:	2302      	movs	r3, #2
20002fe6:	e03d      	b.n	20003064 <HAL_DMA_RegisterCallback+0x9c>
20002fe8:	68fb      	ldr	r3, [r7, #12]
20002fea:	2201      	movs	r2, #1
20002fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20002ff0:	68fb      	ldr	r3, [r7, #12]
20002ff2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002ff6:	b2db      	uxtb	r3, r3
20002ff8:	2b01      	cmp	r3, #1
20002ffa:	d12c      	bne.n	20003056 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
20002ffc:	7afb      	ldrb	r3, [r7, #11]
20002ffe:	2b05      	cmp	r3, #5
20003000:	d826      	bhi.n	20003050 <HAL_DMA_RegisterCallback+0x88>
20003002:	a201      	add	r2, pc, #4	; (adr r2, 20003008 <HAL_DMA_RegisterCallback+0x40>)
20003004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003008:	20003021 	.word	0x20003021
2000300c:	20003029 	.word	0x20003029
20003010:	20003031 	.word	0x20003031
20003014:	20003039 	.word	0x20003039
20003018:	20003041 	.word	0x20003041
2000301c:	20003049 	.word	0x20003049
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
20003020:	68fb      	ldr	r3, [r7, #12]
20003022:	687a      	ldr	r2, [r7, #4]
20003024:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
20003026:	e018      	b.n	2000305a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
20003028:	68fb      	ldr	r3, [r7, #12]
2000302a:	687a      	ldr	r2, [r7, #4]
2000302c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
2000302e:	e014      	b.n	2000305a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
20003030:	68fb      	ldr	r3, [r7, #12]
20003032:	687a      	ldr	r2, [r7, #4]
20003034:	645a      	str	r2, [r3, #68]	; 0x44
      break;
20003036:	e010      	b.n	2000305a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
20003038:	68fb      	ldr	r3, [r7, #12]
2000303a:	687a      	ldr	r2, [r7, #4]
2000303c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
2000303e:	e00c      	b.n	2000305a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
20003040:	68fb      	ldr	r3, [r7, #12]
20003042:	687a      	ldr	r2, [r7, #4]
20003044:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
20003046:	e008      	b.n	2000305a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
20003048:	68fb      	ldr	r3, [r7, #12]
2000304a:	687a      	ldr	r2, [r7, #4]
2000304c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
2000304e:	e004      	b.n	2000305a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
20003050:	2301      	movs	r3, #1
20003052:	75fb      	strb	r3, [r7, #23]
      break;
20003054:	e001      	b.n	2000305a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
20003056:	2301      	movs	r3, #1
20003058:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
2000305a:	68fb      	ldr	r3, [r7, #12]
2000305c:	2200      	movs	r2, #0
2000305e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
20003062:	7dfb      	ldrb	r3, [r7, #23]
}
20003064:	4618      	mov	r0, r3
20003066:	371c      	adds	r7, #28
20003068:	46bd      	mov	sp, r7
2000306a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000306e:	4770      	bx	lr

20003070 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifier
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
20003070:	b480      	push	{r7}
20003072:	b085      	sub	sp, #20
20003074:	af00      	add	r7, sp, #0
20003076:	6078      	str	r0, [r7, #4]
20003078:	460b      	mov	r3, r1
2000307a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
2000307c:	2300      	movs	r3, #0
2000307e:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
20003080:	687b      	ldr	r3, [r7, #4]
20003082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20003086:	2b01      	cmp	r3, #1
20003088:	d101      	bne.n	2000308e <HAL_DMA_UnRegisterCallback+0x1e>
2000308a:	2302      	movs	r3, #2
2000308c:	e053      	b.n	20003136 <HAL_DMA_UnRegisterCallback+0xc6>
2000308e:	687b      	ldr	r3, [r7, #4]
20003090:	2201      	movs	r2, #1
20003092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20003096:	687b      	ldr	r3, [r7, #4]
20003098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000309c:	b2db      	uxtb	r3, r3
2000309e:	2b01      	cmp	r3, #1
200030a0:	d142      	bne.n	20003128 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
200030a2:	78fb      	ldrb	r3, [r7, #3]
200030a4:	2b06      	cmp	r3, #6
200030a6:	d83c      	bhi.n	20003122 <HAL_DMA_UnRegisterCallback+0xb2>
200030a8:	a201      	add	r2, pc, #4	; (adr r2, 200030b0 <HAL_DMA_UnRegisterCallback+0x40>)
200030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200030ae:	bf00      	nop
200030b0:	200030cd 	.word	0x200030cd
200030b4:	200030d5 	.word	0x200030d5
200030b8:	200030dd 	.word	0x200030dd
200030bc:	200030e5 	.word	0x200030e5
200030c0:	200030ed 	.word	0x200030ed
200030c4:	200030f5 	.word	0x200030f5
200030c8:	200030fd 	.word	0x200030fd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
200030cc:	687b      	ldr	r3, [r7, #4]
200030ce:	2200      	movs	r2, #0
200030d0:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
200030d2:	e02b      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
200030d4:	687b      	ldr	r3, [r7, #4]
200030d6:	2200      	movs	r2, #0
200030d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
200030da:	e027      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
200030dc:	687b      	ldr	r3, [r7, #4]
200030de:	2200      	movs	r2, #0
200030e0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
200030e2:	e023      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
200030e4:	687b      	ldr	r3, [r7, #4]
200030e6:	2200      	movs	r2, #0
200030e8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
200030ea:	e01f      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
200030ec:	687b      	ldr	r3, [r7, #4]
200030ee:	2200      	movs	r2, #0
200030f0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
200030f2:	e01b      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
200030f4:	687b      	ldr	r3, [r7, #4]
200030f6:	2200      	movs	r2, #0
200030f8:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
200030fa:	e017      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
200030fc:	687b      	ldr	r3, [r7, #4]
200030fe:	2200      	movs	r2, #0
20003100:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
20003102:	687b      	ldr	r3, [r7, #4]
20003104:	2200      	movs	r2, #0
20003106:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
20003108:	687b      	ldr	r3, [r7, #4]
2000310a:	2200      	movs	r2, #0
2000310c:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
2000310e:	687b      	ldr	r3, [r7, #4]
20003110:	2200      	movs	r2, #0
20003112:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
20003114:	687b      	ldr	r3, [r7, #4]
20003116:	2200      	movs	r2, #0
20003118:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
2000311a:	687b      	ldr	r3, [r7, #4]
2000311c:	2200      	movs	r2, #0
2000311e:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20003120:	e004      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
20003122:	2301      	movs	r3, #1
20003124:	73fb      	strb	r3, [r7, #15]
      break;
20003126:	e001      	b.n	2000312c <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
20003128:	2301      	movs	r3, #1
2000312a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
2000312c:	687b      	ldr	r3, [r7, #4]
2000312e:	2200      	movs	r2, #0
20003130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
20003134:	7bfb      	ldrb	r3, [r7, #15]
}
20003136:	4618      	mov	r0, r3
20003138:	3714      	adds	r7, #20
2000313a:	46bd      	mov	sp, r7
2000313c:	f85d 7b04 	ldr.w	r7, [sp], #4
20003140:	4770      	bx	lr
20003142:	bf00      	nop

20003144 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
20003144:	b480      	push	{r7}
20003146:	b083      	sub	sp, #12
20003148:	af00      	add	r7, sp, #0
2000314a:	6078      	str	r0, [r7, #4]
  return hdma->State;
2000314c:	687b      	ldr	r3, [r7, #4]
2000314e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20003152:	b2db      	uxtb	r3, r3
}
20003154:	4618      	mov	r0, r3
20003156:	370c      	adds	r7, #12
20003158:	46bd      	mov	sp, r7
2000315a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000315e:	4770      	bx	lr

20003160 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
20003160:	b480      	push	{r7}
20003162:	b083      	sub	sp, #12
20003164:	af00      	add	r7, sp, #0
20003166:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
20003168:	687b      	ldr	r3, [r7, #4]
2000316a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
2000316c:	4618      	mov	r0, r3
2000316e:	370c      	adds	r7, #12
20003170:	46bd      	mov	sp, r7
20003172:	f85d 7b04 	ldr.w	r7, [sp], #4
20003176:	4770      	bx	lr

20003178 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20003178:	b480      	push	{r7}
2000317a:	b085      	sub	sp, #20
2000317c:	af00      	add	r7, sp, #0
2000317e:	60f8      	str	r0, [r7, #12]
20003180:	60b9      	str	r1, [r7, #8]
20003182:	607a      	str	r2, [r7, #4]
20003184:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20003186:	68fb      	ldr	r3, [r7, #12]
20003188:	681b      	ldr	r3, [r3, #0]
2000318a:	681a      	ldr	r2, [r3, #0]
2000318c:	68fb      	ldr	r3, [r7, #12]
2000318e:	681b      	ldr	r3, [r3, #0]
20003190:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20003194:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
20003196:	68fb      	ldr	r3, [r7, #12]
20003198:	681b      	ldr	r3, [r3, #0]
2000319a:	683a      	ldr	r2, [r7, #0]
2000319c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
2000319e:	68fb      	ldr	r3, [r7, #12]
200031a0:	689b      	ldr	r3, [r3, #8]
200031a2:	2b40      	cmp	r3, #64	; 0x40
200031a4:	d108      	bne.n	200031b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
200031a6:	68fb      	ldr	r3, [r7, #12]
200031a8:	681b      	ldr	r3, [r3, #0]
200031aa:	687a      	ldr	r2, [r7, #4]
200031ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
200031ae:	68fb      	ldr	r3, [r7, #12]
200031b0:	681b      	ldr	r3, [r3, #0]
200031b2:	68ba      	ldr	r2, [r7, #8]
200031b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
200031b6:	e007      	b.n	200031c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
200031b8:	68fb      	ldr	r3, [r7, #12]
200031ba:	681b      	ldr	r3, [r3, #0]
200031bc:	68ba      	ldr	r2, [r7, #8]
200031be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
200031c0:	68fb      	ldr	r3, [r7, #12]
200031c2:	681b      	ldr	r3, [r3, #0]
200031c4:	687a      	ldr	r2, [r7, #4]
200031c6:	60da      	str	r2, [r3, #12]
}
200031c8:	bf00      	nop
200031ca:	3714      	adds	r7, #20
200031cc:	46bd      	mov	sp, r7
200031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
200031d2:	4770      	bx	lr

200031d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
200031d4:	b480      	push	{r7}
200031d6:	b085      	sub	sp, #20
200031d8:	af00      	add	r7, sp, #0
200031da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
200031dc:	687b      	ldr	r3, [r7, #4]
200031de:	681b      	ldr	r3, [r3, #0]
200031e0:	b2db      	uxtb	r3, r3
200031e2:	3b10      	subs	r3, #16
200031e4:	4a14      	ldr	r2, [pc, #80]	; (20003238 <DMA_CalcBaseAndBitshift+0x64>)
200031e6:	fba2 2303 	umull	r2, r3, r2, r3
200031ea:	091b      	lsrs	r3, r3, #4
200031ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
200031ee:	4a13      	ldr	r2, [pc, #76]	; (2000323c <DMA_CalcBaseAndBitshift+0x68>)
200031f0:	68fb      	ldr	r3, [r7, #12]
200031f2:	4413      	add	r3, r2
200031f4:	781b      	ldrb	r3, [r3, #0]
200031f6:	461a      	mov	r2, r3
200031f8:	687b      	ldr	r3, [r7, #4]
200031fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
200031fc:	68fb      	ldr	r3, [r7, #12]
200031fe:	2b03      	cmp	r3, #3
20003200:	d909      	bls.n	20003216 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20003202:	687b      	ldr	r3, [r7, #4]
20003204:	681b      	ldr	r3, [r3, #0]
20003206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
2000320a:	f023 0303 	bic.w	r3, r3, #3
2000320e:	1d1a      	adds	r2, r3, #4
20003210:	687b      	ldr	r3, [r7, #4]
20003212:	659a      	str	r2, [r3, #88]	; 0x58
20003214:	e007      	b.n	20003226 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
20003216:	687b      	ldr	r3, [r7, #4]
20003218:	681b      	ldr	r3, [r3, #0]
2000321a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
2000321e:	f023 0303 	bic.w	r3, r3, #3
20003222:	687a      	ldr	r2, [r7, #4]
20003224:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
20003226:	687b      	ldr	r3, [r7, #4]
20003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
2000322a:	4618      	mov	r0, r3
2000322c:	3714      	adds	r7, #20
2000322e:	46bd      	mov	sp, r7
20003230:	f85d 7b04 	ldr.w	r7, [sp], #4
20003234:	4770      	bx	lr
20003236:	bf00      	nop
20003238:	aaaaaaab 	.word	0xaaaaaaab
2000323c:	2000a60c 	.word	0x2000a60c

20003240 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
20003240:	b480      	push	{r7}
20003242:	b085      	sub	sp, #20
20003244:	af00      	add	r7, sp, #0
20003246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20003248:	2300      	movs	r3, #0
2000324a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
2000324c:	687b      	ldr	r3, [r7, #4]
2000324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20003250:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
20003252:	687b      	ldr	r3, [r7, #4]
20003254:	699b      	ldr	r3, [r3, #24]
20003256:	2b00      	cmp	r3, #0
20003258:	d11f      	bne.n	2000329a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
2000325a:	68bb      	ldr	r3, [r7, #8]
2000325c:	2b03      	cmp	r3, #3
2000325e:	d856      	bhi.n	2000330e <DMA_CheckFifoParam+0xce>
20003260:	a201      	add	r2, pc, #4	; (adr r2, 20003268 <DMA_CheckFifoParam+0x28>)
20003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20003266:	bf00      	nop
20003268:	20003279 	.word	0x20003279
2000326c:	2000328b 	.word	0x2000328b
20003270:	20003279 	.word	0x20003279
20003274:	2000330f 	.word	0x2000330f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20003278:	687b      	ldr	r3, [r7, #4]
2000327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000327c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20003280:	2b00      	cmp	r3, #0
20003282:	d046      	beq.n	20003312 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
20003284:	2301      	movs	r3, #1
20003286:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003288:	e043      	b.n	20003312 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
2000328a:	687b      	ldr	r3, [r7, #4]
2000328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000328e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
20003292:	d140      	bne.n	20003316 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
20003294:	2301      	movs	r3, #1
20003296:	73fb      	strb	r3, [r7, #15]
      }
      break;
20003298:	e03d      	b.n	20003316 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
2000329a:	687b      	ldr	r3, [r7, #4]
2000329c:	699b      	ldr	r3, [r3, #24]
2000329e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
200032a2:	d121      	bne.n	200032e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
200032a4:	68bb      	ldr	r3, [r7, #8]
200032a6:	2b03      	cmp	r3, #3
200032a8:	d837      	bhi.n	2000331a <DMA_CheckFifoParam+0xda>
200032aa:	a201      	add	r2, pc, #4	; (adr r2, 200032b0 <DMA_CheckFifoParam+0x70>)
200032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
200032b0:	200032c1 	.word	0x200032c1
200032b4:	200032c7 	.word	0x200032c7
200032b8:	200032c1 	.word	0x200032c1
200032bc:	200032d9 	.word	0x200032d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
200032c0:	2301      	movs	r3, #1
200032c2:	73fb      	strb	r3, [r7, #15]
      break;
200032c4:	e030      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
200032c6:	687b      	ldr	r3, [r7, #4]
200032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200032ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
200032ce:	2b00      	cmp	r3, #0
200032d0:	d025      	beq.n	2000331e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
200032d2:	2301      	movs	r3, #1
200032d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
200032d6:	e022      	b.n	2000331e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
200032d8:	687b      	ldr	r3, [r7, #4]
200032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200032dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
200032e0:	d11f      	bne.n	20003322 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
200032e2:	2301      	movs	r3, #1
200032e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
200032e6:	e01c      	b.n	20003322 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
200032e8:	68bb      	ldr	r3, [r7, #8]
200032ea:	2b02      	cmp	r3, #2
200032ec:	d903      	bls.n	200032f6 <DMA_CheckFifoParam+0xb6>
200032ee:	68bb      	ldr	r3, [r7, #8]
200032f0:	2b03      	cmp	r3, #3
200032f2:	d003      	beq.n	200032fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
200032f4:	e018      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
200032f6:	2301      	movs	r3, #1
200032f8:	73fb      	strb	r3, [r7, #15]
      break;
200032fa:	e015      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
200032fc:	687b      	ldr	r3, [r7, #4]
200032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20003300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20003304:	2b00      	cmp	r3, #0
20003306:	d00e      	beq.n	20003326 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
20003308:	2301      	movs	r3, #1
2000330a:	73fb      	strb	r3, [r7, #15]
      break;
2000330c:	e00b      	b.n	20003326 <DMA_CheckFifoParam+0xe6>
      break;
2000330e:	bf00      	nop
20003310:	e00a      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      break;
20003312:	bf00      	nop
20003314:	e008      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      break;
20003316:	bf00      	nop
20003318:	e006      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      break;
2000331a:	bf00      	nop
2000331c:	e004      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      break;
2000331e:	bf00      	nop
20003320:	e002      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      break;   
20003322:	bf00      	nop
20003324:	e000      	b.n	20003328 <DMA_CheckFifoParam+0xe8>
      break;
20003326:	bf00      	nop
    }
  } 
  
  return status; 
20003328:	7bfb      	ldrb	r3, [r7, #15]
}
2000332a:	4618      	mov	r0, r3
2000332c:	3714      	adds	r7, #20
2000332e:	46bd      	mov	sp, r7
20003330:	f85d 7b04 	ldr.w	r7, [sp], #4
20003334:	4770      	bx	lr
20003336:	bf00      	nop

20003338 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20003338:	b580      	push	{r7, lr}
2000333a:	b086      	sub	sp, #24
2000333c:	af00      	add	r7, sp, #0
2000333e:	60f8      	str	r0, [r7, #12]
20003340:	60b9      	str	r1, [r7, #8]
20003342:	607a      	str	r2, [r7, #4]
20003344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20003346:	2300      	movs	r3, #0
20003348:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
2000334a:	68fb      	ldr	r3, [r7, #12]
2000334c:	689b      	ldr	r3, [r3, #8]
2000334e:	2b80      	cmp	r3, #128	; 0x80
20003350:	d106      	bne.n	20003360 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20003352:	68fb      	ldr	r3, [r7, #12]
20003354:	f44f 7280 	mov.w	r2, #256	; 0x100
20003358:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
2000335a:	2301      	movs	r3, #1
2000335c:	75fb      	strb	r3, [r7, #23]
2000335e:	e031      	b.n	200033c4 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
20003360:	68fb      	ldr	r3, [r7, #12]
20003362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20003366:	2b01      	cmp	r3, #1
20003368:	d101      	bne.n	2000336e <HAL_DMAEx_MultiBufferStart+0x36>
2000336a:	2302      	movs	r3, #2
2000336c:	e02b      	b.n	200033c6 <HAL_DMAEx_MultiBufferStart+0x8e>
2000336e:	68fb      	ldr	r3, [r7, #12]
20003370:	2201      	movs	r2, #1
20003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
20003376:	68fb      	ldr	r3, [r7, #12]
20003378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000337c:	b2db      	uxtb	r3, r3
2000337e:	2b01      	cmp	r3, #1
20003380:	d11e      	bne.n	200033c0 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
20003382:	68fb      	ldr	r3, [r7, #12]
20003384:	2202      	movs	r2, #2
20003386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
2000338a:	68fb      	ldr	r3, [r7, #12]
2000338c:	681b      	ldr	r3, [r3, #0]
2000338e:	681a      	ldr	r2, [r3, #0]
20003390:	68fb      	ldr	r3, [r7, #12]
20003392:	681b      	ldr	r3, [r3, #0]
20003394:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
20003398:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
2000339a:	68fb      	ldr	r3, [r7, #12]
2000339c:	681b      	ldr	r3, [r3, #0]
2000339e:	683a      	ldr	r2, [r7, #0]
200033a0:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
200033a2:	6a3b      	ldr	r3, [r7, #32]
200033a4:	687a      	ldr	r2, [r7, #4]
200033a6:	68b9      	ldr	r1, [r7, #8]
200033a8:	68f8      	ldr	r0, [r7, #12]
200033aa:	f001 f973 	bl	20004694 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
200033ae:	68fb      	ldr	r3, [r7, #12]
200033b0:	681b      	ldr	r3, [r3, #0]
200033b2:	681a      	ldr	r2, [r3, #0]
200033b4:	68fb      	ldr	r3, [r7, #12]
200033b6:	681b      	ldr	r3, [r3, #0]
200033b8:	f042 0201 	orr.w	r2, r2, #1
200033bc:	601a      	str	r2, [r3, #0]
200033be:	e001      	b.n	200033c4 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
200033c0:	2302      	movs	r3, #2
200033c2:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
200033c4:	7dfb      	ldrb	r3, [r7, #23]
}
200033c6:	4618      	mov	r0, r3
200033c8:	3718      	adds	r7, #24
200033ca:	46bd      	mov	sp, r7
200033cc:	bd80      	pop	{r7, pc}
	...

200033d0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
200033d0:	b580      	push	{r7, lr}
200033d2:	b086      	sub	sp, #24
200033d4:	af00      	add	r7, sp, #0
200033d6:	60f8      	str	r0, [r7, #12]
200033d8:	60b9      	str	r1, [r7, #8]
200033da:	607a      	str	r2, [r7, #4]
200033dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200033de:	2300      	movs	r3, #0
200033e0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
200033e2:	68fb      	ldr	r3, [r7, #12]
200033e4:	689b      	ldr	r3, [r3, #8]
200033e6:	2b80      	cmp	r3, #128	; 0x80
200033e8:	d106      	bne.n	200033f8 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
200033ea:	68fb      	ldr	r3, [r7, #12]
200033ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200033f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
200033f2:	2301      	movs	r3, #1
200033f4:	f001 b911 	b.w	2000461a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
200033f8:	68fb      	ldr	r3, [r7, #12]
200033fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
200033fc:	2b00      	cmp	r3, #0
200033fe:	d007      	beq.n	20003410 <HAL_DMAEx_MultiBufferStart_IT+0x40>
20003400:	68fb      	ldr	r3, [r7, #12]
20003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20003404:	2b00      	cmp	r3, #0
20003406:	d003      	beq.n	20003410 <HAL_DMAEx_MultiBufferStart_IT+0x40>
20003408:	68fb      	ldr	r3, [r7, #12]
2000340a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000340c:	2b00      	cmp	r3, #0
2000340e:	d105      	bne.n	2000341c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
20003410:	68fb      	ldr	r3, [r7, #12]
20003412:	2240      	movs	r2, #64	; 0x40
20003414:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20003416:	2301      	movs	r3, #1
20003418:	f001 b8ff 	b.w	2000461a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
2000341c:	68fb      	ldr	r3, [r7, #12]
2000341e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20003422:	2b01      	cmp	r3, #1
20003424:	d102      	bne.n	2000342c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
20003426:	2302      	movs	r3, #2
20003428:	f001 b8f7 	b.w	2000461a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
2000342c:	68fb      	ldr	r3, [r7, #12]
2000342e:	2201      	movs	r2, #1
20003430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20003434:	68fb      	ldr	r3, [r7, #12]
20003436:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000343a:	b2db      	uxtb	r3, r3
2000343c:	2b01      	cmp	r3, #1
2000343e:	f041 80e5 	bne.w	2000460c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20003442:	68fb      	ldr	r3, [r7, #12]
20003444:	2202      	movs	r2, #2
20003446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000344a:	68fb      	ldr	r3, [r7, #12]
2000344c:	2200      	movs	r2, #0
2000344e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20003450:	68fb      	ldr	r3, [r7, #12]
20003452:	681b      	ldr	r3, [r3, #0]
20003454:	681a      	ldr	r2, [r3, #0]
20003456:	68fb      	ldr	r3, [r7, #12]
20003458:	681b      	ldr	r3, [r3, #0]
2000345a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
2000345e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
20003460:	68fb      	ldr	r3, [r7, #12]
20003462:	681b      	ldr	r3, [r3, #0]
20003464:	683a      	ldr	r2, [r7, #0]
20003466:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
20003468:	6a3b      	ldr	r3, [r7, #32]
2000346a:	687a      	ldr	r2, [r7, #4]
2000346c:	68b9      	ldr	r1, [r7, #8]
2000346e:	68f8      	ldr	r0, [r7, #12]
20003470:	f001 f910 	bl	20004694 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20003474:	68fb      	ldr	r3, [r7, #12]
20003476:	681b      	ldr	r3, [r3, #0]
20003478:	461a      	mov	r2, r3
2000347a:	4b8d      	ldr	r3, [pc, #564]	; (200036b0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
2000347c:	429a      	cmp	r2, r3
2000347e:	d960      	bls.n	20003542 <HAL_DMAEx_MultiBufferStart_IT+0x172>
20003480:	68fb      	ldr	r3, [r7, #12]
20003482:	681b      	ldr	r3, [r3, #0]
20003484:	4a8b      	ldr	r2, [pc, #556]	; (200036b4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
20003486:	4293      	cmp	r3, r2
20003488:	d057      	beq.n	2000353a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
2000348a:	68fb      	ldr	r3, [r7, #12]
2000348c:	681b      	ldr	r3, [r3, #0]
2000348e:	4a8a      	ldr	r2, [pc, #552]	; (200036b8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
20003490:	4293      	cmp	r3, r2
20003492:	d050      	beq.n	20003536 <HAL_DMAEx_MultiBufferStart_IT+0x166>
20003494:	68fb      	ldr	r3, [r7, #12]
20003496:	681b      	ldr	r3, [r3, #0]
20003498:	4a88      	ldr	r2, [pc, #544]	; (200036bc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
2000349a:	4293      	cmp	r3, r2
2000349c:	d049      	beq.n	20003532 <HAL_DMAEx_MultiBufferStart_IT+0x162>
2000349e:	68fb      	ldr	r3, [r7, #12]
200034a0:	681b      	ldr	r3, [r3, #0]
200034a2:	4a87      	ldr	r2, [pc, #540]	; (200036c0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
200034a4:	4293      	cmp	r3, r2
200034a6:	d042      	beq.n	2000352e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
200034a8:	68fb      	ldr	r3, [r7, #12]
200034aa:	681b      	ldr	r3, [r3, #0]
200034ac:	4a85      	ldr	r2, [pc, #532]	; (200036c4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
200034ae:	4293      	cmp	r3, r2
200034b0:	d03a      	beq.n	20003528 <HAL_DMAEx_MultiBufferStart_IT+0x158>
200034b2:	68fb      	ldr	r3, [r7, #12]
200034b4:	681b      	ldr	r3, [r3, #0]
200034b6:	4a84      	ldr	r2, [pc, #528]	; (200036c8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
200034b8:	4293      	cmp	r3, r2
200034ba:	d032      	beq.n	20003522 <HAL_DMAEx_MultiBufferStart_IT+0x152>
200034bc:	68fb      	ldr	r3, [r7, #12]
200034be:	681b      	ldr	r3, [r3, #0]
200034c0:	4a82      	ldr	r2, [pc, #520]	; (200036cc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
200034c2:	4293      	cmp	r3, r2
200034c4:	d02a      	beq.n	2000351c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
200034c6:	68fb      	ldr	r3, [r7, #12]
200034c8:	681b      	ldr	r3, [r3, #0]
200034ca:	4a81      	ldr	r2, [pc, #516]	; (200036d0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
200034cc:	4293      	cmp	r3, r2
200034ce:	d022      	beq.n	20003516 <HAL_DMAEx_MultiBufferStart_IT+0x146>
200034d0:	68fb      	ldr	r3, [r7, #12]
200034d2:	681b      	ldr	r3, [r3, #0]
200034d4:	4a7f      	ldr	r2, [pc, #508]	; (200036d4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
200034d6:	4293      	cmp	r3, r2
200034d8:	d01a      	beq.n	20003510 <HAL_DMAEx_MultiBufferStart_IT+0x140>
200034da:	68fb      	ldr	r3, [r7, #12]
200034dc:	681b      	ldr	r3, [r3, #0]
200034de:	4a7e      	ldr	r2, [pc, #504]	; (200036d8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
200034e0:	4293      	cmp	r3, r2
200034e2:	d012      	beq.n	2000350a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
200034e4:	68fb      	ldr	r3, [r7, #12]
200034e6:	681b      	ldr	r3, [r3, #0]
200034e8:	4a7c      	ldr	r2, [pc, #496]	; (200036dc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
200034ea:	4293      	cmp	r3, r2
200034ec:	d00a      	beq.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x134>
200034ee:	68fb      	ldr	r3, [r7, #12]
200034f0:	681b      	ldr	r3, [r3, #0]
200034f2:	4a7b      	ldr	r2, [pc, #492]	; (200036e0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
200034f4:	4293      	cmp	r3, r2
200034f6:	d102      	bne.n	200034fe <HAL_DMAEx_MultiBufferStart_IT+0x12e>
200034f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200034fc:	e01e      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200034fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003502:	e01b      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003504:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003508:	e018      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000350a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000350e:	e015      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003514:	e012      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003516:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000351a:	e00f      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000351c:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003520:	e00c      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003522:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003526:	e009      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003528:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000352c:	e006      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000352e:	2320      	movs	r3, #32
20003530:	e004      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003532:	2320      	movs	r3, #32
20003534:	e002      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003536:	2320      	movs	r3, #32
20003538:	e000      	b.n	2000353c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000353a:	2320      	movs	r3, #32
2000353c:	4a69      	ldr	r2, [pc, #420]	; (200036e4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
2000353e:	60d3      	str	r3, [r2, #12]
20003540:	e14f      	b.n	200037e2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
20003542:	68fb      	ldr	r3, [r7, #12]
20003544:	681b      	ldr	r3, [r3, #0]
20003546:	461a      	mov	r2, r3
20003548:	4b67      	ldr	r3, [pc, #412]	; (200036e8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
2000354a:	429a      	cmp	r2, r3
2000354c:	d960      	bls.n	20003610 <HAL_DMAEx_MultiBufferStart_IT+0x240>
2000354e:	68fb      	ldr	r3, [r7, #12]
20003550:	681b      	ldr	r3, [r3, #0]
20003552:	4a58      	ldr	r2, [pc, #352]	; (200036b4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
20003554:	4293      	cmp	r3, r2
20003556:	d057      	beq.n	20003608 <HAL_DMAEx_MultiBufferStart_IT+0x238>
20003558:	68fb      	ldr	r3, [r7, #12]
2000355a:	681b      	ldr	r3, [r3, #0]
2000355c:	4a56      	ldr	r2, [pc, #344]	; (200036b8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
2000355e:	4293      	cmp	r3, r2
20003560:	d050      	beq.n	20003604 <HAL_DMAEx_MultiBufferStart_IT+0x234>
20003562:	68fb      	ldr	r3, [r7, #12]
20003564:	681b      	ldr	r3, [r3, #0]
20003566:	4a55      	ldr	r2, [pc, #340]	; (200036bc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
20003568:	4293      	cmp	r3, r2
2000356a:	d049      	beq.n	20003600 <HAL_DMAEx_MultiBufferStart_IT+0x230>
2000356c:	68fb      	ldr	r3, [r7, #12]
2000356e:	681b      	ldr	r3, [r3, #0]
20003570:	4a53      	ldr	r2, [pc, #332]	; (200036c0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
20003572:	4293      	cmp	r3, r2
20003574:	d042      	beq.n	200035fc <HAL_DMAEx_MultiBufferStart_IT+0x22c>
20003576:	68fb      	ldr	r3, [r7, #12]
20003578:	681b      	ldr	r3, [r3, #0]
2000357a:	4a52      	ldr	r2, [pc, #328]	; (200036c4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
2000357c:	4293      	cmp	r3, r2
2000357e:	d03a      	beq.n	200035f6 <HAL_DMAEx_MultiBufferStart_IT+0x226>
20003580:	68fb      	ldr	r3, [r7, #12]
20003582:	681b      	ldr	r3, [r3, #0]
20003584:	4a50      	ldr	r2, [pc, #320]	; (200036c8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
20003586:	4293      	cmp	r3, r2
20003588:	d032      	beq.n	200035f0 <HAL_DMAEx_MultiBufferStart_IT+0x220>
2000358a:	68fb      	ldr	r3, [r7, #12]
2000358c:	681b      	ldr	r3, [r3, #0]
2000358e:	4a4f      	ldr	r2, [pc, #316]	; (200036cc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
20003590:	4293      	cmp	r3, r2
20003592:	d02a      	beq.n	200035ea <HAL_DMAEx_MultiBufferStart_IT+0x21a>
20003594:	68fb      	ldr	r3, [r7, #12]
20003596:	681b      	ldr	r3, [r3, #0]
20003598:	4a4d      	ldr	r2, [pc, #308]	; (200036d0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
2000359a:	4293      	cmp	r3, r2
2000359c:	d022      	beq.n	200035e4 <HAL_DMAEx_MultiBufferStart_IT+0x214>
2000359e:	68fb      	ldr	r3, [r7, #12]
200035a0:	681b      	ldr	r3, [r3, #0]
200035a2:	4a4c      	ldr	r2, [pc, #304]	; (200036d4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
200035a4:	4293      	cmp	r3, r2
200035a6:	d01a      	beq.n	200035de <HAL_DMAEx_MultiBufferStart_IT+0x20e>
200035a8:	68fb      	ldr	r3, [r7, #12]
200035aa:	681b      	ldr	r3, [r3, #0]
200035ac:	4a4a      	ldr	r2, [pc, #296]	; (200036d8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
200035ae:	4293      	cmp	r3, r2
200035b0:	d012      	beq.n	200035d8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
200035b2:	68fb      	ldr	r3, [r7, #12]
200035b4:	681b      	ldr	r3, [r3, #0]
200035b6:	4a49      	ldr	r2, [pc, #292]	; (200036dc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
200035b8:	4293      	cmp	r3, r2
200035ba:	d00a      	beq.n	200035d2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
200035bc:	68fb      	ldr	r3, [r7, #12]
200035be:	681b      	ldr	r3, [r3, #0]
200035c0:	4a47      	ldr	r2, [pc, #284]	; (200036e0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
200035c2:	4293      	cmp	r3, r2
200035c4:	d102      	bne.n	200035cc <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
200035c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200035ca:	e01e      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200035d0:	e01b      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200035d6:	e018      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200035dc:	e015      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200035e2:	e012      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
200035e8:	e00f      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
200035ee:	e00c      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
200035f4:	e009      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
200035fa:	e006      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
200035fc:	2320      	movs	r3, #32
200035fe:	e004      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003600:	2320      	movs	r3, #32
20003602:	e002      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003604:	2320      	movs	r3, #32
20003606:	e000      	b.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003608:	2320      	movs	r3, #32
2000360a:	4a36      	ldr	r2, [pc, #216]	; (200036e4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
2000360c:	6093      	str	r3, [r2, #8]
2000360e:	e0e8      	b.n	200037e2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
20003610:	68fb      	ldr	r3, [r7, #12]
20003612:	681b      	ldr	r3, [r3, #0]
20003614:	461a      	mov	r2, r3
20003616:	4b35      	ldr	r3, [pc, #212]	; (200036ec <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
20003618:	429a      	cmp	r2, r3
2000361a:	f240 8082 	bls.w	20003722 <HAL_DMAEx_MultiBufferStart_IT+0x352>
2000361e:	68fb      	ldr	r3, [r7, #12]
20003620:	681b      	ldr	r3, [r3, #0]
20003622:	4a24      	ldr	r2, [pc, #144]	; (200036b4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
20003624:	4293      	cmp	r3, r2
20003626:	d078      	beq.n	2000371a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
20003628:	68fb      	ldr	r3, [r7, #12]
2000362a:	681b      	ldr	r3, [r3, #0]
2000362c:	4a22      	ldr	r2, [pc, #136]	; (200036b8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
2000362e:	4293      	cmp	r3, r2
20003630:	d071      	beq.n	20003716 <HAL_DMAEx_MultiBufferStart_IT+0x346>
20003632:	68fb      	ldr	r3, [r7, #12]
20003634:	681b      	ldr	r3, [r3, #0]
20003636:	4a21      	ldr	r2, [pc, #132]	; (200036bc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
20003638:	4293      	cmp	r3, r2
2000363a:	d06a      	beq.n	20003712 <HAL_DMAEx_MultiBufferStart_IT+0x342>
2000363c:	68fb      	ldr	r3, [r7, #12]
2000363e:	681b      	ldr	r3, [r3, #0]
20003640:	4a1f      	ldr	r2, [pc, #124]	; (200036c0 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
20003642:	4293      	cmp	r3, r2
20003644:	d063      	beq.n	2000370e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
20003646:	68fb      	ldr	r3, [r7, #12]
20003648:	681b      	ldr	r3, [r3, #0]
2000364a:	4a1e      	ldr	r2, [pc, #120]	; (200036c4 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
2000364c:	4293      	cmp	r3, r2
2000364e:	d05b      	beq.n	20003708 <HAL_DMAEx_MultiBufferStart_IT+0x338>
20003650:	68fb      	ldr	r3, [r7, #12]
20003652:	681b      	ldr	r3, [r3, #0]
20003654:	4a1c      	ldr	r2, [pc, #112]	; (200036c8 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
20003656:	4293      	cmp	r3, r2
20003658:	d053      	beq.n	20003702 <HAL_DMAEx_MultiBufferStart_IT+0x332>
2000365a:	68fb      	ldr	r3, [r7, #12]
2000365c:	681b      	ldr	r3, [r3, #0]
2000365e:	4a1b      	ldr	r2, [pc, #108]	; (200036cc <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
20003660:	4293      	cmp	r3, r2
20003662:	d04b      	beq.n	200036fc <HAL_DMAEx_MultiBufferStart_IT+0x32c>
20003664:	68fb      	ldr	r3, [r7, #12]
20003666:	681b      	ldr	r3, [r3, #0]
20003668:	4a19      	ldr	r2, [pc, #100]	; (200036d0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
2000366a:	4293      	cmp	r3, r2
2000366c:	d043      	beq.n	200036f6 <HAL_DMAEx_MultiBufferStart_IT+0x326>
2000366e:	68fb      	ldr	r3, [r7, #12]
20003670:	681b      	ldr	r3, [r3, #0]
20003672:	4a18      	ldr	r2, [pc, #96]	; (200036d4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
20003674:	4293      	cmp	r3, r2
20003676:	d03b      	beq.n	200036f0 <HAL_DMAEx_MultiBufferStart_IT+0x320>
20003678:	68fb      	ldr	r3, [r7, #12]
2000367a:	681b      	ldr	r3, [r3, #0]
2000367c:	4a16      	ldr	r2, [pc, #88]	; (200036d8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
2000367e:	4293      	cmp	r3, r2
20003680:	d012      	beq.n	200036a8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
20003682:	68fb      	ldr	r3, [r7, #12]
20003684:	681b      	ldr	r3, [r3, #0]
20003686:	4a15      	ldr	r2, [pc, #84]	; (200036dc <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
20003688:	4293      	cmp	r3, r2
2000368a:	d00a      	beq.n	200036a2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
2000368c:	68fb      	ldr	r3, [r7, #12]
2000368e:	681b      	ldr	r3, [r3, #0]
20003690:	4a13      	ldr	r2, [pc, #76]	; (200036e0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
20003692:	4293      	cmp	r3, r2
20003694:	d102      	bne.n	2000369c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
20003696:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000369a:	e03f      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000369c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200036a0:	e03c      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200036a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200036a6:	e039      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200036a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200036ac:	e036      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200036ae:	bf00      	nop
200036b0:	40026458 	.word	0x40026458
200036b4:	40026010 	.word	0x40026010
200036b8:	40026410 	.word	0x40026410
200036bc:	40026070 	.word	0x40026070
200036c0:	40026470 	.word	0x40026470
200036c4:	40026028 	.word	0x40026028
200036c8:	40026428 	.word	0x40026428
200036cc:	40026088 	.word	0x40026088
200036d0:	40026488 	.word	0x40026488
200036d4:	40026040 	.word	0x40026040
200036d8:	40026440 	.word	0x40026440
200036dc:	400260a0 	.word	0x400260a0
200036e0:	400264a0 	.word	0x400264a0
200036e4:	40026400 	.word	0x40026400
200036e8:	400260b8 	.word	0x400260b8
200036ec:	40026058 	.word	0x40026058
200036f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200036f4:	e012      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200036f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
200036fa:	e00f      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
200036fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003700:	e00c      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003702:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003706:	e009      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003708:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000370c:	e006      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000370e:	2320      	movs	r3, #32
20003710:	e004      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003712:	2320      	movs	r3, #32
20003714:	e002      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
20003716:	2320      	movs	r3, #32
20003718:	e000      	b.n	2000371c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
2000371a:	2320      	movs	r3, #32
2000371c:	4a8c      	ldr	r2, [pc, #560]	; (20003950 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
2000371e:	60d3      	str	r3, [r2, #12]
20003720:	e05f      	b.n	200037e2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
20003722:	68fb      	ldr	r3, [r7, #12]
20003724:	681b      	ldr	r3, [r3, #0]
20003726:	4a8b      	ldr	r2, [pc, #556]	; (20003954 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
20003728:	4293      	cmp	r3, r2
2000372a:	d057      	beq.n	200037dc <HAL_DMAEx_MultiBufferStart_IT+0x40c>
2000372c:	68fb      	ldr	r3, [r7, #12]
2000372e:	681b      	ldr	r3, [r3, #0]
20003730:	4a89      	ldr	r2, [pc, #548]	; (20003958 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
20003732:	4293      	cmp	r3, r2
20003734:	d050      	beq.n	200037d8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
20003736:	68fb      	ldr	r3, [r7, #12]
20003738:	681b      	ldr	r3, [r3, #0]
2000373a:	4a88      	ldr	r2, [pc, #544]	; (2000395c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
2000373c:	4293      	cmp	r3, r2
2000373e:	d049      	beq.n	200037d4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
20003740:	68fb      	ldr	r3, [r7, #12]
20003742:	681b      	ldr	r3, [r3, #0]
20003744:	4a86      	ldr	r2, [pc, #536]	; (20003960 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
20003746:	4293      	cmp	r3, r2
20003748:	d042      	beq.n	200037d0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
2000374a:	68fb      	ldr	r3, [r7, #12]
2000374c:	681b      	ldr	r3, [r3, #0]
2000374e:	4a85      	ldr	r2, [pc, #532]	; (20003964 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
20003750:	4293      	cmp	r3, r2
20003752:	d03a      	beq.n	200037ca <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
20003754:	68fb      	ldr	r3, [r7, #12]
20003756:	681b      	ldr	r3, [r3, #0]
20003758:	4a83      	ldr	r2, [pc, #524]	; (20003968 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
2000375a:	4293      	cmp	r3, r2
2000375c:	d032      	beq.n	200037c4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
2000375e:	68fb      	ldr	r3, [r7, #12]
20003760:	681b      	ldr	r3, [r3, #0]
20003762:	4a82      	ldr	r2, [pc, #520]	; (2000396c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
20003764:	4293      	cmp	r3, r2
20003766:	d02a      	beq.n	200037be <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
20003768:	68fb      	ldr	r3, [r7, #12]
2000376a:	681b      	ldr	r3, [r3, #0]
2000376c:	4a80      	ldr	r2, [pc, #512]	; (20003970 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
2000376e:	4293      	cmp	r3, r2
20003770:	d022      	beq.n	200037b8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
20003772:	68fb      	ldr	r3, [r7, #12]
20003774:	681b      	ldr	r3, [r3, #0]
20003776:	4a7f      	ldr	r2, [pc, #508]	; (20003974 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
20003778:	4293      	cmp	r3, r2
2000377a:	d01a      	beq.n	200037b2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
2000377c:	68fb      	ldr	r3, [r7, #12]
2000377e:	681b      	ldr	r3, [r3, #0]
20003780:	4a7d      	ldr	r2, [pc, #500]	; (20003978 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
20003782:	4293      	cmp	r3, r2
20003784:	d012      	beq.n	200037ac <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
20003786:	68fb      	ldr	r3, [r7, #12]
20003788:	681b      	ldr	r3, [r3, #0]
2000378a:	4a7c      	ldr	r2, [pc, #496]	; (2000397c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
2000378c:	4293      	cmp	r3, r2
2000378e:	d00a      	beq.n	200037a6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
20003790:	68fb      	ldr	r3, [r7, #12]
20003792:	681b      	ldr	r3, [r3, #0]
20003794:	4a7a      	ldr	r2, [pc, #488]	; (20003980 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
20003796:	4293      	cmp	r3, r2
20003798:	d102      	bne.n	200037a0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
2000379a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000379e:	e01e      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
200037a4:	e01b      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200037aa:	e018      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200037b0:	e015      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
200037b6:	e012      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
200037bc:	e00f      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037be:	f44f 6300 	mov.w	r3, #2048	; 0x800
200037c2:	e00c      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
200037c8:	e009      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
200037ce:	e006      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037d0:	2320      	movs	r3, #32
200037d2:	e004      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037d4:	2320      	movs	r3, #32
200037d6:	e002      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037d8:	2320      	movs	r3, #32
200037da:	e000      	b.n	200037de <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200037dc:	2320      	movs	r3, #32
200037de:	4a5c      	ldr	r2, [pc, #368]	; (20003950 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
200037e0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
200037e2:	68fb      	ldr	r3, [r7, #12]
200037e4:	681b      	ldr	r3, [r3, #0]
200037e6:	461a      	mov	r2, r3
200037e8:	4b66      	ldr	r3, [pc, #408]	; (20003984 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
200037ea:	429a      	cmp	r2, r3
200037ec:	d960      	bls.n	200038b0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
200037ee:	68fb      	ldr	r3, [r7, #12]
200037f0:	681b      	ldr	r3, [r3, #0]
200037f2:	4a58      	ldr	r2, [pc, #352]	; (20003954 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
200037f4:	4293      	cmp	r3, r2
200037f6:	d057      	beq.n	200038a8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
200037f8:	68fb      	ldr	r3, [r7, #12]
200037fa:	681b      	ldr	r3, [r3, #0]
200037fc:	4a56      	ldr	r2, [pc, #344]	; (20003958 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
200037fe:	4293      	cmp	r3, r2
20003800:	d050      	beq.n	200038a4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
20003802:	68fb      	ldr	r3, [r7, #12]
20003804:	681b      	ldr	r3, [r3, #0]
20003806:	4a55      	ldr	r2, [pc, #340]	; (2000395c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
20003808:	4293      	cmp	r3, r2
2000380a:	d049      	beq.n	200038a0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
2000380c:	68fb      	ldr	r3, [r7, #12]
2000380e:	681b      	ldr	r3, [r3, #0]
20003810:	4a53      	ldr	r2, [pc, #332]	; (20003960 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
20003812:	4293      	cmp	r3, r2
20003814:	d042      	beq.n	2000389c <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
20003816:	68fb      	ldr	r3, [r7, #12]
20003818:	681b      	ldr	r3, [r3, #0]
2000381a:	4a52      	ldr	r2, [pc, #328]	; (20003964 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
2000381c:	4293      	cmp	r3, r2
2000381e:	d03a      	beq.n	20003896 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
20003820:	68fb      	ldr	r3, [r7, #12]
20003822:	681b      	ldr	r3, [r3, #0]
20003824:	4a50      	ldr	r2, [pc, #320]	; (20003968 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
20003826:	4293      	cmp	r3, r2
20003828:	d032      	beq.n	20003890 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
2000382a:	68fb      	ldr	r3, [r7, #12]
2000382c:	681b      	ldr	r3, [r3, #0]
2000382e:	4a4f      	ldr	r2, [pc, #316]	; (2000396c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
20003830:	4293      	cmp	r3, r2
20003832:	d02a      	beq.n	2000388a <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
20003834:	68fb      	ldr	r3, [r7, #12]
20003836:	681b      	ldr	r3, [r3, #0]
20003838:	4a4d      	ldr	r2, [pc, #308]	; (20003970 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
2000383a:	4293      	cmp	r3, r2
2000383c:	d022      	beq.n	20003884 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
2000383e:	68fb      	ldr	r3, [r7, #12]
20003840:	681b      	ldr	r3, [r3, #0]
20003842:	4a4c      	ldr	r2, [pc, #304]	; (20003974 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
20003844:	4293      	cmp	r3, r2
20003846:	d01a      	beq.n	2000387e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
20003848:	68fb      	ldr	r3, [r7, #12]
2000384a:	681b      	ldr	r3, [r3, #0]
2000384c:	4a4a      	ldr	r2, [pc, #296]	; (20003978 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
2000384e:	4293      	cmp	r3, r2
20003850:	d012      	beq.n	20003878 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
20003852:	68fb      	ldr	r3, [r7, #12]
20003854:	681b      	ldr	r3, [r3, #0]
20003856:	4a49      	ldr	r2, [pc, #292]	; (2000397c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
20003858:	4293      	cmp	r3, r2
2000385a:	d00a      	beq.n	20003872 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
2000385c:	68fb      	ldr	r3, [r7, #12]
2000385e:	681b      	ldr	r3, [r3, #0]
20003860:	4a47      	ldr	r2, [pc, #284]	; (20003980 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
20003862:	4293      	cmp	r3, r2
20003864:	d102      	bne.n	2000386c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
20003866:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2000386a:	e01e      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000386c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003870:	e01b      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003872:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003876:	e018      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003878:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2000387c:	e015      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000387e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003882:	e012      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003884:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003888:	e00f      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000388a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000388e:	e00c      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003890:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003894:	e009      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003896:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000389a:	e006      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
2000389c:	2310      	movs	r3, #16
2000389e:	e004      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
200038a0:	2310      	movs	r3, #16
200038a2:	e002      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
200038a4:	2310      	movs	r3, #16
200038a6:	e000      	b.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x4da>
200038a8:	2310      	movs	r3, #16
200038aa:	4a37      	ldr	r2, [pc, #220]	; (20003988 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
200038ac:	60d3      	str	r3, [r2, #12]
200038ae:	e14f      	b.n	20003b50 <HAL_DMAEx_MultiBufferStart_IT+0x780>
200038b0:	68fb      	ldr	r3, [r7, #12]
200038b2:	681b      	ldr	r3, [r3, #0]
200038b4:	461a      	mov	r2, r3
200038b6:	4b35      	ldr	r3, [pc, #212]	; (2000398c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
200038b8:	429a      	cmp	r2, r3
200038ba:	f240 8082 	bls.w	200039c2 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
200038be:	68fb      	ldr	r3, [r7, #12]
200038c0:	681b      	ldr	r3, [r3, #0]
200038c2:	4a24      	ldr	r2, [pc, #144]	; (20003954 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
200038c4:	4293      	cmp	r3, r2
200038c6:	d078      	beq.n	200039ba <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
200038c8:	68fb      	ldr	r3, [r7, #12]
200038ca:	681b      	ldr	r3, [r3, #0]
200038cc:	4a22      	ldr	r2, [pc, #136]	; (20003958 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
200038ce:	4293      	cmp	r3, r2
200038d0:	d071      	beq.n	200039b6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
200038d2:	68fb      	ldr	r3, [r7, #12]
200038d4:	681b      	ldr	r3, [r3, #0]
200038d6:	4a21      	ldr	r2, [pc, #132]	; (2000395c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
200038d8:	4293      	cmp	r3, r2
200038da:	d06a      	beq.n	200039b2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
200038dc:	68fb      	ldr	r3, [r7, #12]
200038de:	681b      	ldr	r3, [r3, #0]
200038e0:	4a1f      	ldr	r2, [pc, #124]	; (20003960 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
200038e2:	4293      	cmp	r3, r2
200038e4:	d063      	beq.n	200039ae <HAL_DMAEx_MultiBufferStart_IT+0x5de>
200038e6:	68fb      	ldr	r3, [r7, #12]
200038e8:	681b      	ldr	r3, [r3, #0]
200038ea:	4a1e      	ldr	r2, [pc, #120]	; (20003964 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
200038ec:	4293      	cmp	r3, r2
200038ee:	d05b      	beq.n	200039a8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
200038f0:	68fb      	ldr	r3, [r7, #12]
200038f2:	681b      	ldr	r3, [r3, #0]
200038f4:	4a1c      	ldr	r2, [pc, #112]	; (20003968 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
200038f6:	4293      	cmp	r3, r2
200038f8:	d053      	beq.n	200039a2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
200038fa:	68fb      	ldr	r3, [r7, #12]
200038fc:	681b      	ldr	r3, [r3, #0]
200038fe:	4a1b      	ldr	r2, [pc, #108]	; (2000396c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
20003900:	4293      	cmp	r3, r2
20003902:	d04b      	beq.n	2000399c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
20003904:	68fb      	ldr	r3, [r7, #12]
20003906:	681b      	ldr	r3, [r3, #0]
20003908:	4a19      	ldr	r2, [pc, #100]	; (20003970 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
2000390a:	4293      	cmp	r3, r2
2000390c:	d043      	beq.n	20003996 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
2000390e:	68fb      	ldr	r3, [r7, #12]
20003910:	681b      	ldr	r3, [r3, #0]
20003912:	4a18      	ldr	r2, [pc, #96]	; (20003974 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
20003914:	4293      	cmp	r3, r2
20003916:	d03b      	beq.n	20003990 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
20003918:	68fb      	ldr	r3, [r7, #12]
2000391a:	681b      	ldr	r3, [r3, #0]
2000391c:	4a16      	ldr	r2, [pc, #88]	; (20003978 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
2000391e:	4293      	cmp	r3, r2
20003920:	d012      	beq.n	20003948 <HAL_DMAEx_MultiBufferStart_IT+0x578>
20003922:	68fb      	ldr	r3, [r7, #12]
20003924:	681b      	ldr	r3, [r3, #0]
20003926:	4a15      	ldr	r2, [pc, #84]	; (2000397c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
20003928:	4293      	cmp	r3, r2
2000392a:	d00a      	beq.n	20003942 <HAL_DMAEx_MultiBufferStart_IT+0x572>
2000392c:	68fb      	ldr	r3, [r7, #12]
2000392e:	681b      	ldr	r3, [r3, #0]
20003930:	4a13      	ldr	r2, [pc, #76]	; (20003980 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
20003932:	4293      	cmp	r3, r2
20003934:	d102      	bne.n	2000393c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
20003936:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2000393a:	e03f      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
2000393c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003940:	e03c      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003942:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003946:	e039      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003948:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2000394c:	e036      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
2000394e:	bf00      	nop
20003950:	40026000 	.word	0x40026000
20003954:	40026010 	.word	0x40026010
20003958:	40026410 	.word	0x40026410
2000395c:	40026070 	.word	0x40026070
20003960:	40026470 	.word	0x40026470
20003964:	40026028 	.word	0x40026028
20003968:	40026428 	.word	0x40026428
2000396c:	40026088 	.word	0x40026088
20003970:	40026488 	.word	0x40026488
20003974:	40026040 	.word	0x40026040
20003978:	40026440 	.word	0x40026440
2000397c:	400260a0 	.word	0x400260a0
20003980:	400264a0 	.word	0x400264a0
20003984:	40026458 	.word	0x40026458
20003988:	40026400 	.word	0x40026400
2000398c:	400260b8 	.word	0x400260b8
20003990:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003994:	e012      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
20003996:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000399a:	e00f      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
2000399c:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039a0:	e00c      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039a6:	e009      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
200039ac:	e006      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039ae:	2310      	movs	r3, #16
200039b0:	e004      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039b2:	2310      	movs	r3, #16
200039b4:	e002      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039b6:	2310      	movs	r3, #16
200039b8:	e000      	b.n	200039bc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
200039ba:	2310      	movs	r3, #16
200039bc:	4a8c      	ldr	r2, [pc, #560]	; (20003bf0 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
200039be:	6093      	str	r3, [r2, #8]
200039c0:	e0c6      	b.n	20003b50 <HAL_DMAEx_MultiBufferStart_IT+0x780>
200039c2:	68fb      	ldr	r3, [r7, #12]
200039c4:	681b      	ldr	r3, [r3, #0]
200039c6:	461a      	mov	r2, r3
200039c8:	4b8a      	ldr	r3, [pc, #552]	; (20003bf4 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
200039ca:	429a      	cmp	r2, r3
200039cc:	d960      	bls.n	20003a90 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
200039ce:	68fb      	ldr	r3, [r7, #12]
200039d0:	681b      	ldr	r3, [r3, #0]
200039d2:	4a89      	ldr	r2, [pc, #548]	; (20003bf8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
200039d4:	4293      	cmp	r3, r2
200039d6:	d057      	beq.n	20003a88 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
200039d8:	68fb      	ldr	r3, [r7, #12]
200039da:	681b      	ldr	r3, [r3, #0]
200039dc:	4a87      	ldr	r2, [pc, #540]	; (20003bfc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
200039de:	4293      	cmp	r3, r2
200039e0:	d050      	beq.n	20003a84 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
200039e2:	68fb      	ldr	r3, [r7, #12]
200039e4:	681b      	ldr	r3, [r3, #0]
200039e6:	4a86      	ldr	r2, [pc, #536]	; (20003c00 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
200039e8:	4293      	cmp	r3, r2
200039ea:	d049      	beq.n	20003a80 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
200039ec:	68fb      	ldr	r3, [r7, #12]
200039ee:	681b      	ldr	r3, [r3, #0]
200039f0:	4a84      	ldr	r2, [pc, #528]	; (20003c04 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
200039f2:	4293      	cmp	r3, r2
200039f4:	d042      	beq.n	20003a7c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
200039f6:	68fb      	ldr	r3, [r7, #12]
200039f8:	681b      	ldr	r3, [r3, #0]
200039fa:	4a83      	ldr	r2, [pc, #524]	; (20003c08 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
200039fc:	4293      	cmp	r3, r2
200039fe:	d03a      	beq.n	20003a76 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
20003a00:	68fb      	ldr	r3, [r7, #12]
20003a02:	681b      	ldr	r3, [r3, #0]
20003a04:	4a81      	ldr	r2, [pc, #516]	; (20003c0c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003a06:	4293      	cmp	r3, r2
20003a08:	d032      	beq.n	20003a70 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
20003a0a:	68fb      	ldr	r3, [r7, #12]
20003a0c:	681b      	ldr	r3, [r3, #0]
20003a0e:	4a80      	ldr	r2, [pc, #512]	; (20003c10 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003a10:	4293      	cmp	r3, r2
20003a12:	d02a      	beq.n	20003a6a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
20003a14:	68fb      	ldr	r3, [r7, #12]
20003a16:	681b      	ldr	r3, [r3, #0]
20003a18:	4a7e      	ldr	r2, [pc, #504]	; (20003c14 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003a1a:	4293      	cmp	r3, r2
20003a1c:	d022      	beq.n	20003a64 <HAL_DMAEx_MultiBufferStart_IT+0x694>
20003a1e:	68fb      	ldr	r3, [r7, #12]
20003a20:	681b      	ldr	r3, [r3, #0]
20003a22:	4a7d      	ldr	r2, [pc, #500]	; (20003c18 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003a24:	4293      	cmp	r3, r2
20003a26:	d01a      	beq.n	20003a5e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
20003a28:	68fb      	ldr	r3, [r7, #12]
20003a2a:	681b      	ldr	r3, [r3, #0]
20003a2c:	4a7b      	ldr	r2, [pc, #492]	; (20003c1c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003a2e:	4293      	cmp	r3, r2
20003a30:	d012      	beq.n	20003a58 <HAL_DMAEx_MultiBufferStart_IT+0x688>
20003a32:	68fb      	ldr	r3, [r7, #12]
20003a34:	681b      	ldr	r3, [r3, #0]
20003a36:	4a7a      	ldr	r2, [pc, #488]	; (20003c20 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003a38:	4293      	cmp	r3, r2
20003a3a:	d00a      	beq.n	20003a52 <HAL_DMAEx_MultiBufferStart_IT+0x682>
20003a3c:	68fb      	ldr	r3, [r7, #12]
20003a3e:	681b      	ldr	r3, [r3, #0]
20003a40:	4a78      	ldr	r2, [pc, #480]	; (20003c24 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003a42:	4293      	cmp	r3, r2
20003a44:	d102      	bne.n	20003a4c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
20003a46:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003a4a:	e01e      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003a50:	e01b      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003a56:	e018      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003a5c:	e015      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003a62:	e012      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003a68:	e00f      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003a6e:	e00c      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003a74:	e009      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003a7a:	e006      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a7c:	2310      	movs	r3, #16
20003a7e:	e004      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a80:	2310      	movs	r3, #16
20003a82:	e002      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a84:	2310      	movs	r3, #16
20003a86:	e000      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003a88:	2310      	movs	r3, #16
20003a8a:	4a67      	ldr	r2, [pc, #412]	; (20003c28 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003a8c:	60d3      	str	r3, [r2, #12]
20003a8e:	e05f      	b.n	20003b50 <HAL_DMAEx_MultiBufferStart_IT+0x780>
20003a90:	68fb      	ldr	r3, [r7, #12]
20003a92:	681b      	ldr	r3, [r3, #0]
20003a94:	4a58      	ldr	r2, [pc, #352]	; (20003bf8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003a96:	4293      	cmp	r3, r2
20003a98:	d057      	beq.n	20003b4a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
20003a9a:	68fb      	ldr	r3, [r7, #12]
20003a9c:	681b      	ldr	r3, [r3, #0]
20003a9e:	4a57      	ldr	r2, [pc, #348]	; (20003bfc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
20003aa0:	4293      	cmp	r3, r2
20003aa2:	d050      	beq.n	20003b46 <HAL_DMAEx_MultiBufferStart_IT+0x776>
20003aa4:	68fb      	ldr	r3, [r7, #12]
20003aa6:	681b      	ldr	r3, [r3, #0]
20003aa8:	4a55      	ldr	r2, [pc, #340]	; (20003c00 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003aaa:	4293      	cmp	r3, r2
20003aac:	d049      	beq.n	20003b42 <HAL_DMAEx_MultiBufferStart_IT+0x772>
20003aae:	68fb      	ldr	r3, [r7, #12]
20003ab0:	681b      	ldr	r3, [r3, #0]
20003ab2:	4a54      	ldr	r2, [pc, #336]	; (20003c04 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003ab4:	4293      	cmp	r3, r2
20003ab6:	d042      	beq.n	20003b3e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
20003ab8:	68fb      	ldr	r3, [r7, #12]
20003aba:	681b      	ldr	r3, [r3, #0]
20003abc:	4a52      	ldr	r2, [pc, #328]	; (20003c08 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003abe:	4293      	cmp	r3, r2
20003ac0:	d03a      	beq.n	20003b38 <HAL_DMAEx_MultiBufferStart_IT+0x768>
20003ac2:	68fb      	ldr	r3, [r7, #12]
20003ac4:	681b      	ldr	r3, [r3, #0]
20003ac6:	4a51      	ldr	r2, [pc, #324]	; (20003c0c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003ac8:	4293      	cmp	r3, r2
20003aca:	d032      	beq.n	20003b32 <HAL_DMAEx_MultiBufferStart_IT+0x762>
20003acc:	68fb      	ldr	r3, [r7, #12]
20003ace:	681b      	ldr	r3, [r3, #0]
20003ad0:	4a4f      	ldr	r2, [pc, #316]	; (20003c10 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003ad2:	4293      	cmp	r3, r2
20003ad4:	d02a      	beq.n	20003b2c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
20003ad6:	68fb      	ldr	r3, [r7, #12]
20003ad8:	681b      	ldr	r3, [r3, #0]
20003ada:	4a4e      	ldr	r2, [pc, #312]	; (20003c14 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003adc:	4293      	cmp	r3, r2
20003ade:	d022      	beq.n	20003b26 <HAL_DMAEx_MultiBufferStart_IT+0x756>
20003ae0:	68fb      	ldr	r3, [r7, #12]
20003ae2:	681b      	ldr	r3, [r3, #0]
20003ae4:	4a4c      	ldr	r2, [pc, #304]	; (20003c18 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003ae6:	4293      	cmp	r3, r2
20003ae8:	d01a      	beq.n	20003b20 <HAL_DMAEx_MultiBufferStart_IT+0x750>
20003aea:	68fb      	ldr	r3, [r7, #12]
20003aec:	681b      	ldr	r3, [r3, #0]
20003aee:	4a4b      	ldr	r2, [pc, #300]	; (20003c1c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003af0:	4293      	cmp	r3, r2
20003af2:	d012      	beq.n	20003b1a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
20003af4:	68fb      	ldr	r3, [r7, #12]
20003af6:	681b      	ldr	r3, [r3, #0]
20003af8:	4a49      	ldr	r2, [pc, #292]	; (20003c20 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003afa:	4293      	cmp	r3, r2
20003afc:	d00a      	beq.n	20003b14 <HAL_DMAEx_MultiBufferStart_IT+0x744>
20003afe:	68fb      	ldr	r3, [r7, #12]
20003b00:	681b      	ldr	r3, [r3, #0]
20003b02:	4a48      	ldr	r2, [pc, #288]	; (20003c24 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003b04:	4293      	cmp	r3, r2
20003b06:	d102      	bne.n	20003b0e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
20003b08:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b0c:	e01e      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b0e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
20003b12:	e01b      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b18:	e018      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b1e:	e015      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003b24:	e012      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b2a:	e00f      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b30:	e00c      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b36:	e009      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003b3c:	e006      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b3e:	2310      	movs	r3, #16
20003b40:	e004      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b42:	2310      	movs	r3, #16
20003b44:	e002      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b46:	2310      	movs	r3, #16
20003b48:	e000      	b.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003b4a:	2310      	movs	r3, #16
20003b4c:	4a36      	ldr	r2, [pc, #216]	; (20003c28 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003b4e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
20003b50:	68fb      	ldr	r3, [r7, #12]
20003b52:	681b      	ldr	r3, [r3, #0]
20003b54:	461a      	mov	r2, r3
20003b56:	4b35      	ldr	r3, [pc, #212]	; (20003c2c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
20003b58:	429a      	cmp	r2, r3
20003b5a:	f240 8082 	bls.w	20003c62 <HAL_DMAEx_MultiBufferStart_IT+0x892>
20003b5e:	68fb      	ldr	r3, [r7, #12]
20003b60:	681b      	ldr	r3, [r3, #0]
20003b62:	4a25      	ldr	r2, [pc, #148]	; (20003bf8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
20003b64:	4293      	cmp	r3, r2
20003b66:	d078      	beq.n	20003c5a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
20003b68:	68fb      	ldr	r3, [r7, #12]
20003b6a:	681b      	ldr	r3, [r3, #0]
20003b6c:	4a23      	ldr	r2, [pc, #140]	; (20003bfc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
20003b6e:	4293      	cmp	r3, r2
20003b70:	d071      	beq.n	20003c56 <HAL_DMAEx_MultiBufferStart_IT+0x886>
20003b72:	68fb      	ldr	r3, [r7, #12]
20003b74:	681b      	ldr	r3, [r3, #0]
20003b76:	4a22      	ldr	r2, [pc, #136]	; (20003c00 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
20003b78:	4293      	cmp	r3, r2
20003b7a:	d06a      	beq.n	20003c52 <HAL_DMAEx_MultiBufferStart_IT+0x882>
20003b7c:	68fb      	ldr	r3, [r7, #12]
20003b7e:	681b      	ldr	r3, [r3, #0]
20003b80:	4a20      	ldr	r2, [pc, #128]	; (20003c04 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
20003b82:	4293      	cmp	r3, r2
20003b84:	d063      	beq.n	20003c4e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
20003b86:	68fb      	ldr	r3, [r7, #12]
20003b88:	681b      	ldr	r3, [r3, #0]
20003b8a:	4a1f      	ldr	r2, [pc, #124]	; (20003c08 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
20003b8c:	4293      	cmp	r3, r2
20003b8e:	d05b      	beq.n	20003c48 <HAL_DMAEx_MultiBufferStart_IT+0x878>
20003b90:	68fb      	ldr	r3, [r7, #12]
20003b92:	681b      	ldr	r3, [r3, #0]
20003b94:	4a1d      	ldr	r2, [pc, #116]	; (20003c0c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
20003b96:	4293      	cmp	r3, r2
20003b98:	d053      	beq.n	20003c42 <HAL_DMAEx_MultiBufferStart_IT+0x872>
20003b9a:	68fb      	ldr	r3, [r7, #12]
20003b9c:	681b      	ldr	r3, [r3, #0]
20003b9e:	4a1c      	ldr	r2, [pc, #112]	; (20003c10 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
20003ba0:	4293      	cmp	r3, r2
20003ba2:	d04b      	beq.n	20003c3c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
20003ba4:	68fb      	ldr	r3, [r7, #12]
20003ba6:	681b      	ldr	r3, [r3, #0]
20003ba8:	4a1a      	ldr	r2, [pc, #104]	; (20003c14 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
20003baa:	4293      	cmp	r3, r2
20003bac:	d043      	beq.n	20003c36 <HAL_DMAEx_MultiBufferStart_IT+0x866>
20003bae:	68fb      	ldr	r3, [r7, #12]
20003bb0:	681b      	ldr	r3, [r3, #0]
20003bb2:	4a19      	ldr	r2, [pc, #100]	; (20003c18 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
20003bb4:	4293      	cmp	r3, r2
20003bb6:	d03b      	beq.n	20003c30 <HAL_DMAEx_MultiBufferStart_IT+0x860>
20003bb8:	68fb      	ldr	r3, [r7, #12]
20003bba:	681b      	ldr	r3, [r3, #0]
20003bbc:	4a17      	ldr	r2, [pc, #92]	; (20003c1c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
20003bbe:	4293      	cmp	r3, r2
20003bc0:	d012      	beq.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0x818>
20003bc2:	68fb      	ldr	r3, [r7, #12]
20003bc4:	681b      	ldr	r3, [r3, #0]
20003bc6:	4a16      	ldr	r2, [pc, #88]	; (20003c20 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
20003bc8:	4293      	cmp	r3, r2
20003bca:	d00a      	beq.n	20003be2 <HAL_DMAEx_MultiBufferStart_IT+0x812>
20003bcc:	68fb      	ldr	r3, [r7, #12]
20003bce:	681b      	ldr	r3, [r3, #0]
20003bd0:	4a14      	ldr	r2, [pc, #80]	; (20003c24 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003bd2:	4293      	cmp	r3, r2
20003bd4:	d102      	bne.n	20003bdc <HAL_DMAEx_MultiBufferStart_IT+0x80c>
20003bd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003bda:	e03f      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003be0:	e03c      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003be2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003be6:	e039      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003be8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003bec:	e036      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003bee:	bf00      	nop
20003bf0:	40026400 	.word	0x40026400
20003bf4:	40026058 	.word	0x40026058
20003bf8:	40026010 	.word	0x40026010
20003bfc:	40026410 	.word	0x40026410
20003c00:	40026070 	.word	0x40026070
20003c04:	40026470 	.word	0x40026470
20003c08:	40026028 	.word	0x40026028
20003c0c:	40026428 	.word	0x40026428
20003c10:	40026088 	.word	0x40026088
20003c14:	40026488 	.word	0x40026488
20003c18:	40026040 	.word	0x40026040
20003c1c:	40026440 	.word	0x40026440
20003c20:	400260a0 	.word	0x400260a0
20003c24:	400264a0 	.word	0x400264a0
20003c28:	40026000 	.word	0x40026000
20003c2c:	40026458 	.word	0x40026458
20003c30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003c34:	e012      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c36:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c3a:	e00f      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c3c:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c40:	e00c      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c42:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c46:	e009      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c48:	f44f 7300 	mov.w	r3, #512	; 0x200
20003c4c:	e006      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c4e:	2308      	movs	r3, #8
20003c50:	e004      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c52:	2308      	movs	r3, #8
20003c54:	e002      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c56:	2308      	movs	r3, #8
20003c58:	e000      	b.n	20003c5c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
20003c5a:	2308      	movs	r3, #8
20003c5c:	4a8c      	ldr	r2, [pc, #560]	; (20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
20003c5e:	60d3      	str	r3, [r2, #12]
20003c60:	e14e      	b.n	20003f00 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003c62:	68fb      	ldr	r3, [r7, #12]
20003c64:	681b      	ldr	r3, [r3, #0]
20003c66:	461a      	mov	r2, r3
20003c68:	4b8a      	ldr	r3, [pc, #552]	; (20003e94 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
20003c6a:	429a      	cmp	r2, r3
20003c6c:	d960      	bls.n	20003d30 <HAL_DMAEx_MultiBufferStart_IT+0x960>
20003c6e:	68fb      	ldr	r3, [r7, #12]
20003c70:	681b      	ldr	r3, [r3, #0]
20003c72:	4a89      	ldr	r2, [pc, #548]	; (20003e98 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003c74:	4293      	cmp	r3, r2
20003c76:	d057      	beq.n	20003d28 <HAL_DMAEx_MultiBufferStart_IT+0x958>
20003c78:	68fb      	ldr	r3, [r7, #12]
20003c7a:	681b      	ldr	r3, [r3, #0]
20003c7c:	4a87      	ldr	r2, [pc, #540]	; (20003e9c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003c7e:	4293      	cmp	r3, r2
20003c80:	d050      	beq.n	20003d24 <HAL_DMAEx_MultiBufferStart_IT+0x954>
20003c82:	68fb      	ldr	r3, [r7, #12]
20003c84:	681b      	ldr	r3, [r3, #0]
20003c86:	4a86      	ldr	r2, [pc, #536]	; (20003ea0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003c88:	4293      	cmp	r3, r2
20003c8a:	d049      	beq.n	20003d20 <HAL_DMAEx_MultiBufferStart_IT+0x950>
20003c8c:	68fb      	ldr	r3, [r7, #12]
20003c8e:	681b      	ldr	r3, [r3, #0]
20003c90:	4a84      	ldr	r2, [pc, #528]	; (20003ea4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003c92:	4293      	cmp	r3, r2
20003c94:	d042      	beq.n	20003d1c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
20003c96:	68fb      	ldr	r3, [r7, #12]
20003c98:	681b      	ldr	r3, [r3, #0]
20003c9a:	4a83      	ldr	r2, [pc, #524]	; (20003ea8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003c9c:	4293      	cmp	r3, r2
20003c9e:	d03a      	beq.n	20003d16 <HAL_DMAEx_MultiBufferStart_IT+0x946>
20003ca0:	68fb      	ldr	r3, [r7, #12]
20003ca2:	681b      	ldr	r3, [r3, #0]
20003ca4:	4a81      	ldr	r2, [pc, #516]	; (20003eac <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003ca6:	4293      	cmp	r3, r2
20003ca8:	d032      	beq.n	20003d10 <HAL_DMAEx_MultiBufferStart_IT+0x940>
20003caa:	68fb      	ldr	r3, [r7, #12]
20003cac:	681b      	ldr	r3, [r3, #0]
20003cae:	4a80      	ldr	r2, [pc, #512]	; (20003eb0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003cb0:	4293      	cmp	r3, r2
20003cb2:	d02a      	beq.n	20003d0a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
20003cb4:	68fb      	ldr	r3, [r7, #12]
20003cb6:	681b      	ldr	r3, [r3, #0]
20003cb8:	4a7e      	ldr	r2, [pc, #504]	; (20003eb4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003cba:	4293      	cmp	r3, r2
20003cbc:	d022      	beq.n	20003d04 <HAL_DMAEx_MultiBufferStart_IT+0x934>
20003cbe:	68fb      	ldr	r3, [r7, #12]
20003cc0:	681b      	ldr	r3, [r3, #0]
20003cc2:	4a7d      	ldr	r2, [pc, #500]	; (20003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003cc4:	4293      	cmp	r3, r2
20003cc6:	d01a      	beq.n	20003cfe <HAL_DMAEx_MultiBufferStart_IT+0x92e>
20003cc8:	68fb      	ldr	r3, [r7, #12]
20003cca:	681b      	ldr	r3, [r3, #0]
20003ccc:	4a7b      	ldr	r2, [pc, #492]	; (20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003cce:	4293      	cmp	r3, r2
20003cd0:	d012      	beq.n	20003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x928>
20003cd2:	68fb      	ldr	r3, [r7, #12]
20003cd4:	681b      	ldr	r3, [r3, #0]
20003cd6:	4a7a      	ldr	r2, [pc, #488]	; (20003ec0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003cd8:	4293      	cmp	r3, r2
20003cda:	d00a      	beq.n	20003cf2 <HAL_DMAEx_MultiBufferStart_IT+0x922>
20003cdc:	68fb      	ldr	r3, [r7, #12]
20003cde:	681b      	ldr	r3, [r3, #0]
20003ce0:	4a78      	ldr	r2, [pc, #480]	; (20003ec4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003ce2:	4293      	cmp	r3, r2
20003ce4:	d102      	bne.n	20003cec <HAL_DMAEx_MultiBufferStart_IT+0x91c>
20003ce6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003cea:	e01e      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003cec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003cf0:	e01b      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003cf2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003cf6:	e018      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003cf8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003cfc:	e015      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003cfe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003d02:	e012      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d04:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d08:	e00f      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d0e:	e00c      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d10:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d14:	e009      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d16:	f44f 7300 	mov.w	r3, #512	; 0x200
20003d1a:	e006      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d1c:	2308      	movs	r3, #8
20003d1e:	e004      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d20:	2308      	movs	r3, #8
20003d22:	e002      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d24:	2308      	movs	r3, #8
20003d26:	e000      	b.n	20003d2a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003d28:	2308      	movs	r3, #8
20003d2a:	4a59      	ldr	r2, [pc, #356]	; (20003e90 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
20003d2c:	6093      	str	r3, [r2, #8]
20003d2e:	e0e7      	b.n	20003f00 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003d30:	68fb      	ldr	r3, [r7, #12]
20003d32:	681b      	ldr	r3, [r3, #0]
20003d34:	461a      	mov	r2, r3
20003d36:	4b64      	ldr	r3, [pc, #400]	; (20003ec8 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20003d38:	429a      	cmp	r2, r3
20003d3a:	d960      	bls.n	20003dfe <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
20003d3c:	68fb      	ldr	r3, [r7, #12]
20003d3e:	681b      	ldr	r3, [r3, #0]
20003d40:	4a55      	ldr	r2, [pc, #340]	; (20003e98 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003d42:	4293      	cmp	r3, r2
20003d44:	d057      	beq.n	20003df6 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
20003d46:	68fb      	ldr	r3, [r7, #12]
20003d48:	681b      	ldr	r3, [r3, #0]
20003d4a:	4a54      	ldr	r2, [pc, #336]	; (20003e9c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003d4c:	4293      	cmp	r3, r2
20003d4e:	d050      	beq.n	20003df2 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
20003d50:	68fb      	ldr	r3, [r7, #12]
20003d52:	681b      	ldr	r3, [r3, #0]
20003d54:	4a52      	ldr	r2, [pc, #328]	; (20003ea0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003d56:	4293      	cmp	r3, r2
20003d58:	d049      	beq.n	20003dee <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
20003d5a:	68fb      	ldr	r3, [r7, #12]
20003d5c:	681b      	ldr	r3, [r3, #0]
20003d5e:	4a51      	ldr	r2, [pc, #324]	; (20003ea4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003d60:	4293      	cmp	r3, r2
20003d62:	d042      	beq.n	20003dea <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
20003d64:	68fb      	ldr	r3, [r7, #12]
20003d66:	681b      	ldr	r3, [r3, #0]
20003d68:	4a4f      	ldr	r2, [pc, #316]	; (20003ea8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003d6a:	4293      	cmp	r3, r2
20003d6c:	d03a      	beq.n	20003de4 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
20003d6e:	68fb      	ldr	r3, [r7, #12]
20003d70:	681b      	ldr	r3, [r3, #0]
20003d72:	4a4e      	ldr	r2, [pc, #312]	; (20003eac <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003d74:	4293      	cmp	r3, r2
20003d76:	d032      	beq.n	20003dde <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
20003d78:	68fb      	ldr	r3, [r7, #12]
20003d7a:	681b      	ldr	r3, [r3, #0]
20003d7c:	4a4c      	ldr	r2, [pc, #304]	; (20003eb0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003d7e:	4293      	cmp	r3, r2
20003d80:	d02a      	beq.n	20003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
20003d82:	68fb      	ldr	r3, [r7, #12]
20003d84:	681b      	ldr	r3, [r3, #0]
20003d86:	4a4b      	ldr	r2, [pc, #300]	; (20003eb4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003d88:	4293      	cmp	r3, r2
20003d8a:	d022      	beq.n	20003dd2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
20003d8c:	68fb      	ldr	r3, [r7, #12]
20003d8e:	681b      	ldr	r3, [r3, #0]
20003d90:	4a49      	ldr	r2, [pc, #292]	; (20003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003d92:	4293      	cmp	r3, r2
20003d94:	d01a      	beq.n	20003dcc <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
20003d96:	68fb      	ldr	r3, [r7, #12]
20003d98:	681b      	ldr	r3, [r3, #0]
20003d9a:	4a48      	ldr	r2, [pc, #288]	; (20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003d9c:	4293      	cmp	r3, r2
20003d9e:	d012      	beq.n	20003dc6 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
20003da0:	68fb      	ldr	r3, [r7, #12]
20003da2:	681b      	ldr	r3, [r3, #0]
20003da4:	4a46      	ldr	r2, [pc, #280]	; (20003ec0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003da6:	4293      	cmp	r3, r2
20003da8:	d00a      	beq.n	20003dc0 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
20003daa:	68fb      	ldr	r3, [r7, #12]
20003dac:	681b      	ldr	r3, [r3, #0]
20003dae:	4a45      	ldr	r2, [pc, #276]	; (20003ec4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003db0:	4293      	cmp	r3, r2
20003db2:	d102      	bne.n	20003dba <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
20003db4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003db8:	e01e      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003dbe:	e01b      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003dc4:	e018      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dc6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003dca:	e015      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003dd0:	e012      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
20003dd6:	e00f      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
20003ddc:	e00c      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dde:	f44f 7300 	mov.w	r3, #512	; 0x200
20003de2:	e009      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003de4:	f44f 7300 	mov.w	r3, #512	; 0x200
20003de8:	e006      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dea:	2308      	movs	r3, #8
20003dec:	e004      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003dee:	2308      	movs	r3, #8
20003df0:	e002      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003df2:	2308      	movs	r3, #8
20003df4:	e000      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
20003df6:	2308      	movs	r3, #8
20003df8:	4a34      	ldr	r2, [pc, #208]	; (20003ecc <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
20003dfa:	60d3      	str	r3, [r2, #12]
20003dfc:	e080      	b.n	20003f00 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
20003dfe:	68fb      	ldr	r3, [r7, #12]
20003e00:	681b      	ldr	r3, [r3, #0]
20003e02:	4a25      	ldr	r2, [pc, #148]	; (20003e98 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
20003e04:	4293      	cmp	r3, r2
20003e06:	d078      	beq.n	20003efa <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
20003e08:	68fb      	ldr	r3, [r7, #12]
20003e0a:	681b      	ldr	r3, [r3, #0]
20003e0c:	4a23      	ldr	r2, [pc, #140]	; (20003e9c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
20003e0e:	4293      	cmp	r3, r2
20003e10:	d071      	beq.n	20003ef6 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
20003e12:	68fb      	ldr	r3, [r7, #12]
20003e14:	681b      	ldr	r3, [r3, #0]
20003e16:	4a22      	ldr	r2, [pc, #136]	; (20003ea0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
20003e18:	4293      	cmp	r3, r2
20003e1a:	d06a      	beq.n	20003ef2 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
20003e1c:	68fb      	ldr	r3, [r7, #12]
20003e1e:	681b      	ldr	r3, [r3, #0]
20003e20:	4a20      	ldr	r2, [pc, #128]	; (20003ea4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
20003e22:	4293      	cmp	r3, r2
20003e24:	d063      	beq.n	20003eee <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
20003e26:	68fb      	ldr	r3, [r7, #12]
20003e28:	681b      	ldr	r3, [r3, #0]
20003e2a:	4a1f      	ldr	r2, [pc, #124]	; (20003ea8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
20003e2c:	4293      	cmp	r3, r2
20003e2e:	d05b      	beq.n	20003ee8 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
20003e30:	68fb      	ldr	r3, [r7, #12]
20003e32:	681b      	ldr	r3, [r3, #0]
20003e34:	4a1d      	ldr	r2, [pc, #116]	; (20003eac <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
20003e36:	4293      	cmp	r3, r2
20003e38:	d053      	beq.n	20003ee2 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
20003e3a:	68fb      	ldr	r3, [r7, #12]
20003e3c:	681b      	ldr	r3, [r3, #0]
20003e3e:	4a1c      	ldr	r2, [pc, #112]	; (20003eb0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
20003e40:	4293      	cmp	r3, r2
20003e42:	d04b      	beq.n	20003edc <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
20003e44:	68fb      	ldr	r3, [r7, #12]
20003e46:	681b      	ldr	r3, [r3, #0]
20003e48:	4a1a      	ldr	r2, [pc, #104]	; (20003eb4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
20003e4a:	4293      	cmp	r3, r2
20003e4c:	d043      	beq.n	20003ed6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
20003e4e:	68fb      	ldr	r3, [r7, #12]
20003e50:	681b      	ldr	r3, [r3, #0]
20003e52:	4a19      	ldr	r2, [pc, #100]	; (20003eb8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
20003e54:	4293      	cmp	r3, r2
20003e56:	d03b      	beq.n	20003ed0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
20003e58:	68fb      	ldr	r3, [r7, #12]
20003e5a:	681b      	ldr	r3, [r3, #0]
20003e5c:	4a17      	ldr	r2, [pc, #92]	; (20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
20003e5e:	4293      	cmp	r3, r2
20003e60:	d012      	beq.n	20003e88 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
20003e62:	68fb      	ldr	r3, [r7, #12]
20003e64:	681b      	ldr	r3, [r3, #0]
20003e66:	4a16      	ldr	r2, [pc, #88]	; (20003ec0 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
20003e68:	4293      	cmp	r3, r2
20003e6a:	d00a      	beq.n	20003e82 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
20003e6c:	68fb      	ldr	r3, [r7, #12]
20003e6e:	681b      	ldr	r3, [r3, #0]
20003e70:	4a14      	ldr	r2, [pc, #80]	; (20003ec4 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003e72:	4293      	cmp	r3, r2
20003e74:	d102      	bne.n	20003e7c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
20003e76:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e7a:	e03f      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003e80:	e03c      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e82:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e86:	e039      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003e8c:	e036      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003e8e:	bf00      	nop
20003e90:	40026400 	.word	0x40026400
20003e94:	400260b8 	.word	0x400260b8
20003e98:	40026010 	.word	0x40026010
20003e9c:	40026410 	.word	0x40026410
20003ea0:	40026070 	.word	0x40026070
20003ea4:	40026470 	.word	0x40026470
20003ea8:	40026028 	.word	0x40026028
20003eac:	40026428 	.word	0x40026428
20003eb0:	40026088 	.word	0x40026088
20003eb4:	40026488 	.word	0x40026488
20003eb8:	40026040 	.word	0x40026040
20003ebc:	40026440 	.word	0x40026440
20003ec0:	400260a0 	.word	0x400260a0
20003ec4:	400264a0 	.word	0x400264a0
20003ec8:	40026058 	.word	0x40026058
20003ecc:	40026000 	.word	0x40026000
20003ed0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003ed4:	e012      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
20003eda:	e00f      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003edc:	f44f 7300 	mov.w	r3, #512	; 0x200
20003ee0:	e00c      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
20003ee6:	e009      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
20003eec:	e006      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003eee:	2308      	movs	r3, #8
20003ef0:	e004      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003ef2:	2308      	movs	r3, #8
20003ef4:	e002      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003ef6:	2308      	movs	r3, #8
20003ef8:	e000      	b.n	20003efc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003efa:	2308      	movs	r3, #8
20003efc:	4a8a      	ldr	r2, [pc, #552]	; (20004128 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
20003efe:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20003f00:	68fb      	ldr	r3, [r7, #12]
20003f02:	681b      	ldr	r3, [r3, #0]
20003f04:	461a      	mov	r2, r3
20003f06:	4b89      	ldr	r3, [pc, #548]	; (2000412c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
20003f08:	429a      	cmp	r2, r3
20003f0a:	d960      	bls.n	20003fce <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
20003f0c:	68fb      	ldr	r3, [r7, #12]
20003f0e:	681b      	ldr	r3, [r3, #0]
20003f10:	4a87      	ldr	r2, [pc, #540]	; (20004130 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
20003f12:	4293      	cmp	r3, r2
20003f14:	d057      	beq.n	20003fc6 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
20003f16:	68fb      	ldr	r3, [r7, #12]
20003f18:	681b      	ldr	r3, [r3, #0]
20003f1a:	4a86      	ldr	r2, [pc, #536]	; (20004134 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20003f1c:	4293      	cmp	r3, r2
20003f1e:	d050      	beq.n	20003fc2 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
20003f20:	68fb      	ldr	r3, [r7, #12]
20003f22:	681b      	ldr	r3, [r3, #0]
20003f24:	4a84      	ldr	r2, [pc, #528]	; (20004138 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
20003f26:	4293      	cmp	r3, r2
20003f28:	d049      	beq.n	20003fbe <HAL_DMAEx_MultiBufferStart_IT+0xbee>
20003f2a:	68fb      	ldr	r3, [r7, #12]
20003f2c:	681b      	ldr	r3, [r3, #0]
20003f2e:	4a83      	ldr	r2, [pc, #524]	; (2000413c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
20003f30:	4293      	cmp	r3, r2
20003f32:	d042      	beq.n	20003fba <HAL_DMAEx_MultiBufferStart_IT+0xbea>
20003f34:	68fb      	ldr	r3, [r7, #12]
20003f36:	681b      	ldr	r3, [r3, #0]
20003f38:	4a81      	ldr	r2, [pc, #516]	; (20004140 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
20003f3a:	4293      	cmp	r3, r2
20003f3c:	d03a      	beq.n	20003fb4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
20003f3e:	68fb      	ldr	r3, [r7, #12]
20003f40:	681b      	ldr	r3, [r3, #0]
20003f42:	4a80      	ldr	r2, [pc, #512]	; (20004144 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
20003f44:	4293      	cmp	r3, r2
20003f46:	d032      	beq.n	20003fae <HAL_DMAEx_MultiBufferStart_IT+0xbde>
20003f48:	68fb      	ldr	r3, [r7, #12]
20003f4a:	681b      	ldr	r3, [r3, #0]
20003f4c:	4a7e      	ldr	r2, [pc, #504]	; (20004148 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
20003f4e:	4293      	cmp	r3, r2
20003f50:	d02a      	beq.n	20003fa8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
20003f52:	68fb      	ldr	r3, [r7, #12]
20003f54:	681b      	ldr	r3, [r3, #0]
20003f56:	4a7d      	ldr	r2, [pc, #500]	; (2000414c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20003f58:	4293      	cmp	r3, r2
20003f5a:	d022      	beq.n	20003fa2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
20003f5c:	68fb      	ldr	r3, [r7, #12]
20003f5e:	681b      	ldr	r3, [r3, #0]
20003f60:	4a7b      	ldr	r2, [pc, #492]	; (20004150 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20003f62:	4293      	cmp	r3, r2
20003f64:	d01a      	beq.n	20003f9c <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
20003f66:	68fb      	ldr	r3, [r7, #12]
20003f68:	681b      	ldr	r3, [r3, #0]
20003f6a:	4a7a      	ldr	r2, [pc, #488]	; (20004154 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
20003f6c:	4293      	cmp	r3, r2
20003f6e:	d012      	beq.n	20003f96 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
20003f70:	68fb      	ldr	r3, [r7, #12]
20003f72:	681b      	ldr	r3, [r3, #0]
20003f74:	4a78      	ldr	r2, [pc, #480]	; (20004158 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20003f76:	4293      	cmp	r3, r2
20003f78:	d00a      	beq.n	20003f90 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
20003f7a:	68fb      	ldr	r3, [r7, #12]
20003f7c:	681b      	ldr	r3, [r3, #0]
20003f7e:	4a77      	ldr	r2, [pc, #476]	; (2000415c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
20003f80:	4293      	cmp	r3, r2
20003f82:	d102      	bne.n	20003f8a <HAL_DMAEx_MultiBufferStart_IT+0xbba>
20003f84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003f88:	e01e      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003f8e:	e01b      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003f94:	e018      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003f9a:	e015      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003f9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003fa0:	e012      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fa2:	f44f 7380 	mov.w	r3, #256	; 0x100
20003fa6:	e00f      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
20003fac:	e00c      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fae:	f44f 7380 	mov.w	r3, #256	; 0x100
20003fb2:	e009      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
20003fb8:	e006      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fba:	2304      	movs	r3, #4
20003fbc:	e004      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fbe:	2304      	movs	r3, #4
20003fc0:	e002      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fc2:	2304      	movs	r3, #4
20003fc4:	e000      	b.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003fc6:	2304      	movs	r3, #4
20003fc8:	4a65      	ldr	r2, [pc, #404]	; (20004160 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20003fca:	60d3      	str	r3, [r2, #12]
20003fcc:	e150      	b.n	20004270 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003fce:	68fb      	ldr	r3, [r7, #12]
20003fd0:	681b      	ldr	r3, [r3, #0]
20003fd2:	461a      	mov	r2, r3
20003fd4:	4b63      	ldr	r3, [pc, #396]	; (20004164 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
20003fd6:	429a      	cmp	r2, r3
20003fd8:	d960      	bls.n	2000409c <HAL_DMAEx_MultiBufferStart_IT+0xccc>
20003fda:	68fb      	ldr	r3, [r7, #12]
20003fdc:	681b      	ldr	r3, [r3, #0]
20003fde:	4a54      	ldr	r2, [pc, #336]	; (20004130 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
20003fe0:	4293      	cmp	r3, r2
20003fe2:	d057      	beq.n	20004094 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
20003fe4:	68fb      	ldr	r3, [r7, #12]
20003fe6:	681b      	ldr	r3, [r3, #0]
20003fe8:	4a52      	ldr	r2, [pc, #328]	; (20004134 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
20003fea:	4293      	cmp	r3, r2
20003fec:	d050      	beq.n	20004090 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
20003fee:	68fb      	ldr	r3, [r7, #12]
20003ff0:	681b      	ldr	r3, [r3, #0]
20003ff2:	4a51      	ldr	r2, [pc, #324]	; (20004138 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
20003ff4:	4293      	cmp	r3, r2
20003ff6:	d049      	beq.n	2000408c <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
20003ff8:	68fb      	ldr	r3, [r7, #12]
20003ffa:	681b      	ldr	r3, [r3, #0]
20003ffc:	4a4f      	ldr	r2, [pc, #316]	; (2000413c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
20003ffe:	4293      	cmp	r3, r2
20004000:	d042      	beq.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
20004002:	68fb      	ldr	r3, [r7, #12]
20004004:	681b      	ldr	r3, [r3, #0]
20004006:	4a4e      	ldr	r2, [pc, #312]	; (20004140 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
20004008:	4293      	cmp	r3, r2
2000400a:	d03a      	beq.n	20004082 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
2000400c:	68fb      	ldr	r3, [r7, #12]
2000400e:	681b      	ldr	r3, [r3, #0]
20004010:	4a4c      	ldr	r2, [pc, #304]	; (20004144 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
20004012:	4293      	cmp	r3, r2
20004014:	d032      	beq.n	2000407c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
20004016:	68fb      	ldr	r3, [r7, #12]
20004018:	681b      	ldr	r3, [r3, #0]
2000401a:	4a4b      	ldr	r2, [pc, #300]	; (20004148 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
2000401c:	4293      	cmp	r3, r2
2000401e:	d02a      	beq.n	20004076 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
20004020:	68fb      	ldr	r3, [r7, #12]
20004022:	681b      	ldr	r3, [r3, #0]
20004024:	4a49      	ldr	r2, [pc, #292]	; (2000414c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
20004026:	4293      	cmp	r3, r2
20004028:	d022      	beq.n	20004070 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
2000402a:	68fb      	ldr	r3, [r7, #12]
2000402c:	681b      	ldr	r3, [r3, #0]
2000402e:	4a48      	ldr	r2, [pc, #288]	; (20004150 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20004030:	4293      	cmp	r3, r2
20004032:	d01a      	beq.n	2000406a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
20004034:	68fb      	ldr	r3, [r7, #12]
20004036:	681b      	ldr	r3, [r3, #0]
20004038:	4a46      	ldr	r2, [pc, #280]	; (20004154 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
2000403a:	4293      	cmp	r3, r2
2000403c:	d012      	beq.n	20004064 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
2000403e:	68fb      	ldr	r3, [r7, #12]
20004040:	681b      	ldr	r3, [r3, #0]
20004042:	4a45      	ldr	r2, [pc, #276]	; (20004158 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20004044:	4293      	cmp	r3, r2
20004046:	d00a      	beq.n	2000405e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
20004048:	68fb      	ldr	r3, [r7, #12]
2000404a:	681b      	ldr	r3, [r3, #0]
2000404c:	4a43      	ldr	r2, [pc, #268]	; (2000415c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
2000404e:	4293      	cmp	r3, r2
20004050:	d102      	bne.n	20004058 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
20004052:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004056:	e01e      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
2000405c:	e01b      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000405e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004062:	e018      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004064:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004068:	e015      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000406a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000406e:	e012      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004070:	f44f 7380 	mov.w	r3, #256	; 0x100
20004074:	e00f      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004076:	f44f 7380 	mov.w	r3, #256	; 0x100
2000407a:	e00c      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000407c:	f44f 7380 	mov.w	r3, #256	; 0x100
20004080:	e009      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004082:	f44f 7380 	mov.w	r3, #256	; 0x100
20004086:	e006      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004088:	2304      	movs	r3, #4
2000408a:	e004      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
2000408c:	2304      	movs	r3, #4
2000408e:	e002      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004090:	2304      	movs	r3, #4
20004092:	e000      	b.n	20004096 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20004094:	2304      	movs	r3, #4
20004096:	4a32      	ldr	r2, [pc, #200]	; (20004160 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
20004098:	6093      	str	r3, [r2, #8]
2000409a:	e0e9      	b.n	20004270 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
2000409c:	68fb      	ldr	r3, [r7, #12]
2000409e:	681b      	ldr	r3, [r3, #0]
200040a0:	461a      	mov	r2, r3
200040a2:	4b31      	ldr	r3, [pc, #196]	; (20004168 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
200040a4:	429a      	cmp	r2, r3
200040a6:	f240 8083 	bls.w	200041b0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
200040aa:	68fb      	ldr	r3, [r7, #12]
200040ac:	681b      	ldr	r3, [r3, #0]
200040ae:	4a20      	ldr	r2, [pc, #128]	; (20004130 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
200040b0:	4293      	cmp	r3, r2
200040b2:	d079      	beq.n	200041a8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
200040b4:	68fb      	ldr	r3, [r7, #12]
200040b6:	681b      	ldr	r3, [r3, #0]
200040b8:	4a1e      	ldr	r2, [pc, #120]	; (20004134 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
200040ba:	4293      	cmp	r3, r2
200040bc:	d072      	beq.n	200041a4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
200040be:	68fb      	ldr	r3, [r7, #12]
200040c0:	681b      	ldr	r3, [r3, #0]
200040c2:	4a1d      	ldr	r2, [pc, #116]	; (20004138 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
200040c4:	4293      	cmp	r3, r2
200040c6:	d06b      	beq.n	200041a0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
200040c8:	68fb      	ldr	r3, [r7, #12]
200040ca:	681b      	ldr	r3, [r3, #0]
200040cc:	4a1b      	ldr	r2, [pc, #108]	; (2000413c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
200040ce:	4293      	cmp	r3, r2
200040d0:	d064      	beq.n	2000419c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
200040d2:	68fb      	ldr	r3, [r7, #12]
200040d4:	681b      	ldr	r3, [r3, #0]
200040d6:	4a1a      	ldr	r2, [pc, #104]	; (20004140 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
200040d8:	4293      	cmp	r3, r2
200040da:	d05c      	beq.n	20004196 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
200040dc:	68fb      	ldr	r3, [r7, #12]
200040de:	681b      	ldr	r3, [r3, #0]
200040e0:	4a18      	ldr	r2, [pc, #96]	; (20004144 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
200040e2:	4293      	cmp	r3, r2
200040e4:	d054      	beq.n	20004190 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
200040e6:	68fb      	ldr	r3, [r7, #12]
200040e8:	681b      	ldr	r3, [r3, #0]
200040ea:	4a17      	ldr	r2, [pc, #92]	; (20004148 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
200040ec:	4293      	cmp	r3, r2
200040ee:	d04c      	beq.n	2000418a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
200040f0:	68fb      	ldr	r3, [r7, #12]
200040f2:	681b      	ldr	r3, [r3, #0]
200040f4:	4a15      	ldr	r2, [pc, #84]	; (2000414c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
200040f6:	4293      	cmp	r3, r2
200040f8:	d044      	beq.n	20004184 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
200040fa:	68fb      	ldr	r3, [r7, #12]
200040fc:	681b      	ldr	r3, [r3, #0]
200040fe:	4a14      	ldr	r2, [pc, #80]	; (20004150 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
20004100:	4293      	cmp	r3, r2
20004102:	d03c      	beq.n	2000417e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
20004104:	68fb      	ldr	r3, [r7, #12]
20004106:	681b      	ldr	r3, [r3, #0]
20004108:	4a12      	ldr	r2, [pc, #72]	; (20004154 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
2000410a:	4293      	cmp	r3, r2
2000410c:	d034      	beq.n	20004178 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
2000410e:	68fb      	ldr	r3, [r7, #12]
20004110:	681b      	ldr	r3, [r3, #0]
20004112:	4a11      	ldr	r2, [pc, #68]	; (20004158 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
20004114:	4293      	cmp	r3, r2
20004116:	d02c      	beq.n	20004172 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
20004118:	68fb      	ldr	r3, [r7, #12]
2000411a:	681b      	ldr	r3, [r3, #0]
2000411c:	4a0f      	ldr	r2, [pc, #60]	; (2000415c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
2000411e:	4293      	cmp	r3, r2
20004120:	d124      	bne.n	2000416c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
20004122:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004126:	e040      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004128:	40026000 	.word	0x40026000
2000412c:	40026458 	.word	0x40026458
20004130:	40026010 	.word	0x40026010
20004134:	40026410 	.word	0x40026410
20004138:	40026070 	.word	0x40026070
2000413c:	40026470 	.word	0x40026470
20004140:	40026028 	.word	0x40026028
20004144:	40026428 	.word	0x40026428
20004148:	40026088 	.word	0x40026088
2000414c:	40026488 	.word	0x40026488
20004150:	40026040 	.word	0x40026040
20004154:	40026440 	.word	0x40026440
20004158:	400260a0 	.word	0x400260a0
2000415c:	400264a0 	.word	0x400264a0
20004160:	40026400 	.word	0x40026400
20004164:	400260b8 	.word	0x400260b8
20004168:	40026058 	.word	0x40026058
2000416c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20004170:	e01b      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004172:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004176:	e018      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004178:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000417c:	e015      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000417e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004182:	e012      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004184:	f44f 7380 	mov.w	r3, #256	; 0x100
20004188:	e00f      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000418a:	f44f 7380 	mov.w	r3, #256	; 0x100
2000418e:	e00c      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004190:	f44f 7380 	mov.w	r3, #256	; 0x100
20004194:	e009      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
20004196:	f44f 7380 	mov.w	r3, #256	; 0x100
2000419a:	e006      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
2000419c:	2304      	movs	r3, #4
2000419e:	e004      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
200041a0:	2304      	movs	r3, #4
200041a2:	e002      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
200041a4:	2304      	movs	r3, #4
200041a6:	e000      	b.n	200041aa <HAL_DMAEx_MultiBufferStart_IT+0xdda>
200041a8:	2304      	movs	r3, #4
200041aa:	4a8b      	ldr	r2, [pc, #556]	; (200043d8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
200041ac:	60d3      	str	r3, [r2, #12]
200041ae:	e05f      	b.n	20004270 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
200041b0:	68fb      	ldr	r3, [r7, #12]
200041b2:	681b      	ldr	r3, [r3, #0]
200041b4:	4a89      	ldr	r2, [pc, #548]	; (200043dc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
200041b6:	4293      	cmp	r3, r2
200041b8:	d057      	beq.n	2000426a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
200041ba:	68fb      	ldr	r3, [r7, #12]
200041bc:	681b      	ldr	r3, [r3, #0]
200041be:	4a88      	ldr	r2, [pc, #544]	; (200043e0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
200041c0:	4293      	cmp	r3, r2
200041c2:	d050      	beq.n	20004266 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
200041c4:	68fb      	ldr	r3, [r7, #12]
200041c6:	681b      	ldr	r3, [r3, #0]
200041c8:	4a86      	ldr	r2, [pc, #536]	; (200043e4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
200041ca:	4293      	cmp	r3, r2
200041cc:	d049      	beq.n	20004262 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
200041ce:	68fb      	ldr	r3, [r7, #12]
200041d0:	681b      	ldr	r3, [r3, #0]
200041d2:	4a85      	ldr	r2, [pc, #532]	; (200043e8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
200041d4:	4293      	cmp	r3, r2
200041d6:	d042      	beq.n	2000425e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
200041d8:	68fb      	ldr	r3, [r7, #12]
200041da:	681b      	ldr	r3, [r3, #0]
200041dc:	4a83      	ldr	r2, [pc, #524]	; (200043ec <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
200041de:	4293      	cmp	r3, r2
200041e0:	d03a      	beq.n	20004258 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
200041e2:	68fb      	ldr	r3, [r7, #12]
200041e4:	681b      	ldr	r3, [r3, #0]
200041e6:	4a82      	ldr	r2, [pc, #520]	; (200043f0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
200041e8:	4293      	cmp	r3, r2
200041ea:	d032      	beq.n	20004252 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
200041ec:	68fb      	ldr	r3, [r7, #12]
200041ee:	681b      	ldr	r3, [r3, #0]
200041f0:	4a80      	ldr	r2, [pc, #512]	; (200043f4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
200041f2:	4293      	cmp	r3, r2
200041f4:	d02a      	beq.n	2000424c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
200041f6:	68fb      	ldr	r3, [r7, #12]
200041f8:	681b      	ldr	r3, [r3, #0]
200041fa:	4a7f      	ldr	r2, [pc, #508]	; (200043f8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
200041fc:	4293      	cmp	r3, r2
200041fe:	d022      	beq.n	20004246 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
20004200:	68fb      	ldr	r3, [r7, #12]
20004202:	681b      	ldr	r3, [r3, #0]
20004204:	4a7d      	ldr	r2, [pc, #500]	; (200043fc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
20004206:	4293      	cmp	r3, r2
20004208:	d01a      	beq.n	20004240 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
2000420a:	68fb      	ldr	r3, [r7, #12]
2000420c:	681b      	ldr	r3, [r3, #0]
2000420e:	4a7c      	ldr	r2, [pc, #496]	; (20004400 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
20004210:	4293      	cmp	r3, r2
20004212:	d012      	beq.n	2000423a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
20004214:	68fb      	ldr	r3, [r7, #12]
20004216:	681b      	ldr	r3, [r3, #0]
20004218:	4a7a      	ldr	r2, [pc, #488]	; (20004404 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
2000421a:	4293      	cmp	r3, r2
2000421c:	d00a      	beq.n	20004234 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
2000421e:	68fb      	ldr	r3, [r7, #12]
20004220:	681b      	ldr	r3, [r3, #0]
20004222:	4a79      	ldr	r2, [pc, #484]	; (20004408 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20004224:	4293      	cmp	r3, r2
20004226:	d102      	bne.n	2000422e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
20004228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000422c:	e01e      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
2000422e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20004232:	e01b      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004238:	e018      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
2000423a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
2000423e:	e015      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004240:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20004244:	e012      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004246:	f44f 7380 	mov.w	r3, #256	; 0x100
2000424a:	e00f      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
2000424c:	f44f 7380 	mov.w	r3, #256	; 0x100
20004250:	e00c      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004252:	f44f 7380 	mov.w	r3, #256	; 0x100
20004256:	e009      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004258:	f44f 7380 	mov.w	r3, #256	; 0x100
2000425c:	e006      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
2000425e:	2304      	movs	r3, #4
20004260:	e004      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004262:	2304      	movs	r3, #4
20004264:	e002      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
20004266:	2304      	movs	r3, #4
20004268:	e000      	b.n	2000426c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
2000426a:	2304      	movs	r3, #4
2000426c:	4a5a      	ldr	r2, [pc, #360]	; (200043d8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
2000426e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20004270:	68fb      	ldr	r3, [r7, #12]
20004272:	681b      	ldr	r3, [r3, #0]
20004274:	461a      	mov	r2, r3
20004276:	4b65      	ldr	r3, [pc, #404]	; (2000440c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20004278:	429a      	cmp	r2, r3
2000427a:	d95c      	bls.n	20004336 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
2000427c:	68fb      	ldr	r3, [r7, #12]
2000427e:	681b      	ldr	r3, [r3, #0]
20004280:	4a56      	ldr	r2, [pc, #344]	; (200043dc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
20004282:	4293      	cmp	r3, r2
20004284:	d053      	beq.n	2000432e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
20004286:	68fb      	ldr	r3, [r7, #12]
20004288:	681b      	ldr	r3, [r3, #0]
2000428a:	4a55      	ldr	r2, [pc, #340]	; (200043e0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
2000428c:	4293      	cmp	r3, r2
2000428e:	d04c      	beq.n	2000432a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
20004290:	68fb      	ldr	r3, [r7, #12]
20004292:	681b      	ldr	r3, [r3, #0]
20004294:	4a53      	ldr	r2, [pc, #332]	; (200043e4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
20004296:	4293      	cmp	r3, r2
20004298:	d045      	beq.n	20004326 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
2000429a:	68fb      	ldr	r3, [r7, #12]
2000429c:	681b      	ldr	r3, [r3, #0]
2000429e:	4a52      	ldr	r2, [pc, #328]	; (200043e8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
200042a0:	4293      	cmp	r3, r2
200042a2:	d03e      	beq.n	20004322 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
200042a4:	68fb      	ldr	r3, [r7, #12]
200042a6:	681b      	ldr	r3, [r3, #0]
200042a8:	4a50      	ldr	r2, [pc, #320]	; (200043ec <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
200042aa:	4293      	cmp	r3, r2
200042ac:	d037      	beq.n	2000431e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
200042ae:	68fb      	ldr	r3, [r7, #12]
200042b0:	681b      	ldr	r3, [r3, #0]
200042b2:	4a4f      	ldr	r2, [pc, #316]	; (200043f0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
200042b4:	4293      	cmp	r3, r2
200042b6:	d030      	beq.n	2000431a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
200042b8:	68fb      	ldr	r3, [r7, #12]
200042ba:	681b      	ldr	r3, [r3, #0]
200042bc:	4a4d      	ldr	r2, [pc, #308]	; (200043f4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
200042be:	4293      	cmp	r3, r2
200042c0:	d029      	beq.n	20004316 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
200042c2:	68fb      	ldr	r3, [r7, #12]
200042c4:	681b      	ldr	r3, [r3, #0]
200042c6:	4a4c      	ldr	r2, [pc, #304]	; (200043f8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
200042c8:	4293      	cmp	r3, r2
200042ca:	d022      	beq.n	20004312 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
200042cc:	68fb      	ldr	r3, [r7, #12]
200042ce:	681b      	ldr	r3, [r3, #0]
200042d0:	4a4a      	ldr	r2, [pc, #296]	; (200043fc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
200042d2:	4293      	cmp	r3, r2
200042d4:	d01a      	beq.n	2000430c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
200042d6:	68fb      	ldr	r3, [r7, #12]
200042d8:	681b      	ldr	r3, [r3, #0]
200042da:	4a49      	ldr	r2, [pc, #292]	; (20004400 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
200042dc:	4293      	cmp	r3, r2
200042de:	d012      	beq.n	20004306 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
200042e0:	68fb      	ldr	r3, [r7, #12]
200042e2:	681b      	ldr	r3, [r3, #0]
200042e4:	4a47      	ldr	r2, [pc, #284]	; (20004404 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
200042e6:	4293      	cmp	r3, r2
200042e8:	d00a      	beq.n	20004300 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
200042ea:	68fb      	ldr	r3, [r7, #12]
200042ec:	681b      	ldr	r3, [r3, #0]
200042ee:	4a46      	ldr	r2, [pc, #280]	; (20004408 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
200042f0:	4293      	cmp	r3, r2
200042f2:	d102      	bne.n	200042fa <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
200042f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200042f8:	e01a      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
200042fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200042fe:	e017      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004300:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004304:	e014      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000430a:	e011      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000430c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004310:	e00e      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004312:	2340      	movs	r3, #64	; 0x40
20004314:	e00c      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004316:	2340      	movs	r3, #64	; 0x40
20004318:	e00a      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000431a:	2340      	movs	r3, #64	; 0x40
2000431c:	e008      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000431e:	2340      	movs	r3, #64	; 0x40
20004320:	e006      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004322:	2301      	movs	r3, #1
20004324:	e004      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
20004326:	2301      	movs	r3, #1
20004328:	e002      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000432a:	2301      	movs	r3, #1
2000432c:	e000      	b.n	20004330 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
2000432e:	2301      	movs	r3, #1
20004330:	4a37      	ldr	r2, [pc, #220]	; (20004410 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
20004332:	60d3      	str	r3, [r2, #12]
20004334:	e141      	b.n	200045ba <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004336:	68fb      	ldr	r3, [r7, #12]
20004338:	681b      	ldr	r3, [r3, #0]
2000433a:	461a      	mov	r2, r3
2000433c:	4b35      	ldr	r3, [pc, #212]	; (20004414 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
2000433e:	429a      	cmp	r2, r3
20004340:	d97c      	bls.n	2000443c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
20004342:	68fb      	ldr	r3, [r7, #12]
20004344:	681b      	ldr	r3, [r3, #0]
20004346:	4a25      	ldr	r2, [pc, #148]	; (200043dc <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
20004348:	4293      	cmp	r3, r2
2000434a:	d073      	beq.n	20004434 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
2000434c:	68fb      	ldr	r3, [r7, #12]
2000434e:	681b      	ldr	r3, [r3, #0]
20004350:	4a23      	ldr	r2, [pc, #140]	; (200043e0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
20004352:	4293      	cmp	r3, r2
20004354:	d06c      	beq.n	20004430 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
20004356:	68fb      	ldr	r3, [r7, #12]
20004358:	681b      	ldr	r3, [r3, #0]
2000435a:	4a22      	ldr	r2, [pc, #136]	; (200043e4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
2000435c:	4293      	cmp	r3, r2
2000435e:	d065      	beq.n	2000442c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
20004360:	68fb      	ldr	r3, [r7, #12]
20004362:	681b      	ldr	r3, [r3, #0]
20004364:	4a20      	ldr	r2, [pc, #128]	; (200043e8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
20004366:	4293      	cmp	r3, r2
20004368:	d05e      	beq.n	20004428 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
2000436a:	68fb      	ldr	r3, [r7, #12]
2000436c:	681b      	ldr	r3, [r3, #0]
2000436e:	4a1f      	ldr	r2, [pc, #124]	; (200043ec <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
20004370:	4293      	cmp	r3, r2
20004372:	d057      	beq.n	20004424 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
20004374:	68fb      	ldr	r3, [r7, #12]
20004376:	681b      	ldr	r3, [r3, #0]
20004378:	4a1d      	ldr	r2, [pc, #116]	; (200043f0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
2000437a:	4293      	cmp	r3, r2
2000437c:	d050      	beq.n	20004420 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
2000437e:	68fb      	ldr	r3, [r7, #12]
20004380:	681b      	ldr	r3, [r3, #0]
20004382:	4a1c      	ldr	r2, [pc, #112]	; (200043f4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
20004384:	4293      	cmp	r3, r2
20004386:	d049      	beq.n	2000441c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
20004388:	68fb      	ldr	r3, [r7, #12]
2000438a:	681b      	ldr	r3, [r3, #0]
2000438c:	4a1a      	ldr	r2, [pc, #104]	; (200043f8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
2000438e:	4293      	cmp	r3, r2
20004390:	d042      	beq.n	20004418 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
20004392:	68fb      	ldr	r3, [r7, #12]
20004394:	681b      	ldr	r3, [r3, #0]
20004396:	4a19      	ldr	r2, [pc, #100]	; (200043fc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
20004398:	4293      	cmp	r3, r2
2000439a:	d01a      	beq.n	200043d2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
2000439c:	68fb      	ldr	r3, [r7, #12]
2000439e:	681b      	ldr	r3, [r3, #0]
200043a0:	4a17      	ldr	r2, [pc, #92]	; (20004400 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
200043a2:	4293      	cmp	r3, r2
200043a4:	d012      	beq.n	200043cc <HAL_DMAEx_MultiBufferStart_IT+0xffc>
200043a6:	68fb      	ldr	r3, [r7, #12]
200043a8:	681b      	ldr	r3, [r3, #0]
200043aa:	4a16      	ldr	r2, [pc, #88]	; (20004404 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
200043ac:	4293      	cmp	r3, r2
200043ae:	d00a      	beq.n	200043c6 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
200043b0:	68fb      	ldr	r3, [r7, #12]
200043b2:	681b      	ldr	r3, [r3, #0]
200043b4:	4a14      	ldr	r2, [pc, #80]	; (20004408 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
200043b6:	4293      	cmp	r3, r2
200043b8:	d102      	bne.n	200043c0 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
200043ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200043be:	e03a      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200043c4:	e037      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200043ca:	e034      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200043d0:	e031      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200043d6:	e02e      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
200043d8:	40026000 	.word	0x40026000
200043dc:	40026010 	.word	0x40026010
200043e0:	40026410 	.word	0x40026410
200043e4:	40026070 	.word	0x40026070
200043e8:	40026470 	.word	0x40026470
200043ec:	40026028 	.word	0x40026028
200043f0:	40026428 	.word	0x40026428
200043f4:	40026088 	.word	0x40026088
200043f8:	40026488 	.word	0x40026488
200043fc:	40026040 	.word	0x40026040
20004400:	40026440 	.word	0x40026440
20004404:	400260a0 	.word	0x400260a0
20004408:	400264a0 	.word	0x400264a0
2000440c:	40026458 	.word	0x40026458
20004410:	40026400 	.word	0x40026400
20004414:	400260b8 	.word	0x400260b8
20004418:	2340      	movs	r3, #64	; 0x40
2000441a:	e00c      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
2000441c:	2340      	movs	r3, #64	; 0x40
2000441e:	e00a      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004420:	2340      	movs	r3, #64	; 0x40
20004422:	e008      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004424:	2340      	movs	r3, #64	; 0x40
20004426:	e006      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004428:	2301      	movs	r3, #1
2000442a:	e004      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
2000442c:	2301      	movs	r3, #1
2000442e:	e002      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004430:	2301      	movs	r3, #1
20004432:	e000      	b.n	20004436 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
20004434:	2301      	movs	r3, #1
20004436:	4a7b      	ldr	r2, [pc, #492]	; (20004624 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
20004438:	6093      	str	r3, [r2, #8]
2000443a:	e0be      	b.n	200045ba <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2000443c:	68fb      	ldr	r3, [r7, #12]
2000443e:	681b      	ldr	r3, [r3, #0]
20004440:	461a      	mov	r2, r3
20004442:	4b79      	ldr	r3, [pc, #484]	; (20004628 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
20004444:	429a      	cmp	r2, r3
20004446:	d95c      	bls.n	20004502 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
20004448:	68fb      	ldr	r3, [r7, #12]
2000444a:	681b      	ldr	r3, [r3, #0]
2000444c:	4a77      	ldr	r2, [pc, #476]	; (2000462c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
2000444e:	4293      	cmp	r3, r2
20004450:	d053      	beq.n	200044fa <HAL_DMAEx_MultiBufferStart_IT+0x112a>
20004452:	68fb      	ldr	r3, [r7, #12]
20004454:	681b      	ldr	r3, [r3, #0]
20004456:	4a76      	ldr	r2, [pc, #472]	; (20004630 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
20004458:	4293      	cmp	r3, r2
2000445a:	d04c      	beq.n	200044f6 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
2000445c:	68fb      	ldr	r3, [r7, #12]
2000445e:	681b      	ldr	r3, [r3, #0]
20004460:	4a74      	ldr	r2, [pc, #464]	; (20004634 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
20004462:	4293      	cmp	r3, r2
20004464:	d045      	beq.n	200044f2 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
20004466:	68fb      	ldr	r3, [r7, #12]
20004468:	681b      	ldr	r3, [r3, #0]
2000446a:	4a73      	ldr	r2, [pc, #460]	; (20004638 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
2000446c:	4293      	cmp	r3, r2
2000446e:	d03e      	beq.n	200044ee <HAL_DMAEx_MultiBufferStart_IT+0x111e>
20004470:	68fb      	ldr	r3, [r7, #12]
20004472:	681b      	ldr	r3, [r3, #0]
20004474:	4a71      	ldr	r2, [pc, #452]	; (2000463c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
20004476:	4293      	cmp	r3, r2
20004478:	d037      	beq.n	200044ea <HAL_DMAEx_MultiBufferStart_IT+0x111a>
2000447a:	68fb      	ldr	r3, [r7, #12]
2000447c:	681b      	ldr	r3, [r3, #0]
2000447e:	4a70      	ldr	r2, [pc, #448]	; (20004640 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
20004480:	4293      	cmp	r3, r2
20004482:	d030      	beq.n	200044e6 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
20004484:	68fb      	ldr	r3, [r7, #12]
20004486:	681b      	ldr	r3, [r3, #0]
20004488:	4a6e      	ldr	r2, [pc, #440]	; (20004644 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
2000448a:	4293      	cmp	r3, r2
2000448c:	d029      	beq.n	200044e2 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
2000448e:	68fb      	ldr	r3, [r7, #12]
20004490:	681b      	ldr	r3, [r3, #0]
20004492:	4a6d      	ldr	r2, [pc, #436]	; (20004648 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
20004494:	4293      	cmp	r3, r2
20004496:	d022      	beq.n	200044de <HAL_DMAEx_MultiBufferStart_IT+0x110e>
20004498:	68fb      	ldr	r3, [r7, #12]
2000449a:	681b      	ldr	r3, [r3, #0]
2000449c:	4a6b      	ldr	r2, [pc, #428]	; (2000464c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
2000449e:	4293      	cmp	r3, r2
200044a0:	d01a      	beq.n	200044d8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
200044a2:	68fb      	ldr	r3, [r7, #12]
200044a4:	681b      	ldr	r3, [r3, #0]
200044a6:	4a6a      	ldr	r2, [pc, #424]	; (20004650 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
200044a8:	4293      	cmp	r3, r2
200044aa:	d012      	beq.n	200044d2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
200044ac:	68fb      	ldr	r3, [r7, #12]
200044ae:	681b      	ldr	r3, [r3, #0]
200044b0:	4a68      	ldr	r2, [pc, #416]	; (20004654 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
200044b2:	4293      	cmp	r3, r2
200044b4:	d00a      	beq.n	200044cc <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
200044b6:	68fb      	ldr	r3, [r7, #12]
200044b8:	681b      	ldr	r3, [r3, #0]
200044ba:	4a67      	ldr	r2, [pc, #412]	; (20004658 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
200044bc:	4293      	cmp	r3, r2
200044be:	d102      	bne.n	200044c6 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
200044c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200044c4:	e01a      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
200044ca:	e017      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200044d0:	e014      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200044d6:	e011      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
200044dc:	e00e      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044de:	2340      	movs	r3, #64	; 0x40
200044e0:	e00c      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044e2:	2340      	movs	r3, #64	; 0x40
200044e4:	e00a      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044e6:	2340      	movs	r3, #64	; 0x40
200044e8:	e008      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044ea:	2340      	movs	r3, #64	; 0x40
200044ec:	e006      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044ee:	2301      	movs	r3, #1
200044f0:	e004      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044f2:	2301      	movs	r3, #1
200044f4:	e002      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044f6:	2301      	movs	r3, #1
200044f8:	e000      	b.n	200044fc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
200044fa:	2301      	movs	r3, #1
200044fc:	4a57      	ldr	r2, [pc, #348]	; (2000465c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
200044fe:	60d3      	str	r3, [r2, #12]
20004500:	e05b      	b.n	200045ba <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004502:	68fb      	ldr	r3, [r7, #12]
20004504:	681b      	ldr	r3, [r3, #0]
20004506:	4a49      	ldr	r2, [pc, #292]	; (2000462c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
20004508:	4293      	cmp	r3, r2
2000450a:	d053      	beq.n	200045b4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
2000450c:	68fb      	ldr	r3, [r7, #12]
2000450e:	681b      	ldr	r3, [r3, #0]
20004510:	4a47      	ldr	r2, [pc, #284]	; (20004630 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
20004512:	4293      	cmp	r3, r2
20004514:	d04c      	beq.n	200045b0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
20004516:	68fb      	ldr	r3, [r7, #12]
20004518:	681b      	ldr	r3, [r3, #0]
2000451a:	4a46      	ldr	r2, [pc, #280]	; (20004634 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
2000451c:	4293      	cmp	r3, r2
2000451e:	d045      	beq.n	200045ac <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
20004520:	68fb      	ldr	r3, [r7, #12]
20004522:	681b      	ldr	r3, [r3, #0]
20004524:	4a44      	ldr	r2, [pc, #272]	; (20004638 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
20004526:	4293      	cmp	r3, r2
20004528:	d03e      	beq.n	200045a8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
2000452a:	68fb      	ldr	r3, [r7, #12]
2000452c:	681b      	ldr	r3, [r3, #0]
2000452e:	4a43      	ldr	r2, [pc, #268]	; (2000463c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
20004530:	4293      	cmp	r3, r2
20004532:	d037      	beq.n	200045a4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
20004534:	68fb      	ldr	r3, [r7, #12]
20004536:	681b      	ldr	r3, [r3, #0]
20004538:	4a41      	ldr	r2, [pc, #260]	; (20004640 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
2000453a:	4293      	cmp	r3, r2
2000453c:	d030      	beq.n	200045a0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
2000453e:	68fb      	ldr	r3, [r7, #12]
20004540:	681b      	ldr	r3, [r3, #0]
20004542:	4a40      	ldr	r2, [pc, #256]	; (20004644 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
20004544:	4293      	cmp	r3, r2
20004546:	d029      	beq.n	2000459c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
20004548:	68fb      	ldr	r3, [r7, #12]
2000454a:	681b      	ldr	r3, [r3, #0]
2000454c:	4a3e      	ldr	r2, [pc, #248]	; (20004648 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
2000454e:	4293      	cmp	r3, r2
20004550:	d022      	beq.n	20004598 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
20004552:	68fb      	ldr	r3, [r7, #12]
20004554:	681b      	ldr	r3, [r3, #0]
20004556:	4a3d      	ldr	r2, [pc, #244]	; (2000464c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
20004558:	4293      	cmp	r3, r2
2000455a:	d01a      	beq.n	20004592 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
2000455c:	68fb      	ldr	r3, [r7, #12]
2000455e:	681b      	ldr	r3, [r3, #0]
20004560:	4a3b      	ldr	r2, [pc, #236]	; (20004650 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
20004562:	4293      	cmp	r3, r2
20004564:	d012      	beq.n	2000458c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
20004566:	68fb      	ldr	r3, [r7, #12]
20004568:	681b      	ldr	r3, [r3, #0]
2000456a:	4a3a      	ldr	r2, [pc, #232]	; (20004654 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
2000456c:	4293      	cmp	r3, r2
2000456e:	d00a      	beq.n	20004586 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
20004570:	68fb      	ldr	r3, [r7, #12]
20004572:	681b      	ldr	r3, [r3, #0]
20004574:	4a38      	ldr	r2, [pc, #224]	; (20004658 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
20004576:	4293      	cmp	r3, r2
20004578:	d102      	bne.n	20004580 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
2000457a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000457e:	e01a      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004584:	e017      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000458a:	e014      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000458c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004590:	e011      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004596:	e00e      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
20004598:	2340      	movs	r3, #64	; 0x40
2000459a:	e00c      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
2000459c:	2340      	movs	r3, #64	; 0x40
2000459e:	e00a      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
200045a0:	2340      	movs	r3, #64	; 0x40
200045a2:	e008      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
200045a4:	2340      	movs	r3, #64	; 0x40
200045a6:	e006      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
200045a8:	2301      	movs	r3, #1
200045aa:	e004      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
200045ac:	2301      	movs	r3, #1
200045ae:	e002      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
200045b0:	2301      	movs	r3, #1
200045b2:	e000      	b.n	200045b6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
200045b4:	2301      	movs	r3, #1
200045b6:	4a29      	ldr	r2, [pc, #164]	; (2000465c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
200045b8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
200045ba:	68fb      	ldr	r3, [r7, #12]
200045bc:	681b      	ldr	r3, [r3, #0]
200045be:	681a      	ldr	r2, [r3, #0]
200045c0:	68fb      	ldr	r3, [r7, #12]
200045c2:	681b      	ldr	r3, [r3, #0]
200045c4:	f042 0216 	orr.w	r2, r2, #22
200045c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
200045ca:	68fb      	ldr	r3, [r7, #12]
200045cc:	681b      	ldr	r3, [r3, #0]
200045ce:	695a      	ldr	r2, [r3, #20]
200045d0:	68fb      	ldr	r3, [r7, #12]
200045d2:	681b      	ldr	r3, [r3, #0]
200045d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
200045d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200045da:	68fb      	ldr	r3, [r7, #12]
200045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200045de:	2b00      	cmp	r3, #0
200045e0:	d103      	bne.n	200045ea <HAL_DMAEx_MultiBufferStart_IT+0x121a>
200045e2:	68fb      	ldr	r3, [r7, #12]
200045e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200045e6:	2b00      	cmp	r3, #0
200045e8:	d007      	beq.n	200045fa <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
200045ea:	68fb      	ldr	r3, [r7, #12]
200045ec:	681b      	ldr	r3, [r3, #0]
200045ee:	681a      	ldr	r2, [r3, #0]
200045f0:	68fb      	ldr	r3, [r7, #12]
200045f2:	681b      	ldr	r3, [r3, #0]
200045f4:	f042 0208 	orr.w	r2, r2, #8
200045f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
200045fa:	68fb      	ldr	r3, [r7, #12]
200045fc:	681b      	ldr	r3, [r3, #0]
200045fe:	681a      	ldr	r2, [r3, #0]
20004600:	68fb      	ldr	r3, [r7, #12]
20004602:	681b      	ldr	r3, [r3, #0]
20004604:	f042 0201 	orr.w	r2, r2, #1
20004608:	601a      	str	r2, [r3, #0]
2000460a:	e005      	b.n	20004618 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
2000460c:	68fb      	ldr	r3, [r7, #12]
2000460e:	2200      	movs	r2, #0
20004610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
20004614:	2302      	movs	r3, #2
20004616:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
20004618:	7dfb      	ldrb	r3, [r7, #23]
}
2000461a:	4618      	mov	r0, r3
2000461c:	3718      	adds	r7, #24
2000461e:	46bd      	mov	sp, r7
20004620:	bd80      	pop	{r7, pc}
20004622:	bf00      	nop
20004624:	40026400 	.word	0x40026400
20004628:	40026058 	.word	0x40026058
2000462c:	40026010 	.word	0x40026010
20004630:	40026410 	.word	0x40026410
20004634:	40026070 	.word	0x40026070
20004638:	40026470 	.word	0x40026470
2000463c:	40026028 	.word	0x40026028
20004640:	40026428 	.word	0x40026428
20004644:	40026088 	.word	0x40026088
20004648:	40026488 	.word	0x40026488
2000464c:	40026040 	.word	0x40026040
20004650:	40026440 	.word	0x40026440
20004654:	400260a0 	.word	0x400260a0
20004658:	400264a0 	.word	0x400264a0
2000465c:	40026000 	.word	0x40026000

20004660 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
20004660:	b480      	push	{r7}
20004662:	b085      	sub	sp, #20
20004664:	af00      	add	r7, sp, #0
20004666:	60f8      	str	r0, [r7, #12]
20004668:	60b9      	str	r1, [r7, #8]
2000466a:	4613      	mov	r3, r2
2000466c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
2000466e:	79fb      	ldrb	r3, [r7, #7]
20004670:	2b00      	cmp	r3, #0
20004672:	d104      	bne.n	2000467e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
20004674:	68fb      	ldr	r3, [r7, #12]
20004676:	681b      	ldr	r3, [r3, #0]
20004678:	68ba      	ldr	r2, [r7, #8]
2000467a:	60da      	str	r2, [r3, #12]
2000467c:	e003      	b.n	20004686 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
2000467e:	68fb      	ldr	r3, [r7, #12]
20004680:	681b      	ldr	r3, [r3, #0]
20004682:	68ba      	ldr	r2, [r7, #8]
20004684:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
20004686:	2300      	movs	r3, #0
}
20004688:	4618      	mov	r0, r3
2000468a:	3714      	adds	r7, #20
2000468c:	46bd      	mov	sp, r7
2000468e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004692:	4770      	bx	lr

20004694 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
20004694:	b480      	push	{r7}
20004696:	b085      	sub	sp, #20
20004698:	af00      	add	r7, sp, #0
2000469a:	60f8      	str	r0, [r7, #12]
2000469c:	60b9      	str	r1, [r7, #8]
2000469e:	607a      	str	r2, [r7, #4]
200046a0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
200046a2:	68fb      	ldr	r3, [r7, #12]
200046a4:	681b      	ldr	r3, [r3, #0]
200046a6:	683a      	ldr	r2, [r7, #0]
200046a8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
200046aa:	68fb      	ldr	r3, [r7, #12]
200046ac:	689b      	ldr	r3, [r3, #8]
200046ae:	2b40      	cmp	r3, #64	; 0x40
200046b0:	d108      	bne.n	200046c4 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
200046b2:	68fb      	ldr	r3, [r7, #12]
200046b4:	681b      	ldr	r3, [r3, #0]
200046b6:	687a      	ldr	r2, [r7, #4]
200046b8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
200046ba:	68fb      	ldr	r3, [r7, #12]
200046bc:	681b      	ldr	r3, [r3, #0]
200046be:	68ba      	ldr	r2, [r7, #8]
200046c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
200046c2:	e007      	b.n	200046d4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
200046c4:	68fb      	ldr	r3, [r7, #12]
200046c6:	681b      	ldr	r3, [r3, #0]
200046c8:	68ba      	ldr	r2, [r7, #8]
200046ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
200046cc:	68fb      	ldr	r3, [r7, #12]
200046ce:	681b      	ldr	r3, [r3, #0]
200046d0:	687a      	ldr	r2, [r7, #4]
200046d2:	60da      	str	r2, [r3, #12]
}
200046d4:	bf00      	nop
200046d6:	3714      	adds	r7, #20
200046d8:	46bd      	mov	sp, r7
200046da:	f85d 7b04 	ldr.w	r7, [sp], #4
200046de:	4770      	bx	lr

200046e0 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
200046e0:	b480      	push	{r7}
200046e2:	b087      	sub	sp, #28
200046e4:	af00      	add	r7, sp, #0
200046e6:	6078      	str	r0, [r7, #4]
200046e8:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
200046ea:	687b      	ldr	r3, [r7, #4]
200046ec:	2b00      	cmp	r3, #0
200046ee:	d002      	beq.n	200046f6 <HAL_EXTI_SetConfigLine+0x16>
200046f0:	683b      	ldr	r3, [r7, #0]
200046f2:	2b00      	cmp	r3, #0
200046f4:	d101      	bne.n	200046fa <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
200046f6:	2301      	movs	r3, #1
200046f8:	e08f      	b.n	2000481a <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
200046fa:	683b      	ldr	r3, [r7, #0]
200046fc:	681a      	ldr	r2, [r3, #0]
200046fe:	687b      	ldr	r3, [r7, #4]
20004700:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
20004702:	683b      	ldr	r3, [r7, #0]
20004704:	681b      	ldr	r3, [r3, #0]
20004706:	f003 031f 	and.w	r3, r3, #31
2000470a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
2000470c:	2201      	movs	r2, #1
2000470e:	697b      	ldr	r3, [r7, #20]
20004710:	fa02 f303 	lsl.w	r3, r2, r3
20004714:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
20004716:	683b      	ldr	r3, [r7, #0]
20004718:	681b      	ldr	r3, [r3, #0]
2000471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000471e:	2b00      	cmp	r3, #0
20004720:	d052      	beq.n	200047c8 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
20004722:	683b      	ldr	r3, [r7, #0]
20004724:	689b      	ldr	r3, [r3, #8]
20004726:	f003 0301 	and.w	r3, r3, #1
2000472a:	2b00      	cmp	r3, #0
2000472c:	d006      	beq.n	2000473c <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
2000472e:	4b3e      	ldr	r3, [pc, #248]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
20004730:	689a      	ldr	r2, [r3, #8]
20004732:	493d      	ldr	r1, [pc, #244]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
20004734:	693b      	ldr	r3, [r7, #16]
20004736:	4313      	orrs	r3, r2
20004738:	608b      	str	r3, [r1, #8]
2000473a:	e006      	b.n	2000474a <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
2000473c:	4b3a      	ldr	r3, [pc, #232]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
2000473e:	689a      	ldr	r2, [r3, #8]
20004740:	693b      	ldr	r3, [r7, #16]
20004742:	43db      	mvns	r3, r3
20004744:	4938      	ldr	r1, [pc, #224]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
20004746:	4013      	ands	r3, r2
20004748:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
2000474a:	683b      	ldr	r3, [r7, #0]
2000474c:	689b      	ldr	r3, [r3, #8]
2000474e:	f003 0302 	and.w	r3, r3, #2
20004752:	2b00      	cmp	r3, #0
20004754:	d006      	beq.n	20004764 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
20004756:	4b34      	ldr	r3, [pc, #208]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
20004758:	68da      	ldr	r2, [r3, #12]
2000475a:	4933      	ldr	r1, [pc, #204]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
2000475c:	693b      	ldr	r3, [r7, #16]
2000475e:	4313      	orrs	r3, r2
20004760:	60cb      	str	r3, [r1, #12]
20004762:	e006      	b.n	20004772 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
20004764:	4b30      	ldr	r3, [pc, #192]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
20004766:	68da      	ldr	r2, [r3, #12]
20004768:	693b      	ldr	r3, [r7, #16]
2000476a:	43db      	mvns	r3, r3
2000476c:	492e      	ldr	r1, [pc, #184]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
2000476e:	4013      	ands	r3, r2
20004770:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
20004772:	683b      	ldr	r3, [r7, #0]
20004774:	681b      	ldr	r3, [r3, #0]
20004776:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
2000477a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2000477e:	d123      	bne.n	200047c8 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
20004780:	4a2a      	ldr	r2, [pc, #168]	; (2000482c <HAL_EXTI_SetConfigLine+0x14c>)
20004782:	697b      	ldr	r3, [r7, #20]
20004784:	089b      	lsrs	r3, r3, #2
20004786:	3302      	adds	r3, #2
20004788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000478c:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
2000478e:	697b      	ldr	r3, [r7, #20]
20004790:	f003 0303 	and.w	r3, r3, #3
20004794:	009b      	lsls	r3, r3, #2
20004796:	220f      	movs	r2, #15
20004798:	fa02 f303 	lsl.w	r3, r2, r3
2000479c:	43db      	mvns	r3, r3
2000479e:	68fa      	ldr	r2, [r7, #12]
200047a0:	4013      	ands	r3, r2
200047a2:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
200047a4:	683b      	ldr	r3, [r7, #0]
200047a6:	68da      	ldr	r2, [r3, #12]
200047a8:	697b      	ldr	r3, [r7, #20]
200047aa:	f003 0303 	and.w	r3, r3, #3
200047ae:	009b      	lsls	r3, r3, #2
200047b0:	fa02 f303 	lsl.w	r3, r2, r3
200047b4:	68fa      	ldr	r2, [r7, #12]
200047b6:	4313      	orrs	r3, r2
200047b8:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
200047ba:	491c      	ldr	r1, [pc, #112]	; (2000482c <HAL_EXTI_SetConfigLine+0x14c>)
200047bc:	697b      	ldr	r3, [r7, #20]
200047be:	089b      	lsrs	r3, r3, #2
200047c0:	3302      	adds	r3, #2
200047c2:	68fa      	ldr	r2, [r7, #12]
200047c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
200047c8:	683b      	ldr	r3, [r7, #0]
200047ca:	685b      	ldr	r3, [r3, #4]
200047cc:	f003 0301 	and.w	r3, r3, #1
200047d0:	2b00      	cmp	r3, #0
200047d2:	d006      	beq.n	200047e2 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
200047d4:	4b14      	ldr	r3, [pc, #80]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
200047d6:	681a      	ldr	r2, [r3, #0]
200047d8:	4913      	ldr	r1, [pc, #76]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
200047da:	693b      	ldr	r3, [r7, #16]
200047dc:	4313      	orrs	r3, r2
200047de:	600b      	str	r3, [r1, #0]
200047e0:	e006      	b.n	200047f0 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
200047e2:	4b11      	ldr	r3, [pc, #68]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
200047e4:	681a      	ldr	r2, [r3, #0]
200047e6:	693b      	ldr	r3, [r7, #16]
200047e8:	43db      	mvns	r3, r3
200047ea:	490f      	ldr	r1, [pc, #60]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
200047ec:	4013      	ands	r3, r2
200047ee:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
200047f0:	683b      	ldr	r3, [r7, #0]
200047f2:	685b      	ldr	r3, [r3, #4]
200047f4:	f003 0302 	and.w	r3, r3, #2
200047f8:	2b00      	cmp	r3, #0
200047fa:	d006      	beq.n	2000480a <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
200047fc:	4b0a      	ldr	r3, [pc, #40]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
200047fe:	685a      	ldr	r2, [r3, #4]
20004800:	4909      	ldr	r1, [pc, #36]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
20004802:	693b      	ldr	r3, [r7, #16]
20004804:	4313      	orrs	r3, r2
20004806:	604b      	str	r3, [r1, #4]
20004808:	e006      	b.n	20004818 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
2000480a:	4b07      	ldr	r3, [pc, #28]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
2000480c:	685a      	ldr	r2, [r3, #4]
2000480e:	693b      	ldr	r3, [r7, #16]
20004810:	43db      	mvns	r3, r3
20004812:	4905      	ldr	r1, [pc, #20]	; (20004828 <HAL_EXTI_SetConfigLine+0x148>)
20004814:	4013      	ands	r3, r2
20004816:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
20004818:	2300      	movs	r3, #0
}
2000481a:	4618      	mov	r0, r3
2000481c:	371c      	adds	r7, #28
2000481e:	46bd      	mov	sp, r7
20004820:	f85d 7b04 	ldr.w	r7, [sp], #4
20004824:	4770      	bx	lr
20004826:	bf00      	nop
20004828:	40013c00 	.word	0x40013c00
2000482c:	40013800 	.word	0x40013800

20004830 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
20004830:	b480      	push	{r7}
20004832:	b087      	sub	sp, #28
20004834:	af00      	add	r7, sp, #0
20004836:	6078      	str	r0, [r7, #4]
20004838:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
2000483a:	687b      	ldr	r3, [r7, #4]
2000483c:	2b00      	cmp	r3, #0
2000483e:	d002      	beq.n	20004846 <HAL_EXTI_GetConfigLine+0x16>
20004840:	683b      	ldr	r3, [r7, #0]
20004842:	2b00      	cmp	r3, #0
20004844:	d101      	bne.n	2000484a <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
20004846:	2301      	movs	r3, #1
20004848:	e061      	b.n	2000490e <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
2000484a:	687b      	ldr	r3, [r7, #4]
2000484c:	681a      	ldr	r2, [r3, #0]
2000484e:	683b      	ldr	r3, [r7, #0]
20004850:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
20004852:	683b      	ldr	r3, [r7, #0]
20004854:	681b      	ldr	r3, [r3, #0]
20004856:	f003 031f 	and.w	r3, r3, #31
2000485a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
2000485c:	2201      	movs	r2, #1
2000485e:	697b      	ldr	r3, [r7, #20]
20004860:	fa02 f303 	lsl.w	r3, r2, r3
20004864:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
20004866:	4b2d      	ldr	r3, [pc, #180]	; (2000491c <HAL_EXTI_GetConfigLine+0xec>)
20004868:	681a      	ldr	r2, [r3, #0]
2000486a:	693b      	ldr	r3, [r7, #16]
2000486c:	4013      	ands	r3, r2
2000486e:	2b00      	cmp	r3, #0
20004870:	d003      	beq.n	2000487a <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
20004872:	683b      	ldr	r3, [r7, #0]
20004874:	2201      	movs	r2, #1
20004876:	605a      	str	r2, [r3, #4]
20004878:	e002      	b.n	20004880 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
2000487a:	683b      	ldr	r3, [r7, #0]
2000487c:	2200      	movs	r2, #0
2000487e:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
20004880:	4b26      	ldr	r3, [pc, #152]	; (2000491c <HAL_EXTI_GetConfigLine+0xec>)
20004882:	685a      	ldr	r2, [r3, #4]
20004884:	693b      	ldr	r3, [r7, #16]
20004886:	4013      	ands	r3, r2
20004888:	2b00      	cmp	r3, #0
2000488a:	d005      	beq.n	20004898 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
2000488c:	683b      	ldr	r3, [r7, #0]
2000488e:	685b      	ldr	r3, [r3, #4]
20004890:	f043 0202 	orr.w	r2, r3, #2
20004894:	683b      	ldr	r3, [r7, #0]
20004896:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
20004898:	683b      	ldr	r3, [r7, #0]
2000489a:	2200      	movs	r2, #0
2000489c:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
2000489e:	683b      	ldr	r3, [r7, #0]
200048a0:	2200      	movs	r2, #0
200048a2:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
200048a4:	683b      	ldr	r3, [r7, #0]
200048a6:	681b      	ldr	r3, [r3, #0]
200048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200048ac:	2b00      	cmp	r3, #0
200048ae:	d02d      	beq.n	2000490c <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
200048b0:	4b1a      	ldr	r3, [pc, #104]	; (2000491c <HAL_EXTI_GetConfigLine+0xec>)
200048b2:	689a      	ldr	r2, [r3, #8]
200048b4:	693b      	ldr	r3, [r7, #16]
200048b6:	4013      	ands	r3, r2
200048b8:	2b00      	cmp	r3, #0
200048ba:	d002      	beq.n	200048c2 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
200048bc:	683b      	ldr	r3, [r7, #0]
200048be:	2201      	movs	r2, #1
200048c0:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
200048c2:	4b16      	ldr	r3, [pc, #88]	; (2000491c <HAL_EXTI_GetConfigLine+0xec>)
200048c4:	68da      	ldr	r2, [r3, #12]
200048c6:	693b      	ldr	r3, [r7, #16]
200048c8:	4013      	ands	r3, r2
200048ca:	2b00      	cmp	r3, #0
200048cc:	d005      	beq.n	200048da <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
200048ce:	683b      	ldr	r3, [r7, #0]
200048d0:	689b      	ldr	r3, [r3, #8]
200048d2:	f043 0202 	orr.w	r2, r3, #2
200048d6:	683b      	ldr	r3, [r7, #0]
200048d8:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
200048da:	683b      	ldr	r3, [r7, #0]
200048dc:	681b      	ldr	r3, [r3, #0]
200048de:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
200048e2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
200048e6:	d111      	bne.n	2000490c <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
200048e8:	4a0d      	ldr	r2, [pc, #52]	; (20004920 <HAL_EXTI_GetConfigLine+0xf0>)
200048ea:	697b      	ldr	r3, [r7, #20]
200048ec:	089b      	lsrs	r3, r3, #2
200048ee:	3302      	adds	r3, #2
200048f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200048f4:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = (regval >> (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u))) & SYSCFG_EXTICR1_EXTI0;
200048f6:	697b      	ldr	r3, [r7, #20]
200048f8:	f003 0303 	and.w	r3, r3, #3
200048fc:	009b      	lsls	r3, r3, #2
200048fe:	68fa      	ldr	r2, [r7, #12]
20004900:	fa22 f303 	lsr.w	r3, r2, r3
20004904:	f003 020f 	and.w	r2, r3, #15
20004908:	683b      	ldr	r3, [r7, #0]
2000490a:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
2000490c:	2300      	movs	r3, #0
}
2000490e:	4618      	mov	r0, r3
20004910:	371c      	adds	r7, #28
20004912:	46bd      	mov	sp, r7
20004914:	f85d 7b04 	ldr.w	r7, [sp], #4
20004918:	4770      	bx	lr
2000491a:	bf00      	nop
2000491c:	40013c00 	.word	0x40013c00
20004920:	40013800 	.word	0x40013800

20004924 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
20004924:	b480      	push	{r7}
20004926:	b087      	sub	sp, #28
20004928:	af00      	add	r7, sp, #0
2000492a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
2000492c:	687b      	ldr	r3, [r7, #4]
2000492e:	2b00      	cmp	r3, #0
20004930:	d101      	bne.n	20004936 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
20004932:	2301      	movs	r3, #1
20004934:	e04c      	b.n	200049d0 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20004936:	687b      	ldr	r3, [r7, #4]
20004938:	681b      	ldr	r3, [r3, #0]
2000493a:	f003 031f 	and.w	r3, r3, #31
2000493e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004940:	2201      	movs	r2, #1
20004942:	697b      	ldr	r3, [r7, #20]
20004944:	fa02 f303 	lsl.w	r3, r2, r3
20004948:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
2000494a:	4b24      	ldr	r3, [pc, #144]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
2000494c:	681a      	ldr	r2, [r3, #0]
2000494e:	693b      	ldr	r3, [r7, #16]
20004950:	43db      	mvns	r3, r3
20004952:	4922      	ldr	r1, [pc, #136]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
20004954:	4013      	ands	r3, r2
20004956:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
20004958:	4b20      	ldr	r3, [pc, #128]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
2000495a:	685a      	ldr	r2, [r3, #4]
2000495c:	693b      	ldr	r3, [r7, #16]
2000495e:	43db      	mvns	r3, r3
20004960:	491e      	ldr	r1, [pc, #120]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
20004962:	4013      	ands	r3, r2
20004964:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
20004966:	687b      	ldr	r3, [r7, #4]
20004968:	681b      	ldr	r3, [r3, #0]
2000496a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000496e:	2b00      	cmp	r3, #0
20004970:	d02d      	beq.n	200049ce <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
20004972:	4b1a      	ldr	r3, [pc, #104]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
20004974:	689a      	ldr	r2, [r3, #8]
20004976:	693b      	ldr	r3, [r7, #16]
20004978:	43db      	mvns	r3, r3
2000497a:	4918      	ldr	r1, [pc, #96]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
2000497c:	4013      	ands	r3, r2
2000497e:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
20004980:	4b16      	ldr	r3, [pc, #88]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
20004982:	68da      	ldr	r2, [r3, #12]
20004984:	693b      	ldr	r3, [r7, #16]
20004986:	43db      	mvns	r3, r3
20004988:	4914      	ldr	r1, [pc, #80]	; (200049dc <HAL_EXTI_ClearConfigLine+0xb8>)
2000498a:	4013      	ands	r3, r2
2000498c:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
2000498e:	687b      	ldr	r3, [r7, #4]
20004990:	681b      	ldr	r3, [r3, #0]
20004992:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20004996:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2000499a:	d118      	bne.n	200049ce <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
2000499c:	4a10      	ldr	r2, [pc, #64]	; (200049e0 <HAL_EXTI_ClearConfigLine+0xbc>)
2000499e:	697b      	ldr	r3, [r7, #20]
200049a0:	089b      	lsrs	r3, r3, #2
200049a2:	3302      	adds	r3, #2
200049a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200049a8:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
200049aa:	697b      	ldr	r3, [r7, #20]
200049ac:	f003 0303 	and.w	r3, r3, #3
200049b0:	009b      	lsls	r3, r3, #2
200049b2:	220f      	movs	r2, #15
200049b4:	fa02 f303 	lsl.w	r3, r2, r3
200049b8:	43db      	mvns	r3, r3
200049ba:	68fa      	ldr	r2, [r7, #12]
200049bc:	4013      	ands	r3, r2
200049be:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
200049c0:	4907      	ldr	r1, [pc, #28]	; (200049e0 <HAL_EXTI_ClearConfigLine+0xbc>)
200049c2:	697b      	ldr	r3, [r7, #20]
200049c4:	089b      	lsrs	r3, r3, #2
200049c6:	3302      	adds	r3, #2
200049c8:	68fa      	ldr	r2, [r7, #12]
200049ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
200049ce:	2300      	movs	r3, #0
}
200049d0:	4618      	mov	r0, r3
200049d2:	371c      	adds	r7, #28
200049d4:	46bd      	mov	sp, r7
200049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
200049da:	4770      	bx	lr
200049dc:	40013c00 	.word	0x40013c00
200049e0:	40013800 	.word	0x40013800

200049e4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
200049e4:	b480      	push	{r7}
200049e6:	b087      	sub	sp, #28
200049e8:	af00      	add	r7, sp, #0
200049ea:	60f8      	str	r0, [r7, #12]
200049ec:	460b      	mov	r3, r1
200049ee:	607a      	str	r2, [r7, #4]
200049f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
200049f2:	2300      	movs	r3, #0
200049f4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
200049f6:	7afb      	ldrb	r3, [r7, #11]
200049f8:	2b00      	cmp	r3, #0
200049fa:	d103      	bne.n	20004a04 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
200049fc:	68fb      	ldr	r3, [r7, #12]
200049fe:	687a      	ldr	r2, [r7, #4]
20004a00:	605a      	str	r2, [r3, #4]
      break;
20004a02:	e002      	b.n	20004a0a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
20004a04:	2301      	movs	r3, #1
20004a06:	75fb      	strb	r3, [r7, #23]
      break;
20004a08:	bf00      	nop
  }

  return status;
20004a0a:	7dfb      	ldrb	r3, [r7, #23]
}
20004a0c:	4618      	mov	r0, r3
20004a0e:	371c      	adds	r7, #28
20004a10:	46bd      	mov	sp, r7
20004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a16:	4770      	bx	lr

20004a18 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
20004a18:	b480      	push	{r7}
20004a1a:	b083      	sub	sp, #12
20004a1c:	af00      	add	r7, sp, #0
20004a1e:	6078      	str	r0, [r7, #4]
20004a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
20004a22:	687b      	ldr	r3, [r7, #4]
20004a24:	2b00      	cmp	r3, #0
20004a26:	d101      	bne.n	20004a2c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
20004a28:	2301      	movs	r3, #1
20004a2a:	e003      	b.n	20004a34 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
20004a2c:	687b      	ldr	r3, [r7, #4]
20004a2e:	683a      	ldr	r2, [r7, #0]
20004a30:	601a      	str	r2, [r3, #0]

    return HAL_OK;
20004a32:	2300      	movs	r3, #0
  }
}
20004a34:	4618      	mov	r0, r3
20004a36:	370c      	adds	r7, #12
20004a38:	46bd      	mov	sp, r7
20004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a3e:	4770      	bx	lr

20004a40 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
20004a40:	b580      	push	{r7, lr}
20004a42:	b084      	sub	sp, #16
20004a44:	af00      	add	r7, sp, #0
20004a46:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004a48:	687b      	ldr	r3, [r7, #4]
20004a4a:	681b      	ldr	r3, [r3, #0]
20004a4c:	f003 031f 	and.w	r3, r3, #31
20004a50:	2201      	movs	r2, #1
20004a52:	fa02 f303 	lsl.w	r3, r2, r3
20004a56:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
20004a58:	4b0a      	ldr	r3, [pc, #40]	; (20004a84 <HAL_EXTI_IRQHandler+0x44>)
20004a5a:	695b      	ldr	r3, [r3, #20]
20004a5c:	68fa      	ldr	r2, [r7, #12]
20004a5e:	4013      	ands	r3, r2
20004a60:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
20004a62:	68bb      	ldr	r3, [r7, #8]
20004a64:	2b00      	cmp	r3, #0
20004a66:	d009      	beq.n	20004a7c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
20004a68:	4a06      	ldr	r2, [pc, #24]	; (20004a84 <HAL_EXTI_IRQHandler+0x44>)
20004a6a:	68fb      	ldr	r3, [r7, #12]
20004a6c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
20004a6e:	687b      	ldr	r3, [r7, #4]
20004a70:	685b      	ldr	r3, [r3, #4]
20004a72:	2b00      	cmp	r3, #0
20004a74:	d002      	beq.n	20004a7c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
20004a76:	687b      	ldr	r3, [r7, #4]
20004a78:	685b      	ldr	r3, [r3, #4]
20004a7a:	4798      	blx	r3
    }
  }
}
20004a7c:	bf00      	nop
20004a7e:	3710      	adds	r7, #16
20004a80:	46bd      	mov	sp, r7
20004a82:	bd80      	pop	{r7, pc}
20004a84:	40013c00 	.word	0x40013c00

20004a88 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004a88:	b480      	push	{r7}
20004a8a:	b087      	sub	sp, #28
20004a8c:	af00      	add	r7, sp, #0
20004a8e:	6078      	str	r0, [r7, #4]
20004a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
20004a92:	687b      	ldr	r3, [r7, #4]
20004a94:	681b      	ldr	r3, [r3, #0]
20004a96:	f003 031f 	and.w	r3, r3, #31
20004a9a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004a9c:	2201      	movs	r2, #1
20004a9e:	697b      	ldr	r3, [r7, #20]
20004aa0:	fa02 f303 	lsl.w	r3, r2, r3
20004aa4:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
20004aa6:	4b07      	ldr	r3, [pc, #28]	; (20004ac4 <HAL_EXTI_GetPending+0x3c>)
20004aa8:	695a      	ldr	r2, [r3, #20]
20004aaa:	693b      	ldr	r3, [r7, #16]
20004aac:	401a      	ands	r2, r3
20004aae:	697b      	ldr	r3, [r7, #20]
20004ab0:	fa22 f303 	lsr.w	r3, r2, r3
20004ab4:	60fb      	str	r3, [r7, #12]
  return regval;
20004ab6:	68fb      	ldr	r3, [r7, #12]
}
20004ab8:	4618      	mov	r0, r3
20004aba:	371c      	adds	r7, #28
20004abc:	46bd      	mov	sp, r7
20004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ac2:	4770      	bx	lr
20004ac4:	40013c00 	.word	0x40013c00

20004ac8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004ac8:	b480      	push	{r7}
20004aca:	b085      	sub	sp, #20
20004acc:	af00      	add	r7, sp, #0
20004ace:	6078      	str	r0, [r7, #4]
20004ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004ad2:	687b      	ldr	r3, [r7, #4]
20004ad4:	681b      	ldr	r3, [r3, #0]
20004ad6:	f003 031f 	and.w	r3, r3, #31
20004ada:	2201      	movs	r2, #1
20004adc:	fa02 f303 	lsl.w	r3, r2, r3
20004ae0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
20004ae2:	4a04      	ldr	r2, [pc, #16]	; (20004af4 <HAL_EXTI_ClearPending+0x2c>)
20004ae4:	68fb      	ldr	r3, [r7, #12]
20004ae6:	6153      	str	r3, [r2, #20]
}
20004ae8:	bf00      	nop
20004aea:	3714      	adds	r7, #20
20004aec:	46bd      	mov	sp, r7
20004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
20004af2:	4770      	bx	lr
20004af4:	40013c00 	.word	0x40013c00

20004af8 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
20004af8:	b480      	push	{r7}
20004afa:	b085      	sub	sp, #20
20004afc:	af00      	add	r7, sp, #0
20004afe:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004b00:	687b      	ldr	r3, [r7, #4]
20004b02:	681b      	ldr	r3, [r3, #0]
20004b04:	f003 031f 	and.w	r3, r3, #31
20004b08:	2201      	movs	r2, #1
20004b0a:	fa02 f303 	lsl.w	r3, r2, r3
20004b0e:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
20004b10:	4a04      	ldr	r2, [pc, #16]	; (20004b24 <HAL_EXTI_GenerateSWI+0x2c>)
20004b12:	68fb      	ldr	r3, [r7, #12]
20004b14:	6113      	str	r3, [r2, #16]
}
20004b16:	bf00      	nop
20004b18:	3714      	adds	r7, #20
20004b1a:	46bd      	mov	sp, r7
20004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b20:	4770      	bx	lr
20004b22:	bf00      	nop
20004b24:	40013c00 	.word	0x40013c00

20004b28 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004b28:	b580      	push	{r7, lr}
20004b2a:	b086      	sub	sp, #24
20004b2c:	af00      	add	r7, sp, #0
20004b2e:	60f8      	str	r0, [r7, #12]
20004b30:	60b9      	str	r1, [r7, #8]
20004b32:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
20004b36:	2301      	movs	r3, #1
20004b38:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004b3a:	4b23      	ldr	r3, [pc, #140]	; (20004bc8 <HAL_FLASH_Program+0xa0>)
20004b3c:	7e1b      	ldrb	r3, [r3, #24]
20004b3e:	2b01      	cmp	r3, #1
20004b40:	d101      	bne.n	20004b46 <HAL_FLASH_Program+0x1e>
20004b42:	2302      	movs	r3, #2
20004b44:	e03b      	b.n	20004bbe <HAL_FLASH_Program+0x96>
20004b46:	4b20      	ldr	r3, [pc, #128]	; (20004bc8 <HAL_FLASH_Program+0xa0>)
20004b48:	2201      	movs	r2, #1
20004b4a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004b4c:	f24c 3050 	movw	r0, #50000	; 0xc350
20004b50:	f000 f9be 	bl	20004ed0 <FLASH_WaitForLastOperation>
20004b54:	4603      	mov	r3, r0
20004b56:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
20004b58:	7dfb      	ldrb	r3, [r7, #23]
20004b5a:	2b00      	cmp	r3, #0
20004b5c:	d12b      	bne.n	20004bb6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20004b5e:	68fb      	ldr	r3, [r7, #12]
20004b60:	2b00      	cmp	r3, #0
20004b62:	d105      	bne.n	20004b70 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20004b64:	783b      	ldrb	r3, [r7, #0]
20004b66:	4619      	mov	r1, r3
20004b68:	68b8      	ldr	r0, [r7, #8]
20004b6a:	f000 fa69 	bl	20005040 <FLASH_Program_Byte>
20004b6e:	e016      	b.n	20004b9e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004b70:	68fb      	ldr	r3, [r7, #12]
20004b72:	2b01      	cmp	r3, #1
20004b74:	d105      	bne.n	20004b82 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004b76:	883b      	ldrh	r3, [r7, #0]
20004b78:	4619      	mov	r1, r3
20004b7a:	68b8      	ldr	r0, [r7, #8]
20004b7c:	f000 fa3c 	bl	20004ff8 <FLASH_Program_HalfWord>
20004b80:	e00d      	b.n	20004b9e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20004b82:	68fb      	ldr	r3, [r7, #12]
20004b84:	2b02      	cmp	r3, #2
20004b86:	d105      	bne.n	20004b94 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20004b88:	683b      	ldr	r3, [r7, #0]
20004b8a:	4619      	mov	r1, r3
20004b8c:	68b8      	ldr	r0, [r7, #8]
20004b8e:	f000 fa11 	bl	20004fb4 <FLASH_Program_Word>
20004b92:	e004      	b.n	20004b9e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
20004b94:	e9d7 2300 	ldrd	r2, r3, [r7]
20004b98:	68b8      	ldr	r0, [r7, #8]
20004b9a:	f000 f9d9 	bl	20004f50 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004b9e:	f24c 3050 	movw	r0, #50000	; 0xc350
20004ba2:	f000 f995 	bl	20004ed0 <FLASH_WaitForLastOperation>
20004ba6:	4603      	mov	r3, r0
20004ba8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
20004baa:	4b08      	ldr	r3, [pc, #32]	; (20004bcc <HAL_FLASH_Program+0xa4>)
20004bac:	691b      	ldr	r3, [r3, #16]
20004bae:	4a07      	ldr	r2, [pc, #28]	; (20004bcc <HAL_FLASH_Program+0xa4>)
20004bb0:	f023 0301 	bic.w	r3, r3, #1
20004bb4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20004bb6:	4b04      	ldr	r3, [pc, #16]	; (20004bc8 <HAL_FLASH_Program+0xa0>)
20004bb8:	2200      	movs	r2, #0
20004bba:	761a      	strb	r2, [r3, #24]
  
  return status;
20004bbc:	7dfb      	ldrb	r3, [r7, #23]
}
20004bbe:	4618      	mov	r0, r3
20004bc0:	3718      	adds	r7, #24
20004bc2:	46bd      	mov	sp, r7
20004bc4:	bd80      	pop	{r7, pc}
20004bc6:	bf00      	nop
20004bc8:	20000498 	.word	0x20000498
20004bcc:	40023c00 	.word	0x40023c00

20004bd0 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004bd0:	b580      	push	{r7, lr}
20004bd2:	b086      	sub	sp, #24
20004bd4:	af00      	add	r7, sp, #0
20004bd6:	60f8      	str	r0, [r7, #12]
20004bd8:	60b9      	str	r1, [r7, #8]
20004bda:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
20004bde:	2300      	movs	r3, #0
20004be0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004be2:	4b20      	ldr	r3, [pc, #128]	; (20004c64 <HAL_FLASH_Program_IT+0x94>)
20004be4:	7e1b      	ldrb	r3, [r3, #24]
20004be6:	2b01      	cmp	r3, #1
20004be8:	d101      	bne.n	20004bee <HAL_FLASH_Program_IT+0x1e>
20004bea:	2302      	movs	r3, #2
20004bec:	e035      	b.n	20004c5a <HAL_FLASH_Program_IT+0x8a>
20004bee:	4b1d      	ldr	r3, [pc, #116]	; (20004c64 <HAL_FLASH_Program_IT+0x94>)
20004bf0:	2201      	movs	r2, #1
20004bf2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20004bf4:	4b1c      	ldr	r3, [pc, #112]	; (20004c68 <HAL_FLASH_Program_IT+0x98>)
20004bf6:	691b      	ldr	r3, [r3, #16]
20004bf8:	4a1b      	ldr	r2, [pc, #108]	; (20004c68 <HAL_FLASH_Program_IT+0x98>)
20004bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20004bfe:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20004c00:	4b19      	ldr	r3, [pc, #100]	; (20004c68 <HAL_FLASH_Program_IT+0x98>)
20004c02:	691b      	ldr	r3, [r3, #16]
20004c04:	4a18      	ldr	r2, [pc, #96]	; (20004c68 <HAL_FLASH_Program_IT+0x98>)
20004c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20004c0a:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
20004c0c:	4b15      	ldr	r3, [pc, #84]	; (20004c64 <HAL_FLASH_Program_IT+0x94>)
20004c0e:	2203      	movs	r2, #3
20004c10:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
20004c12:	4a14      	ldr	r2, [pc, #80]	; (20004c64 <HAL_FLASH_Program_IT+0x94>)
20004c14:	68bb      	ldr	r3, [r7, #8]
20004c16:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
20004c18:	68fb      	ldr	r3, [r7, #12]
20004c1a:	2b00      	cmp	r3, #0
20004c1c:	d105      	bne.n	20004c2a <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
20004c1e:	783b      	ldrb	r3, [r7, #0]
20004c20:	4619      	mov	r1, r3
20004c22:	68b8      	ldr	r0, [r7, #8]
20004c24:	f000 fa0c 	bl	20005040 <FLASH_Program_Byte>
20004c28:	e016      	b.n	20004c58 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004c2a:	68fb      	ldr	r3, [r7, #12]
20004c2c:	2b01      	cmp	r3, #1
20004c2e:	d105      	bne.n	20004c3c <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
20004c30:	883b      	ldrh	r3, [r7, #0]
20004c32:	4619      	mov	r1, r3
20004c34:	68b8      	ldr	r0, [r7, #8]
20004c36:	f000 f9df 	bl	20004ff8 <FLASH_Program_HalfWord>
20004c3a:	e00d      	b.n	20004c58 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
20004c3c:	68fb      	ldr	r3, [r7, #12]
20004c3e:	2b02      	cmp	r3, #2
20004c40:	d105      	bne.n	20004c4e <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
20004c42:	683b      	ldr	r3, [r7, #0]
20004c44:	4619      	mov	r1, r3
20004c46:	68b8      	ldr	r0, [r7, #8]
20004c48:	f000 f9b4 	bl	20004fb4 <FLASH_Program_Word>
20004c4c:	e004      	b.n	20004c58 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
20004c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
20004c52:	68b8      	ldr	r0, [r7, #8]
20004c54:	f000 f97c 	bl	20004f50 <FLASH_Program_DoubleWord>
  }

  return status;
20004c58:	7dfb      	ldrb	r3, [r7, #23]
}
20004c5a:	4618      	mov	r0, r3
20004c5c:	3718      	adds	r7, #24
20004c5e:	46bd      	mov	sp, r7
20004c60:	bd80      	pop	{r7, pc}
20004c62:	bf00      	nop
20004c64:	20000498 	.word	0x20000498
20004c68:	40023c00 	.word	0x40023c00

20004c6c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
20004c6c:	b580      	push	{r7, lr}
20004c6e:	b082      	sub	sp, #8
20004c70:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
20004c72:	2300      	movs	r3, #0
20004c74:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004c76:	4b4b      	ldr	r3, [pc, #300]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004c78:	68db      	ldr	r3, [r3, #12]
20004c7a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20004c7e:	2b00      	cmp	r3, #0
20004c80:	d020      	beq.n	20004cc4 <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20004c82:	4b49      	ldr	r3, [pc, #292]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004c84:	781b      	ldrb	r3, [r3, #0]
20004c86:	b2db      	uxtb	r3, r3
20004c88:	2b01      	cmp	r3, #1
20004c8a:	d107      	bne.n	20004c9c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
20004c8c:	4b46      	ldr	r3, [pc, #280]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004c8e:	68db      	ldr	r3, [r3, #12]
20004c90:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
20004c92:	4b45      	ldr	r3, [pc, #276]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004c94:	f04f 32ff 	mov.w	r2, #4294967295
20004c98:	60da      	str	r2, [r3, #12]
20004c9a:	e00b      	b.n	20004cb4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
20004c9c:	4b42      	ldr	r3, [pc, #264]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004c9e:	781b      	ldrb	r3, [r3, #0]
20004ca0:	b2db      	uxtb	r3, r3
20004ca2:	2b02      	cmp	r3, #2
20004ca4:	d103      	bne.n	20004cae <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
20004ca6:	4b40      	ldr	r3, [pc, #256]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004ca8:	691b      	ldr	r3, [r3, #16]
20004caa:	607b      	str	r3, [r7, #4]
20004cac:	e002      	b.n	20004cb4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
20004cae:	4b3e      	ldr	r3, [pc, #248]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004cb0:	695b      	ldr	r3, [r3, #20]
20004cb2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
20004cb4:	f000 f9e6 	bl	20005084 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
20004cb8:	6878      	ldr	r0, [r7, #4]
20004cba:	f000 f881 	bl	20004dc0 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004cbe:	4b3a      	ldr	r3, [pc, #232]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004cc0:	2200      	movs	r2, #0
20004cc2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004cc4:	4b37      	ldr	r3, [pc, #220]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004cc6:	68db      	ldr	r3, [r3, #12]
20004cc8:	f003 0301 	and.w	r3, r3, #1
20004ccc:	2b00      	cmp	r3, #0
20004cce:	d04a      	beq.n	20004d66 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004cd0:	4b34      	ldr	r3, [pc, #208]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004cd2:	2201      	movs	r2, #1
20004cd4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
20004cd6:	4b34      	ldr	r3, [pc, #208]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004cd8:	781b      	ldrb	r3, [r3, #0]
20004cda:	b2db      	uxtb	r3, r3
20004cdc:	2b01      	cmp	r3, #1
20004cde:	d12d      	bne.n	20004d3c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
20004ce0:	4b31      	ldr	r3, [pc, #196]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004ce2:	685b      	ldr	r3, [r3, #4]
20004ce4:	3b01      	subs	r3, #1
20004ce6:	4a30      	ldr	r2, [pc, #192]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004ce8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
20004cea:	4b2f      	ldr	r3, [pc, #188]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004cec:	685b      	ldr	r3, [r3, #4]
20004cee:	2b00      	cmp	r3, #0
20004cf0:	d015      	beq.n	20004d1e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
20004cf2:	4b2d      	ldr	r3, [pc, #180]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004cf4:	68db      	ldr	r3, [r3, #12]
20004cf6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20004cf8:	6878      	ldr	r0, [r7, #4]
20004cfa:	f000 f857 	bl	20004dac <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
20004cfe:	4b2a      	ldr	r3, [pc, #168]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d00:	68db      	ldr	r3, [r3, #12]
20004d02:	3301      	adds	r3, #1
20004d04:	4a28      	ldr	r2, [pc, #160]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d06:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
20004d08:	4b27      	ldr	r3, [pc, #156]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d0a:	68db      	ldr	r3, [r3, #12]
20004d0c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
20004d0e:	4b26      	ldr	r3, [pc, #152]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d10:	7a1b      	ldrb	r3, [r3, #8]
20004d12:	b2db      	uxtb	r3, r3
20004d14:	4619      	mov	r1, r3
20004d16:	6878      	ldr	r0, [r7, #4]
20004d18:	f000 fbfe 	bl	20005518 <FLASH_Erase_Sector>
20004d1c:	e023      	b.n	20004d66 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
20004d1e:	f04f 33ff 	mov.w	r3, #4294967295
20004d22:	607b      	str	r3, [r7, #4]
20004d24:	4a20      	ldr	r2, [pc, #128]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d26:	687b      	ldr	r3, [r7, #4]
20004d28:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004d2a:	4b1f      	ldr	r3, [pc, #124]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d2c:	2200      	movs	r2, #0
20004d2e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
20004d30:	f000 fd72 	bl	20005818 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20004d34:	6878      	ldr	r0, [r7, #4]
20004d36:	f000 f839 	bl	20004dac <HAL_FLASH_EndOfOperationCallback>
20004d3a:	e014      	b.n	20004d66 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
20004d3c:	4b1a      	ldr	r3, [pc, #104]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d3e:	781b      	ldrb	r3, [r3, #0]
20004d40:	b2db      	uxtb	r3, r3
20004d42:	2b02      	cmp	r3, #2
20004d44:	d107      	bne.n	20004d56 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
20004d46:	f000 fd67 	bl	20005818 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
20004d4a:	4b17      	ldr	r3, [pc, #92]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d4c:	691b      	ldr	r3, [r3, #16]
20004d4e:	4618      	mov	r0, r3
20004d50:	f000 f82c 	bl	20004dac <HAL_FLASH_EndOfOperationCallback>
20004d54:	e004      	b.n	20004d60 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
20004d56:	4b14      	ldr	r3, [pc, #80]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d58:	695b      	ldr	r3, [r3, #20]
20004d5a:	4618      	mov	r0, r3
20004d5c:	f000 f826 	bl	20004dac <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004d60:	4b11      	ldr	r3, [pc, #68]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d62:	2200      	movs	r2, #0
20004d64:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
20004d66:	4b10      	ldr	r3, [pc, #64]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d68:	781b      	ldrb	r3, [r3, #0]
20004d6a:	b2db      	uxtb	r3, r3
20004d6c:	2b00      	cmp	r3, #0
20004d6e:	d114      	bne.n	20004d9a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
20004d70:	4b0c      	ldr	r3, [pc, #48]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004d72:	691b      	ldr	r3, [r3, #16]
20004d74:	4a0b      	ldr	r2, [pc, #44]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
20004d7a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
20004d7c:	4b09      	ldr	r3, [pc, #36]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004d7e:	691b      	ldr	r3, [r3, #16]
20004d80:	4a08      	ldr	r2, [pc, #32]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20004d86:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
20004d88:	4b06      	ldr	r3, [pc, #24]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004d8a:	691b      	ldr	r3, [r3, #16]
20004d8c:	4a05      	ldr	r2, [pc, #20]	; (20004da4 <HAL_FLASH_IRQHandler+0x138>)
20004d8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
20004d92:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
20004d94:	4b04      	ldr	r3, [pc, #16]	; (20004da8 <HAL_FLASH_IRQHandler+0x13c>)
20004d96:	2200      	movs	r2, #0
20004d98:	761a      	strb	r2, [r3, #24]
  }
}
20004d9a:	bf00      	nop
20004d9c:	3708      	adds	r7, #8
20004d9e:	46bd      	mov	sp, r7
20004da0:	bd80      	pop	{r7, pc}
20004da2:	bf00      	nop
20004da4:	40023c00 	.word	0x40023c00
20004da8:	20000498 	.word	0x20000498

20004dac <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
20004dac:	b480      	push	{r7}
20004dae:	b083      	sub	sp, #12
20004db0:	af00      	add	r7, sp, #0
20004db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
20004db4:	bf00      	nop
20004db6:	370c      	adds	r7, #12
20004db8:	46bd      	mov	sp, r7
20004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
20004dbe:	4770      	bx	lr

20004dc0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
20004dc0:	b480      	push	{r7}
20004dc2:	b083      	sub	sp, #12
20004dc4:	af00      	add	r7, sp, #0
20004dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
20004dc8:	bf00      	nop
20004dca:	370c      	adds	r7, #12
20004dcc:	46bd      	mov	sp, r7
20004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
20004dd2:	4770      	bx	lr

20004dd4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
20004dd4:	b480      	push	{r7}
20004dd6:	b083      	sub	sp, #12
20004dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20004dda:	2300      	movs	r3, #0
20004ddc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004dde:	4b0b      	ldr	r3, [pc, #44]	; (20004e0c <HAL_FLASH_Unlock+0x38>)
20004de0:	691b      	ldr	r3, [r3, #16]
20004de2:	2b00      	cmp	r3, #0
20004de4:	da0b      	bge.n	20004dfe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
20004de6:	4b09      	ldr	r3, [pc, #36]	; (20004e0c <HAL_FLASH_Unlock+0x38>)
20004de8:	4a09      	ldr	r2, [pc, #36]	; (20004e10 <HAL_FLASH_Unlock+0x3c>)
20004dea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20004dec:	4b07      	ldr	r3, [pc, #28]	; (20004e0c <HAL_FLASH_Unlock+0x38>)
20004dee:	4a09      	ldr	r2, [pc, #36]	; (20004e14 <HAL_FLASH_Unlock+0x40>)
20004df0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004df2:	4b06      	ldr	r3, [pc, #24]	; (20004e0c <HAL_FLASH_Unlock+0x38>)
20004df4:	691b      	ldr	r3, [r3, #16]
20004df6:	2b00      	cmp	r3, #0
20004df8:	da01      	bge.n	20004dfe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20004dfa:	2301      	movs	r3, #1
20004dfc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20004dfe:	79fb      	ldrb	r3, [r7, #7]
}
20004e00:	4618      	mov	r0, r3
20004e02:	370c      	adds	r7, #12
20004e04:	46bd      	mov	sp, r7
20004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e0a:	4770      	bx	lr
20004e0c:	40023c00 	.word	0x40023c00
20004e10:	45670123 	.word	0x45670123
20004e14:	cdef89ab 	.word	0xcdef89ab

20004e18 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
20004e18:	b480      	push	{r7}
20004e1a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
20004e1c:	4b05      	ldr	r3, [pc, #20]	; (20004e34 <HAL_FLASH_Lock+0x1c>)
20004e1e:	691b      	ldr	r3, [r3, #16]
20004e20:	4a04      	ldr	r2, [pc, #16]	; (20004e34 <HAL_FLASH_Lock+0x1c>)
20004e22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
20004e26:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
20004e28:	2300      	movs	r3, #0
}
20004e2a:	4618      	mov	r0, r3
20004e2c:	46bd      	mov	sp, r7
20004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e32:	4770      	bx	lr
20004e34:	40023c00 	.word	0x40023c00

20004e38 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
20004e38:	b480      	push	{r7}
20004e3a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
20004e3c:	4b09      	ldr	r3, [pc, #36]	; (20004e64 <HAL_FLASH_OB_Unlock+0x2c>)
20004e3e:	695b      	ldr	r3, [r3, #20]
20004e40:	f003 0301 	and.w	r3, r3, #1
20004e44:	2b00      	cmp	r3, #0
20004e46:	d007      	beq.n	20004e58 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
20004e48:	4b06      	ldr	r3, [pc, #24]	; (20004e64 <HAL_FLASH_OB_Unlock+0x2c>)
20004e4a:	4a07      	ldr	r2, [pc, #28]	; (20004e68 <HAL_FLASH_OB_Unlock+0x30>)
20004e4c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
20004e4e:	4b05      	ldr	r3, [pc, #20]	; (20004e64 <HAL_FLASH_OB_Unlock+0x2c>)
20004e50:	4a06      	ldr	r2, [pc, #24]	; (20004e6c <HAL_FLASH_OB_Unlock+0x34>)
20004e52:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
20004e54:	2300      	movs	r3, #0
20004e56:	e000      	b.n	20004e5a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
20004e58:	2301      	movs	r3, #1
}
20004e5a:	4618      	mov	r0, r3
20004e5c:	46bd      	mov	sp, r7
20004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e62:	4770      	bx	lr
20004e64:	40023c00 	.word	0x40023c00
20004e68:	08192a3b 	.word	0x08192a3b
20004e6c:	4c5d6e7f 	.word	0x4c5d6e7f

20004e70 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
20004e70:	b480      	push	{r7}
20004e72:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20004e74:	4b05      	ldr	r3, [pc, #20]	; (20004e8c <HAL_FLASH_OB_Lock+0x1c>)
20004e76:	695b      	ldr	r3, [r3, #20]
20004e78:	4a04      	ldr	r2, [pc, #16]	; (20004e8c <HAL_FLASH_OB_Lock+0x1c>)
20004e7a:	f043 0301 	orr.w	r3, r3, #1
20004e7e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
20004e80:	2300      	movs	r3, #0
}
20004e82:	4618      	mov	r0, r3
20004e84:	46bd      	mov	sp, r7
20004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
20004e8a:	4770      	bx	lr
20004e8c:	40023c00 	.word	0x40023c00

20004e90 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
20004e90:	b580      	push	{r7, lr}
20004e92:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
20004e94:	4b07      	ldr	r3, [pc, #28]	; (20004eb4 <HAL_FLASH_OB_Launch+0x24>)
20004e96:	781b      	ldrb	r3, [r3, #0]
20004e98:	b2db      	uxtb	r3, r3
20004e9a:	4a06      	ldr	r2, [pc, #24]	; (20004eb4 <HAL_FLASH_OB_Launch+0x24>)
20004e9c:	f043 0302 	orr.w	r3, r3, #2
20004ea0:	b2db      	uxtb	r3, r3
20004ea2:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
20004ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
20004ea8:	f000 f812 	bl	20004ed0 <FLASH_WaitForLastOperation>
20004eac:	4603      	mov	r3, r0
}
20004eae:	4618      	mov	r0, r3
20004eb0:	bd80      	pop	{r7, pc}
20004eb2:	bf00      	nop
20004eb4:	40023c14 	.word	0x40023c14

20004eb8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
20004eb8:	b480      	push	{r7}
20004eba:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
20004ebc:	4b03      	ldr	r3, [pc, #12]	; (20004ecc <HAL_FLASH_GetError+0x14>)
20004ebe:	69db      	ldr	r3, [r3, #28]
}  
20004ec0:	4618      	mov	r0, r3
20004ec2:	46bd      	mov	sp, r7
20004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ec8:	4770      	bx	lr
20004eca:	bf00      	nop
20004ecc:	20000498 	.word	0x20000498

20004ed0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20004ed0:	b580      	push	{r7, lr}
20004ed2:	b084      	sub	sp, #16
20004ed4:	af00      	add	r7, sp, #0
20004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20004ed8:	2300      	movs	r3, #0
20004eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20004edc:	4b1a      	ldr	r3, [pc, #104]	; (20004f48 <FLASH_WaitForLastOperation+0x78>)
20004ede:	2200      	movs	r2, #0
20004ee0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20004ee2:	f7fb fd9e 	bl	20000a22 <HAL_GetTick>
20004ee6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004ee8:	e010      	b.n	20004f0c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20004eea:	687b      	ldr	r3, [r7, #4]
20004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
20004ef0:	d00c      	beq.n	20004f0c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20004ef2:	687b      	ldr	r3, [r7, #4]
20004ef4:	2b00      	cmp	r3, #0
20004ef6:	d007      	beq.n	20004f08 <FLASH_WaitForLastOperation+0x38>
20004ef8:	f7fb fd93 	bl	20000a22 <HAL_GetTick>
20004efc:	4602      	mov	r2, r0
20004efe:	68fb      	ldr	r3, [r7, #12]
20004f00:	1ad3      	subs	r3, r2, r3
20004f02:	687a      	ldr	r2, [r7, #4]
20004f04:	429a      	cmp	r2, r3
20004f06:	d201      	bcs.n	20004f0c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20004f08:	2303      	movs	r3, #3
20004f0a:	e019      	b.n	20004f40 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004f0c:	4b0f      	ldr	r3, [pc, #60]	; (20004f4c <FLASH_WaitForLastOperation+0x7c>)
20004f0e:	68db      	ldr	r3, [r3, #12]
20004f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20004f14:	2b00      	cmp	r3, #0
20004f16:	d1e8      	bne.n	20004eea <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004f18:	4b0c      	ldr	r3, [pc, #48]	; (20004f4c <FLASH_WaitForLastOperation+0x7c>)
20004f1a:	68db      	ldr	r3, [r3, #12]
20004f1c:	f003 0301 	and.w	r3, r3, #1
20004f20:	2b00      	cmp	r3, #0
20004f22:	d002      	beq.n	20004f2a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004f24:	4b09      	ldr	r3, [pc, #36]	; (20004f4c <FLASH_WaitForLastOperation+0x7c>)
20004f26:	2201      	movs	r2, #1
20004f28:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004f2a:	4b08      	ldr	r3, [pc, #32]	; (20004f4c <FLASH_WaitForLastOperation+0x7c>)
20004f2c:	68db      	ldr	r3, [r3, #12]
20004f2e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
20004f32:	2b00      	cmp	r3, #0
20004f34:	d003      	beq.n	20004f3e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20004f36:	f000 f8a5 	bl	20005084 <FLASH_SetErrorCode>
    return HAL_ERROR;
20004f3a:	2301      	movs	r3, #1
20004f3c:	e000      	b.n	20004f40 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20004f3e:	2300      	movs	r3, #0
  
}  
20004f40:	4618      	mov	r0, r3
20004f42:	3710      	adds	r7, #16
20004f44:	46bd      	mov	sp, r7
20004f46:	bd80      	pop	{r7, pc}
20004f48:	20000498 	.word	0x20000498
20004f4c:	40023c00 	.word	0x40023c00

20004f50 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20004f50:	b480      	push	{r7}
20004f52:	b085      	sub	sp, #20
20004f54:	af00      	add	r7, sp, #0
20004f56:	60f8      	str	r0, [r7, #12]
20004f58:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004f5c:	4b14      	ldr	r3, [pc, #80]	; (20004fb0 <FLASH_Program_DoubleWord+0x60>)
20004f5e:	691b      	ldr	r3, [r3, #16]
20004f60:	4a13      	ldr	r2, [pc, #76]	; (20004fb0 <FLASH_Program_DoubleWord+0x60>)
20004f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004f66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20004f68:	4b11      	ldr	r3, [pc, #68]	; (20004fb0 <FLASH_Program_DoubleWord+0x60>)
20004f6a:	691b      	ldr	r3, [r3, #16]
20004f6c:	4a10      	ldr	r2, [pc, #64]	; (20004fb0 <FLASH_Program_DoubleWord+0x60>)
20004f6e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20004f72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004f74:	4b0e      	ldr	r3, [pc, #56]	; (20004fb0 <FLASH_Program_DoubleWord+0x60>)
20004f76:	691b      	ldr	r3, [r3, #16]
20004f78:	4a0d      	ldr	r2, [pc, #52]	; (20004fb0 <FLASH_Program_DoubleWord+0x60>)
20004f7a:	f043 0301 	orr.w	r3, r3, #1
20004f7e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20004f80:	68fb      	ldr	r3, [r7, #12]
20004f82:	683a      	ldr	r2, [r7, #0]
20004f84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
20004f86:	f3bf 8f6f 	isb	sy
}
20004f8a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20004f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
20004f90:	f04f 0200 	mov.w	r2, #0
20004f94:	f04f 0300 	mov.w	r3, #0
20004f98:	000a      	movs	r2, r1
20004f9a:	2300      	movs	r3, #0
20004f9c:	68f9      	ldr	r1, [r7, #12]
20004f9e:	3104      	adds	r1, #4
20004fa0:	4613      	mov	r3, r2
20004fa2:	600b      	str	r3, [r1, #0]
}
20004fa4:	bf00      	nop
20004fa6:	3714      	adds	r7, #20
20004fa8:	46bd      	mov	sp, r7
20004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fae:	4770      	bx	lr
20004fb0:	40023c00 	.word	0x40023c00

20004fb4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20004fb4:	b480      	push	{r7}
20004fb6:	b083      	sub	sp, #12
20004fb8:	af00      	add	r7, sp, #0
20004fba:	6078      	str	r0, [r7, #4]
20004fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004fbe:	4b0d      	ldr	r3, [pc, #52]	; (20004ff4 <FLASH_Program_Word+0x40>)
20004fc0:	691b      	ldr	r3, [r3, #16]
20004fc2:	4a0c      	ldr	r2, [pc, #48]	; (20004ff4 <FLASH_Program_Word+0x40>)
20004fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004fc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20004fca:	4b0a      	ldr	r3, [pc, #40]	; (20004ff4 <FLASH_Program_Word+0x40>)
20004fcc:	691b      	ldr	r3, [r3, #16]
20004fce:	4a09      	ldr	r2, [pc, #36]	; (20004ff4 <FLASH_Program_Word+0x40>)
20004fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20004fd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004fd6:	4b07      	ldr	r3, [pc, #28]	; (20004ff4 <FLASH_Program_Word+0x40>)
20004fd8:	691b      	ldr	r3, [r3, #16]
20004fda:	4a06      	ldr	r2, [pc, #24]	; (20004ff4 <FLASH_Program_Word+0x40>)
20004fdc:	f043 0301 	orr.w	r3, r3, #1
20004fe0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
20004fe2:	687b      	ldr	r3, [r7, #4]
20004fe4:	683a      	ldr	r2, [r7, #0]
20004fe6:	601a      	str	r2, [r3, #0]
}
20004fe8:	bf00      	nop
20004fea:	370c      	adds	r7, #12
20004fec:	46bd      	mov	sp, r7
20004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
20004ff2:	4770      	bx	lr
20004ff4:	40023c00 	.word	0x40023c00

20004ff8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20004ff8:	b480      	push	{r7}
20004ffa:	b083      	sub	sp, #12
20004ffc:	af00      	add	r7, sp, #0
20004ffe:	6078      	str	r0, [r7, #4]
20005000:	460b      	mov	r3, r1
20005002:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20005004:	4b0d      	ldr	r3, [pc, #52]	; (2000503c <FLASH_Program_HalfWord+0x44>)
20005006:	691b      	ldr	r3, [r3, #16]
20005008:	4a0c      	ldr	r2, [pc, #48]	; (2000503c <FLASH_Program_HalfWord+0x44>)
2000500a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
2000500e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20005010:	4b0a      	ldr	r3, [pc, #40]	; (2000503c <FLASH_Program_HalfWord+0x44>)
20005012:	691b      	ldr	r3, [r3, #16]
20005014:	4a09      	ldr	r2, [pc, #36]	; (2000503c <FLASH_Program_HalfWord+0x44>)
20005016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000501a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
2000501c:	4b07      	ldr	r3, [pc, #28]	; (2000503c <FLASH_Program_HalfWord+0x44>)
2000501e:	691b      	ldr	r3, [r3, #16]
20005020:	4a06      	ldr	r2, [pc, #24]	; (2000503c <FLASH_Program_HalfWord+0x44>)
20005022:	f043 0301 	orr.w	r3, r3, #1
20005026:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
20005028:	687b      	ldr	r3, [r7, #4]
2000502a:	887a      	ldrh	r2, [r7, #2]
2000502c:	801a      	strh	r2, [r3, #0]
}
2000502e:	bf00      	nop
20005030:	370c      	adds	r7, #12
20005032:	46bd      	mov	sp, r7
20005034:	f85d 7b04 	ldr.w	r7, [sp], #4
20005038:	4770      	bx	lr
2000503a:	bf00      	nop
2000503c:	40023c00 	.word	0x40023c00

20005040 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
20005040:	b480      	push	{r7}
20005042:	b083      	sub	sp, #12
20005044:	af00      	add	r7, sp, #0
20005046:	6078      	str	r0, [r7, #4]
20005048:	460b      	mov	r3, r1
2000504a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
2000504c:	4b0c      	ldr	r3, [pc, #48]	; (20005080 <FLASH_Program_Byte+0x40>)
2000504e:	691b      	ldr	r3, [r3, #16]
20005050:	4a0b      	ldr	r2, [pc, #44]	; (20005080 <FLASH_Program_Byte+0x40>)
20005052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20005056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20005058:	4b09      	ldr	r3, [pc, #36]	; (20005080 <FLASH_Program_Byte+0x40>)
2000505a:	4a09      	ldr	r2, [pc, #36]	; (20005080 <FLASH_Program_Byte+0x40>)
2000505c:	691b      	ldr	r3, [r3, #16]
2000505e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20005060:	4b07      	ldr	r3, [pc, #28]	; (20005080 <FLASH_Program_Byte+0x40>)
20005062:	691b      	ldr	r3, [r3, #16]
20005064:	4a06      	ldr	r2, [pc, #24]	; (20005080 <FLASH_Program_Byte+0x40>)
20005066:	f043 0301 	orr.w	r3, r3, #1
2000506a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
2000506c:	687b      	ldr	r3, [r7, #4]
2000506e:	78fa      	ldrb	r2, [r7, #3]
20005070:	701a      	strb	r2, [r3, #0]
}
20005072:	bf00      	nop
20005074:	370c      	adds	r7, #12
20005076:	46bd      	mov	sp, r7
20005078:	f85d 7b04 	ldr.w	r7, [sp], #4
2000507c:	4770      	bx	lr
2000507e:	bf00      	nop
20005080:	40023c00 	.word	0x40023c00

20005084 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20005084:	b480      	push	{r7}
20005086:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20005088:	4b2f      	ldr	r3, [pc, #188]	; (20005148 <FLASH_SetErrorCode+0xc4>)
2000508a:	68db      	ldr	r3, [r3, #12]
2000508c:	f003 0310 	and.w	r3, r3, #16
20005090:	2b00      	cmp	r3, #0
20005092:	d008      	beq.n	200050a6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20005094:	4b2d      	ldr	r3, [pc, #180]	; (2000514c <FLASH_SetErrorCode+0xc8>)
20005096:	69db      	ldr	r3, [r3, #28]
20005098:	f043 0310 	orr.w	r3, r3, #16
2000509c:	4a2b      	ldr	r2, [pc, #172]	; (2000514c <FLASH_SetErrorCode+0xc8>)
2000509e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
200050a0:	4b29      	ldr	r3, [pc, #164]	; (20005148 <FLASH_SetErrorCode+0xc4>)
200050a2:	2210      	movs	r2, #16
200050a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
200050a6:	4b28      	ldr	r3, [pc, #160]	; (20005148 <FLASH_SetErrorCode+0xc4>)
200050a8:	68db      	ldr	r3, [r3, #12]
200050aa:	f003 0320 	and.w	r3, r3, #32
200050ae:	2b00      	cmp	r3, #0
200050b0:	d008      	beq.n	200050c4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
200050b2:	4b26      	ldr	r3, [pc, #152]	; (2000514c <FLASH_SetErrorCode+0xc8>)
200050b4:	69db      	ldr	r3, [r3, #28]
200050b6:	f043 0308 	orr.w	r3, r3, #8
200050ba:	4a24      	ldr	r2, [pc, #144]	; (2000514c <FLASH_SetErrorCode+0xc8>)
200050bc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
200050be:	4b22      	ldr	r3, [pc, #136]	; (20005148 <FLASH_SetErrorCode+0xc4>)
200050c0:	2220      	movs	r2, #32
200050c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
200050c4:	4b20      	ldr	r3, [pc, #128]	; (20005148 <FLASH_SetErrorCode+0xc4>)
200050c6:	68db      	ldr	r3, [r3, #12]
200050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
200050cc:	2b00      	cmp	r3, #0
200050ce:	d008      	beq.n	200050e2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
200050d0:	4b1e      	ldr	r3, [pc, #120]	; (2000514c <FLASH_SetErrorCode+0xc8>)
200050d2:	69db      	ldr	r3, [r3, #28]
200050d4:	f043 0304 	orr.w	r3, r3, #4
200050d8:	4a1c      	ldr	r2, [pc, #112]	; (2000514c <FLASH_SetErrorCode+0xc8>)
200050da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
200050dc:	4b1a      	ldr	r3, [pc, #104]	; (20005148 <FLASH_SetErrorCode+0xc4>)
200050de:	2240      	movs	r2, #64	; 0x40
200050e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
200050e2:	4b19      	ldr	r3, [pc, #100]	; (20005148 <FLASH_SetErrorCode+0xc4>)
200050e4:	68db      	ldr	r3, [r3, #12]
200050e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
200050ea:	2b00      	cmp	r3, #0
200050ec:	d008      	beq.n	20005100 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
200050ee:	4b17      	ldr	r3, [pc, #92]	; (2000514c <FLASH_SetErrorCode+0xc8>)
200050f0:	69db      	ldr	r3, [r3, #28]
200050f2:	f043 0302 	orr.w	r3, r3, #2
200050f6:	4a15      	ldr	r2, [pc, #84]	; (2000514c <FLASH_SetErrorCode+0xc8>)
200050f8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
200050fa:	4b13      	ldr	r3, [pc, #76]	; (20005148 <FLASH_SetErrorCode+0xc4>)
200050fc:	2280      	movs	r2, #128	; 0x80
200050fe:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
20005100:	4b11      	ldr	r3, [pc, #68]	; (20005148 <FLASH_SetErrorCode+0xc4>)
20005102:	68db      	ldr	r3, [r3, #12]
20005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
20005108:	2b00      	cmp	r3, #0
2000510a:	d009      	beq.n	20005120 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
2000510c:	4b0f      	ldr	r3, [pc, #60]	; (2000514c <FLASH_SetErrorCode+0xc8>)
2000510e:	69db      	ldr	r3, [r3, #28]
20005110:	f043 0301 	orr.w	r3, r3, #1
20005114:	4a0d      	ldr	r2, [pc, #52]	; (2000514c <FLASH_SetErrorCode+0xc8>)
20005116:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
20005118:	4b0b      	ldr	r3, [pc, #44]	; (20005148 <FLASH_SetErrorCode+0xc4>)
2000511a:	f44f 7280 	mov.w	r2, #256	; 0x100
2000511e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20005120:	4b09      	ldr	r3, [pc, #36]	; (20005148 <FLASH_SetErrorCode+0xc4>)
20005122:	68db      	ldr	r3, [r3, #12]
20005124:	f003 0302 	and.w	r3, r3, #2
20005128:	2b00      	cmp	r3, #0
2000512a:	d008      	beq.n	2000513e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
2000512c:	4b07      	ldr	r3, [pc, #28]	; (2000514c <FLASH_SetErrorCode+0xc8>)
2000512e:	69db      	ldr	r3, [r3, #28]
20005130:	f043 0320 	orr.w	r3, r3, #32
20005134:	4a05      	ldr	r2, [pc, #20]	; (2000514c <FLASH_SetErrorCode+0xc8>)
20005136:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
20005138:	4b03      	ldr	r3, [pc, #12]	; (20005148 <FLASH_SetErrorCode+0xc4>)
2000513a:	2202      	movs	r2, #2
2000513c:	60da      	str	r2, [r3, #12]
  }
}
2000513e:	bf00      	nop
20005140:	46bd      	mov	sp, r7
20005142:	f85d 7b04 	ldr.w	r7, [sp], #4
20005146:	4770      	bx	lr
20005148:	40023c00 	.word	0x40023c00
2000514c:	20000498 	.word	0x20000498

20005150 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
20005150:	b580      	push	{r7, lr}
20005152:	b084      	sub	sp, #16
20005154:	af00      	add	r7, sp, #0
20005156:	6078      	str	r0, [r7, #4]
20005158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
2000515a:	2301      	movs	r3, #1
2000515c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
2000515e:	2300      	movs	r3, #0
20005160:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20005162:	4b31      	ldr	r3, [pc, #196]	; (20005228 <HAL_FLASHEx_Erase+0xd8>)
20005164:	7e1b      	ldrb	r3, [r3, #24]
20005166:	2b01      	cmp	r3, #1
20005168:	d101      	bne.n	2000516e <HAL_FLASHEx_Erase+0x1e>
2000516a:	2302      	movs	r3, #2
2000516c:	e058      	b.n	20005220 <HAL_FLASHEx_Erase+0xd0>
2000516e:	4b2e      	ldr	r3, [pc, #184]	; (20005228 <HAL_FLASHEx_Erase+0xd8>)
20005170:	2201      	movs	r2, #1
20005172:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005174:	f24c 3050 	movw	r0, #50000	; 0xc350
20005178:	f7ff feaa 	bl	20004ed0 <FLASH_WaitForLastOperation>
2000517c:	4603      	mov	r3, r0
2000517e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005180:	7bfb      	ldrb	r3, [r7, #15]
20005182:	2b00      	cmp	r3, #0
20005184:	d148      	bne.n	20005218 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20005186:	683b      	ldr	r3, [r7, #0]
20005188:	f04f 32ff 	mov.w	r2, #4294967295
2000518c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
2000518e:	687b      	ldr	r3, [r7, #4]
20005190:	681b      	ldr	r3, [r3, #0]
20005192:	2b01      	cmp	r3, #1
20005194:	d115      	bne.n	200051c2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20005196:	687b      	ldr	r3, [r7, #4]
20005198:	691b      	ldr	r3, [r3, #16]
2000519a:	b2da      	uxtb	r2, r3
2000519c:	687b      	ldr	r3, [r7, #4]
2000519e:	685b      	ldr	r3, [r3, #4]
200051a0:	4619      	mov	r1, r3
200051a2:	4610      	mov	r0, r2
200051a4:	f000 f994 	bl	200054d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200051a8:	f24c 3050 	movw	r0, #50000	; 0xc350
200051ac:	f7ff fe90 	bl	20004ed0 <FLASH_WaitForLastOperation>
200051b0:	4603      	mov	r3, r0
200051b2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
200051b4:	4b1d      	ldr	r3, [pc, #116]	; (2000522c <HAL_FLASHEx_Erase+0xdc>)
200051b6:	691b      	ldr	r3, [r3, #16]
200051b8:	4a1c      	ldr	r2, [pc, #112]	; (2000522c <HAL_FLASHEx_Erase+0xdc>)
200051ba:	f023 0304 	bic.w	r3, r3, #4
200051be:	6113      	str	r3, [r2, #16]
200051c0:	e028      	b.n	20005214 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
200051c2:	687b      	ldr	r3, [r7, #4]
200051c4:	689b      	ldr	r3, [r3, #8]
200051c6:	60bb      	str	r3, [r7, #8]
200051c8:	e01c      	b.n	20005204 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
200051ca:	687b      	ldr	r3, [r7, #4]
200051cc:	691b      	ldr	r3, [r3, #16]
200051ce:	b2db      	uxtb	r3, r3
200051d0:	4619      	mov	r1, r3
200051d2:	68b8      	ldr	r0, [r7, #8]
200051d4:	f000 f9a0 	bl	20005518 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200051d8:	f24c 3050 	movw	r0, #50000	; 0xc350
200051dc:	f7ff fe78 	bl	20004ed0 <FLASH_WaitForLastOperation>
200051e0:	4603      	mov	r3, r0
200051e2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
200051e4:	4b11      	ldr	r3, [pc, #68]	; (2000522c <HAL_FLASHEx_Erase+0xdc>)
200051e6:	691b      	ldr	r3, [r3, #16]
200051e8:	4a10      	ldr	r2, [pc, #64]	; (2000522c <HAL_FLASHEx_Erase+0xdc>)
200051ea:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
200051ee:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
200051f0:	7bfb      	ldrb	r3, [r7, #15]
200051f2:	2b00      	cmp	r3, #0
200051f4:	d003      	beq.n	200051fe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
200051f6:	683b      	ldr	r3, [r7, #0]
200051f8:	68ba      	ldr	r2, [r7, #8]
200051fa:	601a      	str	r2, [r3, #0]
          break;
200051fc:	e00a      	b.n	20005214 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
200051fe:	68bb      	ldr	r3, [r7, #8]
20005200:	3301      	adds	r3, #1
20005202:	60bb      	str	r3, [r7, #8]
20005204:	687b      	ldr	r3, [r7, #4]
20005206:	68da      	ldr	r2, [r3, #12]
20005208:	687b      	ldr	r3, [r7, #4]
2000520a:	689b      	ldr	r3, [r3, #8]
2000520c:	4413      	add	r3, r2
2000520e:	68ba      	ldr	r2, [r7, #8]
20005210:	429a      	cmp	r2, r3
20005212:	d3da      	bcc.n	200051ca <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
20005214:	f000 fb00 	bl	20005818 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20005218:	4b03      	ldr	r3, [pc, #12]	; (20005228 <HAL_FLASHEx_Erase+0xd8>)
2000521a:	2200      	movs	r2, #0
2000521c:	761a      	strb	r2, [r3, #24]

  return status;
2000521e:	7bfb      	ldrb	r3, [r7, #15]
}
20005220:	4618      	mov	r0, r3
20005222:	3710      	adds	r7, #16
20005224:	46bd      	mov	sp, r7
20005226:	bd80      	pop	{r7, pc}
20005228:	20000498 	.word	0x20000498
2000522c:	40023c00 	.word	0x40023c00

20005230 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
20005230:	b580      	push	{r7, lr}
20005232:	b084      	sub	sp, #16
20005234:	af00      	add	r7, sp, #0
20005236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20005238:	2300      	movs	r3, #0
2000523a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
2000523c:	4b25      	ldr	r3, [pc, #148]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
2000523e:	7e1b      	ldrb	r3, [r3, #24]
20005240:	2b01      	cmp	r3, #1
20005242:	d101      	bne.n	20005248 <HAL_FLASHEx_Erase_IT+0x18>
20005244:	2302      	movs	r3, #2
20005246:	e040      	b.n	200052ca <HAL_FLASHEx_Erase_IT+0x9a>
20005248:	4b22      	ldr	r3, [pc, #136]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
2000524a:	2201      	movs	r2, #1
2000524c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
2000524e:	4b22      	ldr	r3, [pc, #136]	; (200052d8 <HAL_FLASHEx_Erase_IT+0xa8>)
20005250:	691b      	ldr	r3, [r3, #16]
20005252:	4a21      	ldr	r2, [pc, #132]	; (200052d8 <HAL_FLASHEx_Erase_IT+0xa8>)
20005254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20005258:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
2000525a:	4b1f      	ldr	r3, [pc, #124]	; (200052d8 <HAL_FLASHEx_Erase_IT+0xa8>)
2000525c:	691b      	ldr	r3, [r3, #16]
2000525e:	4a1e      	ldr	r2, [pc, #120]	; (200052d8 <HAL_FLASHEx_Erase_IT+0xa8>)
20005260:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20005264:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
20005266:	4b1c      	ldr	r3, [pc, #112]	; (200052d8 <HAL_FLASHEx_Erase_IT+0xa8>)
20005268:	22f3      	movs	r2, #243	; 0xf3
2000526a:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
2000526c:	687b      	ldr	r3, [r7, #4]
2000526e:	681b      	ldr	r3, [r3, #0]
20005270:	2b01      	cmp	r3, #1
20005272:	d110      	bne.n	20005296 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
20005274:	4b17      	ldr	r3, [pc, #92]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
20005276:	2202      	movs	r2, #2
20005278:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
2000527a:	687b      	ldr	r3, [r7, #4]
2000527c:	685b      	ldr	r3, [r3, #4]
2000527e:	4a15      	ldr	r2, [pc, #84]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
20005280:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20005282:	687b      	ldr	r3, [r7, #4]
20005284:	691b      	ldr	r3, [r3, #16]
20005286:	b2da      	uxtb	r2, r3
20005288:	687b      	ldr	r3, [r7, #4]
2000528a:	685b      	ldr	r3, [r3, #4]
2000528c:	4619      	mov	r1, r3
2000528e:	4610      	mov	r0, r2
20005290:	f000 f91e 	bl	200054d0 <FLASH_MassErase>
20005294:	e018      	b.n	200052c8 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
20005296:	4b0f      	ldr	r3, [pc, #60]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
20005298:	2201      	movs	r2, #1
2000529a:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
2000529c:	687b      	ldr	r3, [r7, #4]
2000529e:	68db      	ldr	r3, [r3, #12]
200052a0:	4a0c      	ldr	r2, [pc, #48]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
200052a2:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
200052a4:	687b      	ldr	r3, [r7, #4]
200052a6:	689b      	ldr	r3, [r3, #8]
200052a8:	4a0a      	ldr	r2, [pc, #40]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
200052aa:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
200052ac:	687b      	ldr	r3, [r7, #4]
200052ae:	691b      	ldr	r3, [r3, #16]
200052b0:	b2da      	uxtb	r2, r3
200052b2:	4b08      	ldr	r3, [pc, #32]	; (200052d4 <HAL_FLASHEx_Erase_IT+0xa4>)
200052b4:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
200052b6:	687b      	ldr	r3, [r7, #4]
200052b8:	689a      	ldr	r2, [r3, #8]
200052ba:	687b      	ldr	r3, [r7, #4]
200052bc:	691b      	ldr	r3, [r3, #16]
200052be:	b2db      	uxtb	r3, r3
200052c0:	4619      	mov	r1, r3
200052c2:	4610      	mov	r0, r2
200052c4:	f000 f928 	bl	20005518 <FLASH_Erase_Sector>
  }

  return status;
200052c8:	7bfb      	ldrb	r3, [r7, #15]
}
200052ca:	4618      	mov	r0, r3
200052cc:	3710      	adds	r7, #16
200052ce:	46bd      	mov	sp, r7
200052d0:	bd80      	pop	{r7, pc}
200052d2:	bf00      	nop
200052d4:	20000498 	.word	0x20000498
200052d8:	40023c00 	.word	0x40023c00

200052dc <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
200052dc:	b580      	push	{r7, lr}
200052de:	b084      	sub	sp, #16
200052e0:	af00      	add	r7, sp, #0
200052e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
200052e4:	2301      	movs	r3, #1
200052e6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
200052e8:	4b32      	ldr	r3, [pc, #200]	; (200053b4 <HAL_FLASHEx_OBProgram+0xd8>)
200052ea:	7e1b      	ldrb	r3, [r3, #24]
200052ec:	2b01      	cmp	r3, #1
200052ee:	d101      	bne.n	200052f4 <HAL_FLASHEx_OBProgram+0x18>
200052f0:	2302      	movs	r3, #2
200052f2:	e05b      	b.n	200053ac <HAL_FLASHEx_OBProgram+0xd0>
200052f4:	4b2f      	ldr	r3, [pc, #188]	; (200053b4 <HAL_FLASHEx_OBProgram+0xd8>)
200052f6:	2201      	movs	r2, #1
200052f8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
200052fa:	687b      	ldr	r3, [r7, #4]
200052fc:	681b      	ldr	r3, [r3, #0]
200052fe:	f003 0301 	and.w	r3, r3, #1
20005302:	2b00      	cmp	r3, #0
20005304:	d018      	beq.n	20005338 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
20005306:	687b      	ldr	r3, [r7, #4]
20005308:	685b      	ldr	r3, [r3, #4]
2000530a:	2b01      	cmp	r3, #1
2000530c:	d10a      	bne.n	20005324 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
2000530e:	687b      	ldr	r3, [r7, #4]
20005310:	689a      	ldr	r2, [r3, #8]
20005312:	687b      	ldr	r3, [r7, #4]
20005314:	68db      	ldr	r3, [r3, #12]
20005316:	4619      	mov	r1, r3
20005318:	4610      	mov	r0, r2
2000531a:	f000 f945 	bl	200055a8 <FLASH_OB_EnableWRP>
2000531e:	4603      	mov	r3, r0
20005320:	73fb      	strb	r3, [r7, #15]
20005322:	e009      	b.n	20005338 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
20005324:	687b      	ldr	r3, [r7, #4]
20005326:	689a      	ldr	r2, [r3, #8]
20005328:	687b      	ldr	r3, [r7, #4]
2000532a:	68db      	ldr	r3, [r3, #12]
2000532c:	4619      	mov	r1, r3
2000532e:	4610      	mov	r0, r2
20005330:	f000 f95c 	bl	200055ec <FLASH_OB_DisableWRP>
20005334:	4603      	mov	r3, r0
20005336:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
20005338:	687b      	ldr	r3, [r7, #4]
2000533a:	681b      	ldr	r3, [r3, #0]
2000533c:	f003 0302 	and.w	r3, r3, #2
20005340:	2b00      	cmp	r3, #0
20005342:	d007      	beq.n	20005354 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
20005344:	687b      	ldr	r3, [r7, #4]
20005346:	691b      	ldr	r3, [r3, #16]
20005348:	b2db      	uxtb	r3, r3
2000534a:	4618      	mov	r0, r3
2000534c:	f000 f9b0 	bl	200056b0 <FLASH_OB_RDP_LevelConfig>
20005350:	4603      	mov	r3, r0
20005352:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
20005354:	687b      	ldr	r3, [r7, #4]
20005356:	681b      	ldr	r3, [r3, #0]
20005358:	f003 0304 	and.w	r3, r3, #4
2000535c:	2b00      	cmp	r3, #0
2000535e:	d013      	beq.n	20005388 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
20005360:	687b      	ldr	r3, [r7, #4]
20005362:	7e1b      	ldrb	r3, [r3, #24]
20005364:	f003 0320 	and.w	r3, r3, #32
20005368:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
2000536a:	687b      	ldr	r3, [r7, #4]
2000536c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
2000536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20005372:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
20005374:	687b      	ldr	r3, [r7, #4]
20005376:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
20005378:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
2000537c:	b2db      	uxtb	r3, r3
2000537e:	461a      	mov	r2, r3
20005380:	f000 f9b0 	bl	200056e4 <FLASH_OB_UserConfig>
20005384:	4603      	mov	r3, r0
20005386:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
20005388:	687b      	ldr	r3, [r7, #4]
2000538a:	681b      	ldr	r3, [r3, #0]
2000538c:	f003 0308 	and.w	r3, r3, #8
20005390:	2b00      	cmp	r3, #0
20005392:	d007      	beq.n	200053a4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
20005394:	687b      	ldr	r3, [r7, #4]
20005396:	695b      	ldr	r3, [r3, #20]
20005398:	b2db      	uxtb	r3, r3
2000539a:	4618      	mov	r0, r3
2000539c:	f000 f9d2 	bl	20005744 <FLASH_OB_BOR_LevelConfig>
200053a0:	4603      	mov	r3, r0
200053a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
200053a4:	4b03      	ldr	r3, [pc, #12]	; (200053b4 <HAL_FLASHEx_OBProgram+0xd8>)
200053a6:	2200      	movs	r2, #0
200053a8:	761a      	strb	r2, [r3, #24]

  return status;
200053aa:	7bfb      	ldrb	r3, [r7, #15]
}
200053ac:	4618      	mov	r0, r3
200053ae:	3710      	adds	r7, #16
200053b0:	46bd      	mov	sp, r7
200053b2:	bd80      	pop	{r7, pc}
200053b4:	20000498 	.word	0x20000498

200053b8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
200053b8:	b580      	push	{r7, lr}
200053ba:	b082      	sub	sp, #8
200053bc:	af00      	add	r7, sp, #0
200053be:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
200053c0:	687b      	ldr	r3, [r7, #4]
200053c2:	220f      	movs	r2, #15
200053c4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
200053c6:	f000 f9eb 	bl	200057a0 <FLASH_OB_GetWRP>
200053ca:	4603      	mov	r3, r0
200053cc:	461a      	mov	r2, r3
200053ce:	687b      	ldr	r3, [r7, #4]
200053d0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
200053d2:	f000 f9f1 	bl	200057b8 <FLASH_OB_GetRDP>
200053d6:	4603      	mov	r3, r0
200053d8:	461a      	mov	r2, r3
200053da:	687b      	ldr	r3, [r7, #4]
200053dc:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
200053de:	f000 f9cf 	bl	20005780 <FLASH_OB_GetUser>
200053e2:	4603      	mov	r3, r0
200053e4:	461a      	mov	r2, r3
200053e6:	687b      	ldr	r3, [r7, #4]
200053e8:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
200053ea:	f000 fa05 	bl	200057f8 <FLASH_OB_GetBOR>
200053ee:	4603      	mov	r3, r0
200053f0:	461a      	mov	r2, r3
200053f2:	687b      	ldr	r3, [r7, #4]
200053f4:	615a      	str	r2, [r3, #20]
}
200053f6:	bf00      	nop
200053f8:	3708      	adds	r7, #8
200053fa:	46bd      	mov	sp, r7
200053fc:	bd80      	pop	{r7, pc}

200053fe <HAL_FLASHEx_AdvOBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_AdvOBProgram(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
200053fe:	b580      	push	{r7, lr}
20005400:	b084      	sub	sp, #16
20005402:	af00      	add	r7, sp, #0
20005404:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
20005406:	2301      	movs	r3, #1
20005408:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OBEX(pAdvOBInit->OptionType));

  /*Program PCROP option byte*/
  if (((pAdvOBInit->OptionType) & OPTIONBYTE_PCROP) == OPTIONBYTE_PCROP)
2000540a:	687b      	ldr	r3, [r7, #4]
2000540c:	681b      	ldr	r3, [r3, #0]
2000540e:	f003 0301 	and.w	r3, r3, #1
20005412:	2b00      	cmp	r3, #0
20005414:	d012      	beq.n	2000543c <HAL_FLASHEx_AdvOBProgram+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_PCROPSTATE(pAdvOBInit->PCROPState));
    if ((pAdvOBInit->PCROPState) == OB_PCROP_STATE_ENABLE)
20005416:	687b      	ldr	r3, [r7, #4]
20005418:	685b      	ldr	r3, [r3, #4]
2000541a:	2b01      	cmp	r3, #1
2000541c:	d107      	bne.n	2000542e <HAL_FLASHEx_AdvOBProgram+0x30>
    {
      /*Enable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_EnablePCROP(pAdvOBInit->Sectors);
2000541e:	687b      	ldr	r3, [r7, #4]
20005420:	891b      	ldrh	r3, [r3, #8]
20005422:	4618      	mov	r0, r3
20005424:	f000 f902 	bl	2000562c <FLASH_OB_EnablePCROP>
20005428:	4603      	mov	r3, r0
2000542a:	73fb      	strb	r3, [r7, #15]
2000542c:	e006      	b.n	2000543c <HAL_FLASHEx_AdvOBProgram+0x3e>
    {
      /*Disable of Write protection on the selected Sector*/
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
      status = FLASH_OB_DisablePCROP(pAdvOBInit->Sectors);
2000542e:	687b      	ldr	r3, [r7, #4]
20005430:	891b      	ldrh	r3, [r3, #8]
20005432:	4618      	mov	r0, r3
20005434:	f000 f91a 	bl	2000566c <FLASH_OB_DisablePCROP>
20005438:	4603      	mov	r3, r0
2000543a:	73fb      	strb	r3, [r7, #15]
  {
    status = FLASH_OB_BootConfig(pAdvOBInit->BootConfig);
  }
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx */

  return status;
2000543c:	7bfb      	ldrb	r3, [r7, #15]
}
2000543e:	4618      	mov	r0, r3
20005440:	3710      	adds	r7, #16
20005442:	46bd      	mov	sp, r7
20005444:	bd80      	pop	{r7, pc}
	...

20005448 <HAL_FLASHEx_AdvOBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_AdvOBGetConfig(FLASH_AdvOBProgramInitTypeDef *pAdvOBInit)
{
20005448:	b480      	push	{r7}
2000544a:	b083      	sub	sp, #12
2000544c:	af00      	add	r7, sp, #0
2000544e:	6078      	str	r0, [r7, #4]
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx) ||\
    defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||\
    defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /*Get Sector*/
  pAdvOBInit->Sectors = (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
20005450:	4b05      	ldr	r3, [pc, #20]	; (20005468 <HAL_FLASHEx_AdvOBGetConfig+0x20>)
20005452:	881b      	ldrh	r3, [r3, #0]
20005454:	b29a      	uxth	r2, r3
20005456:	687b      	ldr	r3, [r7, #4]
20005458:	811a      	strh	r2, [r3, #8]

  /*Get Boot config OB*/
  pAdvOBInit->BootConfig = *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS;
#endif /* STM32F401xC || STM32F401xE || STM32F410xx || STM32F411xE || STM32F446xx || STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F412Cx ||
          STM32F413xx || STM32F423xx */
}
2000545a:	bf00      	nop
2000545c:	370c      	adds	r7, #12
2000545e:	46bd      	mov	sp, r7
20005460:	f85d 7b04 	ldr.w	r7, [sp], #4
20005464:	4770      	bx	lr
20005466:	bf00      	nop
20005468:	40023c16 	.word	0x40023c16

2000546c <HAL_FLASHEx_OB_SelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_SelectPCROP(void)
{
2000546c:	b480      	push	{r7}
2000546e:	b083      	sub	sp, #12
20005470:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
20005472:	23ff      	movs	r3, #255	; 0xff
20005474:	71fb      	strb	r3, [r7, #7]

  /* Mask SPRMOD bit */
  optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F);
20005476:	4b09      	ldr	r3, [pc, #36]	; (2000549c <HAL_FLASHEx_OB_SelectPCROP+0x30>)
20005478:	781b      	ldrb	r3, [r3, #0]
2000547a:	b2db      	uxtb	r3, r3
2000547c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
20005480:	71fb      	strb	r3, [r7, #7]

  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_SELECTED | optiontmp);
20005482:	4a06      	ldr	r2, [pc, #24]	; (2000549c <HAL_FLASHEx_OB_SelectPCROP+0x30>)
20005484:	79fb      	ldrb	r3, [r7, #7]
20005486:	f063 037f 	orn	r3, r3, #127	; 0x7f
2000548a:	b2db      	uxtb	r3, r3
2000548c:	7013      	strb	r3, [r2, #0]

  return HAL_OK;
2000548e:	2300      	movs	r3, #0
}
20005490:	4618      	mov	r0, r3
20005492:	370c      	adds	r7, #12
20005494:	46bd      	mov	sp, r7
20005496:	f85d 7b04 	ldr.w	r7, [sp], #4
2000549a:	4770      	bx	lr
2000549c:	40023c17 	.word	0x40023c17

200054a0 <HAL_FLASHEx_OB_DeSelectPCROP>:
  *         STM32F469xx/STM32F479xx/STM32F412xx/STM32F413xx devices.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OB_DeSelectPCROP(void)
{
200054a0:	b480      	push	{r7}
200054a2:	b083      	sub	sp, #12
200054a4:	af00      	add	r7, sp, #0
  uint8_t optiontmp = 0xFF;
200054a6:	23ff      	movs	r3, #255	; 0xff
200054a8:	71fb      	strb	r3, [r7, #7]

  /* Mask SPRMOD bit */
  optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F);
200054aa:	4b08      	ldr	r3, [pc, #32]	; (200054cc <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
200054ac:	781b      	ldrb	r3, [r3, #0]
200054ae:	b2db      	uxtb	r3, r3
200054b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
200054b4:	71fb      	strb	r3, [r7, #7]

  /* Update Option Byte */
  *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PCROP_DESELECTED | optiontmp);
200054b6:	4a05      	ldr	r2, [pc, #20]	; (200054cc <HAL_FLASHEx_OB_DeSelectPCROP+0x2c>)
200054b8:	79fb      	ldrb	r3, [r7, #7]
200054ba:	7013      	strb	r3, [r2, #0]

  return HAL_OK;
200054bc:	2300      	movs	r3, #0
}
200054be:	4618      	mov	r0, r3
200054c0:	370c      	adds	r7, #12
200054c2:	46bd      	mov	sp, r7
200054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
200054c8:	4770      	bx	lr
200054ca:	bf00      	nop
200054cc:	40023c17 	.word	0x40023c17

200054d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
200054d0:	b480      	push	{r7}
200054d2:	b083      	sub	sp, #12
200054d4:	af00      	add	r7, sp, #0
200054d6:	4603      	mov	r3, r0
200054d8:	6039      	str	r1, [r7, #0]
200054da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
200054dc:	4b0d      	ldr	r3, [pc, #52]	; (20005514 <FLASH_MassErase+0x44>)
200054de:	691b      	ldr	r3, [r3, #16]
200054e0:	4a0c      	ldr	r2, [pc, #48]	; (20005514 <FLASH_MassErase+0x44>)
200054e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200054e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
200054e8:	4b0a      	ldr	r3, [pc, #40]	; (20005514 <FLASH_MassErase+0x44>)
200054ea:	691b      	ldr	r3, [r3, #16]
200054ec:	4a09      	ldr	r2, [pc, #36]	; (20005514 <FLASH_MassErase+0x44>)
200054ee:	f043 0304 	orr.w	r3, r3, #4
200054f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
200054f4:	4b07      	ldr	r3, [pc, #28]	; (20005514 <FLASH_MassErase+0x44>)
200054f6:	691a      	ldr	r2, [r3, #16]
200054f8:	79fb      	ldrb	r3, [r7, #7]
200054fa:	021b      	lsls	r3, r3, #8
200054fc:	4313      	orrs	r3, r2
200054fe:	4a05      	ldr	r2, [pc, #20]	; (20005514 <FLASH_MassErase+0x44>)
20005500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005504:	6113      	str	r3, [r2, #16]
}
20005506:	bf00      	nop
20005508:	370c      	adds	r7, #12
2000550a:	46bd      	mov	sp, r7
2000550c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005510:	4770      	bx	lr
20005512:	bf00      	nop
20005514:	40023c00 	.word	0x40023c00

20005518 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
20005518:	b480      	push	{r7}
2000551a:	b085      	sub	sp, #20
2000551c:	af00      	add	r7, sp, #0
2000551e:	6078      	str	r0, [r7, #4]
20005520:	460b      	mov	r3, r1
20005522:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
20005524:	2300      	movs	r3, #0
20005526:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
20005528:	78fb      	ldrb	r3, [r7, #3]
2000552a:	2b00      	cmp	r3, #0
2000552c:	d102      	bne.n	20005534 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
2000552e:	2300      	movs	r3, #0
20005530:	60fb      	str	r3, [r7, #12]
20005532:	e010      	b.n	20005556 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
20005534:	78fb      	ldrb	r3, [r7, #3]
20005536:	2b01      	cmp	r3, #1
20005538:	d103      	bne.n	20005542 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
2000553a:	f44f 7380 	mov.w	r3, #256	; 0x100
2000553e:	60fb      	str	r3, [r7, #12]
20005540:	e009      	b.n	20005556 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
20005542:	78fb      	ldrb	r3, [r7, #3]
20005544:	2b02      	cmp	r3, #2
20005546:	d103      	bne.n	20005550 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
20005548:	f44f 7300 	mov.w	r3, #512	; 0x200
2000554c:	60fb      	str	r3, [r7, #12]
2000554e:	e002      	b.n	20005556 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20005550:	f44f 7340 	mov.w	r3, #768	; 0x300
20005554:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20005556:	4b13      	ldr	r3, [pc, #76]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
20005558:	691b      	ldr	r3, [r3, #16]
2000555a:	4a12      	ldr	r2, [pc, #72]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
2000555c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20005560:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
20005562:	4b10      	ldr	r3, [pc, #64]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
20005564:	691a      	ldr	r2, [r3, #16]
20005566:	490f      	ldr	r1, [pc, #60]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
20005568:	68fb      	ldr	r3, [r7, #12]
2000556a:	4313      	orrs	r3, r2
2000556c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
2000556e:	4b0d      	ldr	r3, [pc, #52]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
20005570:	691b      	ldr	r3, [r3, #16]
20005572:	4a0c      	ldr	r2, [pc, #48]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
20005574:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20005578:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
2000557a:	4b0a      	ldr	r3, [pc, #40]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
2000557c:	691a      	ldr	r2, [r3, #16]
2000557e:	687b      	ldr	r3, [r7, #4]
20005580:	00db      	lsls	r3, r3, #3
20005582:	4313      	orrs	r3, r2
20005584:	4a07      	ldr	r2, [pc, #28]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
20005586:	f043 0302 	orr.w	r3, r3, #2
2000558a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
2000558c:	4b05      	ldr	r3, [pc, #20]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
2000558e:	691b      	ldr	r3, [r3, #16]
20005590:	4a04      	ldr	r2, [pc, #16]	; (200055a4 <FLASH_Erase_Sector+0x8c>)
20005592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005596:	6113      	str	r3, [r2, #16]
}
20005598:	bf00      	nop
2000559a:	3714      	adds	r7, #20
2000559c:	46bd      	mov	sp, r7
2000559e:	f85d 7b04 	ldr.w	r7, [sp], #4
200055a2:	4770      	bx	lr
200055a4:	40023c00 	.word	0x40023c00

200055a8 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
200055a8:	b580      	push	{r7, lr}
200055aa:	b084      	sub	sp, #16
200055ac:	af00      	add	r7, sp, #0
200055ae:	6078      	str	r0, [r7, #4]
200055b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200055b2:	2300      	movs	r3, #0
200055b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200055b6:	f24c 3050 	movw	r0, #50000	; 0xc350
200055ba:	f7ff fc89 	bl	20004ed0 <FLASH_WaitForLastOperation>
200055be:	4603      	mov	r3, r0
200055c0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
200055c2:	7bfb      	ldrb	r3, [r7, #15]
200055c4:	2b00      	cmp	r3, #0
200055c6:	d10a      	bne.n	200055de <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
200055c8:	4b07      	ldr	r3, [pc, #28]	; (200055e8 <FLASH_OB_EnableWRP+0x40>)
200055ca:	881b      	ldrh	r3, [r3, #0]
200055cc:	b29a      	uxth	r2, r3
200055ce:	687b      	ldr	r3, [r7, #4]
200055d0:	b29b      	uxth	r3, r3
200055d2:	43db      	mvns	r3, r3
200055d4:	b29b      	uxth	r3, r3
200055d6:	4904      	ldr	r1, [pc, #16]	; (200055e8 <FLASH_OB_EnableWRP+0x40>)
200055d8:	4013      	ands	r3, r2
200055da:	b29b      	uxth	r3, r3
200055dc:	800b      	strh	r3, [r1, #0]
  }

  return status;
200055de:	7bfb      	ldrb	r3, [r7, #15]
}
200055e0:	4618      	mov	r0, r3
200055e2:	3710      	adds	r7, #16
200055e4:	46bd      	mov	sp, r7
200055e6:	bd80      	pop	{r7, pc}
200055e8:	40023c16 	.word	0x40023c16

200055ec <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
200055ec:	b580      	push	{r7, lr}
200055ee:	b084      	sub	sp, #16
200055f0:	af00      	add	r7, sp, #0
200055f2:	6078      	str	r0, [r7, #4]
200055f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200055f6:	2300      	movs	r3, #0
200055f8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200055fa:	f24c 3050 	movw	r0, #50000	; 0xc350
200055fe:	f7ff fc67 	bl	20004ed0 <FLASH_WaitForLastOperation>
20005602:	4603      	mov	r3, r0
20005604:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005606:	7bfb      	ldrb	r3, [r7, #15]
20005608:	2b00      	cmp	r3, #0
2000560a:	d108      	bne.n	2000561e <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
2000560c:	4b06      	ldr	r3, [pc, #24]	; (20005628 <FLASH_OB_DisableWRP+0x3c>)
2000560e:	881b      	ldrh	r3, [r3, #0]
20005610:	b29a      	uxth	r2, r3
20005612:	687b      	ldr	r3, [r7, #4]
20005614:	b29b      	uxth	r3, r3
20005616:	4904      	ldr	r1, [pc, #16]	; (20005628 <FLASH_OB_DisableWRP+0x3c>)
20005618:	4313      	orrs	r3, r2
2000561a:	b29b      	uxth	r3, r3
2000561c:	800b      	strh	r3, [r1, #0]
  }

  return status;
2000561e:	7bfb      	ldrb	r3, [r7, #15]
}
20005620:	4618      	mov	r0, r3
20005622:	3710      	adds	r7, #16
20005624:	46bd      	mov	sp, r7
20005626:	bd80      	pop	{r7, pc}
20005628:	40023c16 	.word	0x40023c16

2000562c <FLASH_OB_EnablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnablePCROP(uint32_t Sector)
{
2000562c:	b580      	push	{r7, lr}
2000562e:	b084      	sub	sp, #16
20005630:	af00      	add	r7, sp, #0
20005632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20005634:	2300      	movs	r3, #0
20005636:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005638:	f24c 3050 	movw	r0, #50000	; 0xc350
2000563c:	f7ff fc48 	bl	20004ed0 <FLASH_WaitForLastOperation>
20005640:	4603      	mov	r3, r0
20005642:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005644:	7bfb      	ldrb	r3, [r7, #15]
20005646:	2b00      	cmp	r3, #0
20005648:	d108      	bne.n	2000565c <FLASH_OB_EnablePCROP+0x30>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)Sector;
2000564a:	4b07      	ldr	r3, [pc, #28]	; (20005668 <FLASH_OB_EnablePCROP+0x3c>)
2000564c:	881b      	ldrh	r3, [r3, #0]
2000564e:	b29a      	uxth	r2, r3
20005650:	687b      	ldr	r3, [r7, #4]
20005652:	b29b      	uxth	r3, r3
20005654:	4904      	ldr	r1, [pc, #16]	; (20005668 <FLASH_OB_EnablePCROP+0x3c>)
20005656:	4313      	orrs	r3, r2
20005658:	b29b      	uxth	r3, r3
2000565a:	800b      	strh	r3, [r1, #0]
  }

  return status;
2000565c:	7bfb      	ldrb	r3, [r7, #15]
}
2000565e:	4618      	mov	r0, r3
20005660:	3710      	adds	r7, #16
20005662:	46bd      	mov	sp, r7
20005664:	bd80      	pop	{r7, pc}
20005666:	bf00      	nop
20005668:	40023c16 	.word	0x40023c16

2000566c <FLASH_OB_DisablePCROP>:
  *            @arg OB_PCROP: A value between OB_PCROP_Sector0 and OB_PCROP_Sector5
  *            @arg OB_PCROP_Sector_All
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisablePCROP(uint32_t Sector)
{
2000566c:	b580      	push	{r7, lr}
2000566e:	b084      	sub	sp, #16
20005670:	af00      	add	r7, sp, #0
20005672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20005674:	2300      	movs	r3, #0
20005676:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_PCROP(Sector));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005678:	f24c 3050 	movw	r0, #50000	; 0xc350
2000567c:	f7ff fc28 	bl	20004ed0 <FLASH_WaitForLastOperation>
20005680:	4603      	mov	r3, r0
20005682:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
20005684:	7bfb      	ldrb	r3, [r7, #15]
20005686:	2b00      	cmp	r3, #0
20005688:	d10a      	bne.n	200056a0 <FLASH_OB_DisablePCROP+0x34>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~Sector);
2000568a:	4b08      	ldr	r3, [pc, #32]	; (200056ac <FLASH_OB_DisablePCROP+0x40>)
2000568c:	881b      	ldrh	r3, [r3, #0]
2000568e:	b29a      	uxth	r2, r3
20005690:	687b      	ldr	r3, [r7, #4]
20005692:	b29b      	uxth	r3, r3
20005694:	43db      	mvns	r3, r3
20005696:	b29b      	uxth	r3, r3
20005698:	4904      	ldr	r1, [pc, #16]	; (200056ac <FLASH_OB_DisablePCROP+0x40>)
2000569a:	4013      	ands	r3, r2
2000569c:	b29b      	uxth	r3, r3
2000569e:	800b      	strh	r3, [r1, #0]
  }

  return status;
200056a0:	7bfb      	ldrb	r3, [r7, #15]

}
200056a2:	4618      	mov	r0, r3
200056a4:	3710      	adds	r7, #16
200056a6:	46bd      	mov	sp, r7
200056a8:	bd80      	pop	{r7, pc}
200056aa:	bf00      	nop
200056ac:	40023c16 	.word	0x40023c16

200056b0 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
200056b0:	b580      	push	{r7, lr}
200056b2:	b084      	sub	sp, #16
200056b4:	af00      	add	r7, sp, #0
200056b6:	4603      	mov	r3, r0
200056b8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
200056ba:	2300      	movs	r3, #0
200056bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200056be:	f24c 3050 	movw	r0, #50000	; 0xc350
200056c2:	f7ff fc05 	bl	20004ed0 <FLASH_WaitForLastOperation>
200056c6:	4603      	mov	r3, r0
200056c8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
200056ca:	7bfb      	ldrb	r3, [r7, #15]
200056cc:	2b00      	cmp	r3, #0
200056ce:	d102      	bne.n	200056d6 <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
200056d0:	4a03      	ldr	r2, [pc, #12]	; (200056e0 <FLASH_OB_RDP_LevelConfig+0x30>)
200056d2:	79fb      	ldrb	r3, [r7, #7]
200056d4:	7013      	strb	r3, [r2, #0]
  }

  return status;
200056d6:	7bfb      	ldrb	r3, [r7, #15]
}
200056d8:	4618      	mov	r0, r3
200056da:	3710      	adds	r7, #16
200056dc:	46bd      	mov	sp, r7
200056de:	bd80      	pop	{r7, pc}
200056e0:	40023c15 	.word	0x40023c15

200056e4 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
200056e4:	b580      	push	{r7, lr}
200056e6:	b084      	sub	sp, #16
200056e8:	af00      	add	r7, sp, #0
200056ea:	4603      	mov	r3, r0
200056ec:	71fb      	strb	r3, [r7, #7]
200056ee:	460b      	mov	r3, r1
200056f0:	71bb      	strb	r3, [r7, #6]
200056f2:	4613      	mov	r3, r2
200056f4:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
200056f6:	23ff      	movs	r3, #255	; 0xff
200056f8:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
200056fa:	2300      	movs	r3, #0
200056fc:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200056fe:	f24c 3050 	movw	r0, #50000	; 0xc350
20005702:	f7ff fbe5 	bl	20004ed0 <FLASH_WaitForLastOperation>
20005706:	4603      	mov	r3, r0
20005708:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
2000570a:	7bbb      	ldrb	r3, [r7, #14]
2000570c:	2b00      	cmp	r3, #0
2000570e:	d111      	bne.n	20005734 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
20005710:	4b0b      	ldr	r3, [pc, #44]	; (20005740 <FLASH_OB_UserConfig+0x5c>)
20005712:	781b      	ldrb	r3, [r3, #0]
20005714:	b2db      	uxtb	r3, r3
20005716:	f003 031f 	and.w	r3, r3, #31
2000571a:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
2000571c:	79ba      	ldrb	r2, [r7, #6]
2000571e:	7bfb      	ldrb	r3, [r7, #15]
20005720:	4313      	orrs	r3, r2
20005722:	b2da      	uxtb	r2, r3
20005724:	797b      	ldrb	r3, [r7, #5]
20005726:	4313      	orrs	r3, r2
20005728:	b2da      	uxtb	r2, r3
2000572a:	4905      	ldr	r1, [pc, #20]	; (20005740 <FLASH_OB_UserConfig+0x5c>)
2000572c:	79fb      	ldrb	r3, [r7, #7]
2000572e:	4313      	orrs	r3, r2
20005730:	b2db      	uxtb	r3, r3
20005732:	700b      	strb	r3, [r1, #0]
  }

  return status;
20005734:	7bbb      	ldrb	r3, [r7, #14]
}
20005736:	4618      	mov	r0, r3
20005738:	3710      	adds	r7, #16
2000573a:	46bd      	mov	sp, r7
2000573c:	bd80      	pop	{r7, pc}
2000573e:	bf00      	nop
20005740:	40023c14 	.word	0x40023c14

20005744 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
20005744:	b480      	push	{r7}
20005746:	b083      	sub	sp, #12
20005748:	af00      	add	r7, sp, #0
2000574a:	4603      	mov	r3, r0
2000574c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
2000574e:	4b0b      	ldr	r3, [pc, #44]	; (2000577c <FLASH_OB_BOR_LevelConfig+0x38>)
20005750:	781b      	ldrb	r3, [r3, #0]
20005752:	b2db      	uxtb	r3, r3
20005754:	4a09      	ldr	r2, [pc, #36]	; (2000577c <FLASH_OB_BOR_LevelConfig+0x38>)
20005756:	f023 030c 	bic.w	r3, r3, #12
2000575a:	b2db      	uxtb	r3, r3
2000575c:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
2000575e:	4b07      	ldr	r3, [pc, #28]	; (2000577c <FLASH_OB_BOR_LevelConfig+0x38>)
20005760:	781b      	ldrb	r3, [r3, #0]
20005762:	b2da      	uxtb	r2, r3
20005764:	4905      	ldr	r1, [pc, #20]	; (2000577c <FLASH_OB_BOR_LevelConfig+0x38>)
20005766:	79fb      	ldrb	r3, [r7, #7]
20005768:	4313      	orrs	r3, r2
2000576a:	b2db      	uxtb	r3, r3
2000576c:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
2000576e:	2300      	movs	r3, #0

}
20005770:	4618      	mov	r0, r3
20005772:	370c      	adds	r7, #12
20005774:	46bd      	mov	sp, r7
20005776:	f85d 7b04 	ldr.w	r7, [sp], #4
2000577a:	4770      	bx	lr
2000577c:	40023c14 	.word	0x40023c14

20005780 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
20005780:	b480      	push	{r7}
20005782:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
20005784:	4b05      	ldr	r3, [pc, #20]	; (2000579c <FLASH_OB_GetUser+0x1c>)
20005786:	695b      	ldr	r3, [r3, #20]
20005788:	b2db      	uxtb	r3, r3
2000578a:	f023 031f 	bic.w	r3, r3, #31
2000578e:	b2db      	uxtb	r3, r3
}
20005790:	4618      	mov	r0, r3
20005792:	46bd      	mov	sp, r7
20005794:	f85d 7b04 	ldr.w	r7, [sp], #4
20005798:	4770      	bx	lr
2000579a:	bf00      	nop
2000579c:	40023c00 	.word	0x40023c00

200057a0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
200057a0:	b480      	push	{r7}
200057a2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
200057a4:	4b03      	ldr	r3, [pc, #12]	; (200057b4 <FLASH_OB_GetWRP+0x14>)
200057a6:	881b      	ldrh	r3, [r3, #0]
200057a8:	b29b      	uxth	r3, r3
}
200057aa:	4618      	mov	r0, r3
200057ac:	46bd      	mov	sp, r7
200057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200057b2:	4770      	bx	lr
200057b4:	40023c16 	.word	0x40023c16

200057b8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
200057b8:	b480      	push	{r7}
200057ba:	b083      	sub	sp, #12
200057bc:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
200057be:	23aa      	movs	r3, #170	; 0xaa
200057c0:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
200057c2:	4b0c      	ldr	r3, [pc, #48]	; (200057f4 <FLASH_OB_GetRDP+0x3c>)
200057c4:	781b      	ldrb	r3, [r3, #0]
200057c6:	b2db      	uxtb	r3, r3
200057c8:	2bcc      	cmp	r3, #204	; 0xcc
200057ca:	d102      	bne.n	200057d2 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
200057cc:	23cc      	movs	r3, #204	; 0xcc
200057ce:	71fb      	strb	r3, [r7, #7]
200057d0:	e009      	b.n	200057e6 <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
200057d2:	4b08      	ldr	r3, [pc, #32]	; (200057f4 <FLASH_OB_GetRDP+0x3c>)
200057d4:	781b      	ldrb	r3, [r3, #0]
200057d6:	b2db      	uxtb	r3, r3
200057d8:	2baa      	cmp	r3, #170	; 0xaa
200057da:	d102      	bne.n	200057e2 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
200057dc:	23aa      	movs	r3, #170	; 0xaa
200057de:	71fb      	strb	r3, [r7, #7]
200057e0:	e001      	b.n	200057e6 <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
200057e2:	2355      	movs	r3, #85	; 0x55
200057e4:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
200057e6:	79fb      	ldrb	r3, [r7, #7]
}
200057e8:	4618      	mov	r0, r3
200057ea:	370c      	adds	r7, #12
200057ec:	46bd      	mov	sp, r7
200057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200057f2:	4770      	bx	lr
200057f4:	40023c15 	.word	0x40023c15

200057f8 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
200057f8:	b480      	push	{r7}
200057fa:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
200057fc:	4b05      	ldr	r3, [pc, #20]	; (20005814 <FLASH_OB_GetBOR+0x1c>)
200057fe:	781b      	ldrb	r3, [r3, #0]
20005800:	b2db      	uxtb	r3, r3
20005802:	f003 030c 	and.w	r3, r3, #12
20005806:	b2db      	uxtb	r3, r3
}
20005808:	4618      	mov	r0, r3
2000580a:	46bd      	mov	sp, r7
2000580c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005810:	4770      	bx	lr
20005812:	bf00      	nop
20005814:	40023c14 	.word	0x40023c14

20005818 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
20005818:	b480      	push	{r7}
2000581a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
2000581c:	4b20      	ldr	r3, [pc, #128]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000581e:	681b      	ldr	r3, [r3, #0]
20005820:	f403 7300 	and.w	r3, r3, #512	; 0x200
20005824:	2b00      	cmp	r3, #0
20005826:	d017      	beq.n	20005858 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
20005828:	4b1d      	ldr	r3, [pc, #116]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000582a:	681b      	ldr	r3, [r3, #0]
2000582c:	4a1c      	ldr	r2, [pc, #112]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000582e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20005832:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
20005834:	4b1a      	ldr	r3, [pc, #104]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005836:	681b      	ldr	r3, [r3, #0]
20005838:	4a19      	ldr	r2, [pc, #100]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000583a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
2000583e:	6013      	str	r3, [r2, #0]
20005840:	4b17      	ldr	r3, [pc, #92]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005842:	681b      	ldr	r3, [r3, #0]
20005844:	4a16      	ldr	r2, [pc, #88]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2000584a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000584c:	4b14      	ldr	r3, [pc, #80]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000584e:	681b      	ldr	r3, [r3, #0]
20005850:	4a13      	ldr	r2, [pc, #76]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20005856:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
20005858:	4b11      	ldr	r3, [pc, #68]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000585a:	681b      	ldr	r3, [r3, #0]
2000585c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20005860:	2b00      	cmp	r3, #0
20005862:	d017      	beq.n	20005894 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
20005864:	4b0e      	ldr	r3, [pc, #56]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005866:	681b      	ldr	r3, [r3, #0]
20005868:	4a0d      	ldr	r2, [pc, #52]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000586a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
2000586e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
20005870:	4b0b      	ldr	r3, [pc, #44]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005872:	681b      	ldr	r3, [r3, #0]
20005874:	4a0a      	ldr	r2, [pc, #40]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005876:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2000587a:	6013      	str	r3, [r2, #0]
2000587c:	4b08      	ldr	r3, [pc, #32]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000587e:	681b      	ldr	r3, [r3, #0]
20005880:	4a07      	ldr	r2, [pc, #28]	; (200058a0 <FLASH_FlushCaches+0x88>)
20005882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
20005886:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
20005888:	4b05      	ldr	r3, [pc, #20]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000588a:	681b      	ldr	r3, [r3, #0]
2000588c:	4a04      	ldr	r2, [pc, #16]	; (200058a0 <FLASH_FlushCaches+0x88>)
2000588e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20005892:	6013      	str	r3, [r2, #0]
  }
}
20005894:	bf00      	nop
20005896:	46bd      	mov	sp, r7
20005898:	f85d 7b04 	ldr.w	r7, [sp], #4
2000589c:	4770      	bx	lr
2000589e:	bf00      	nop
200058a0:	40023c00 	.word	0x40023c00

200058a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
200058a4:	b480      	push	{r7}
200058a6:	b089      	sub	sp, #36	; 0x24
200058a8:	af00      	add	r7, sp, #0
200058aa:	6078      	str	r0, [r7, #4]
200058ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
200058ae:	2300      	movs	r3, #0
200058b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
200058b2:	2300      	movs	r3, #0
200058b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
200058b6:	2300      	movs	r3, #0
200058b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
200058ba:	2300      	movs	r3, #0
200058bc:	61fb      	str	r3, [r7, #28]
200058be:	e159      	b.n	20005b74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
200058c0:	2201      	movs	r2, #1
200058c2:	69fb      	ldr	r3, [r7, #28]
200058c4:	fa02 f303 	lsl.w	r3, r2, r3
200058c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200058ca:	683b      	ldr	r3, [r7, #0]
200058cc:	681b      	ldr	r3, [r3, #0]
200058ce:	697a      	ldr	r2, [r7, #20]
200058d0:	4013      	ands	r3, r2
200058d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
200058d4:	693a      	ldr	r2, [r7, #16]
200058d6:	697b      	ldr	r3, [r7, #20]
200058d8:	429a      	cmp	r2, r3
200058da:	f040 8148 	bne.w	20005b6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200058de:	683b      	ldr	r3, [r7, #0]
200058e0:	685b      	ldr	r3, [r3, #4]
200058e2:	f003 0303 	and.w	r3, r3, #3
200058e6:	2b01      	cmp	r3, #1
200058e8:	d005      	beq.n	200058f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200058ea:	683b      	ldr	r3, [r7, #0]
200058ec:	685b      	ldr	r3, [r3, #4]
200058ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
200058f2:	2b02      	cmp	r3, #2
200058f4:	d130      	bne.n	20005958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
200058f6:	687b      	ldr	r3, [r7, #4]
200058f8:	689b      	ldr	r3, [r3, #8]
200058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
200058fc:	69fb      	ldr	r3, [r7, #28]
200058fe:	005b      	lsls	r3, r3, #1
20005900:	2203      	movs	r2, #3
20005902:	fa02 f303 	lsl.w	r3, r2, r3
20005906:	43db      	mvns	r3, r3
20005908:	69ba      	ldr	r2, [r7, #24]
2000590a:	4013      	ands	r3, r2
2000590c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000590e:	683b      	ldr	r3, [r7, #0]
20005910:	68da      	ldr	r2, [r3, #12]
20005912:	69fb      	ldr	r3, [r7, #28]
20005914:	005b      	lsls	r3, r3, #1
20005916:	fa02 f303 	lsl.w	r3, r2, r3
2000591a:	69ba      	ldr	r2, [r7, #24]
2000591c:	4313      	orrs	r3, r2
2000591e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20005920:	687b      	ldr	r3, [r7, #4]
20005922:	69ba      	ldr	r2, [r7, #24]
20005924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
20005926:	687b      	ldr	r3, [r7, #4]
20005928:	685b      	ldr	r3, [r3, #4]
2000592a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000592c:	2201      	movs	r2, #1
2000592e:	69fb      	ldr	r3, [r7, #28]
20005930:	fa02 f303 	lsl.w	r3, r2, r3
20005934:	43db      	mvns	r3, r3
20005936:	69ba      	ldr	r2, [r7, #24]
20005938:	4013      	ands	r3, r2
2000593a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
2000593c:	683b      	ldr	r3, [r7, #0]
2000593e:	685b      	ldr	r3, [r3, #4]
20005940:	091b      	lsrs	r3, r3, #4
20005942:	f003 0201 	and.w	r2, r3, #1
20005946:	69fb      	ldr	r3, [r7, #28]
20005948:	fa02 f303 	lsl.w	r3, r2, r3
2000594c:	69ba      	ldr	r2, [r7, #24]
2000594e:	4313      	orrs	r3, r2
20005950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20005952:	687b      	ldr	r3, [r7, #4]
20005954:	69ba      	ldr	r2, [r7, #24]
20005956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
20005958:	683b      	ldr	r3, [r7, #0]
2000595a:	685b      	ldr	r3, [r3, #4]
2000595c:	f003 0303 	and.w	r3, r3, #3
20005960:	2b03      	cmp	r3, #3
20005962:	d017      	beq.n	20005994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20005964:	687b      	ldr	r3, [r7, #4]
20005966:	68db      	ldr	r3, [r3, #12]
20005968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000596a:	69fb      	ldr	r3, [r7, #28]
2000596c:	005b      	lsls	r3, r3, #1
2000596e:	2203      	movs	r2, #3
20005970:	fa02 f303 	lsl.w	r3, r2, r3
20005974:	43db      	mvns	r3, r3
20005976:	69ba      	ldr	r2, [r7, #24]
20005978:	4013      	ands	r3, r2
2000597a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
2000597c:	683b      	ldr	r3, [r7, #0]
2000597e:	689a      	ldr	r2, [r3, #8]
20005980:	69fb      	ldr	r3, [r7, #28]
20005982:	005b      	lsls	r3, r3, #1
20005984:	fa02 f303 	lsl.w	r3, r2, r3
20005988:	69ba      	ldr	r2, [r7, #24]
2000598a:	4313      	orrs	r3, r2
2000598c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
2000598e:	687b      	ldr	r3, [r7, #4]
20005990:	69ba      	ldr	r2, [r7, #24]
20005992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
20005994:	683b      	ldr	r3, [r7, #0]
20005996:	685b      	ldr	r3, [r3, #4]
20005998:	f003 0303 	and.w	r3, r3, #3
2000599c:	2b02      	cmp	r3, #2
2000599e:	d123      	bne.n	200059e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
200059a0:	69fb      	ldr	r3, [r7, #28]
200059a2:	08da      	lsrs	r2, r3, #3
200059a4:	687b      	ldr	r3, [r7, #4]
200059a6:	3208      	adds	r2, #8
200059a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200059ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
200059ae:	69fb      	ldr	r3, [r7, #28]
200059b0:	f003 0307 	and.w	r3, r3, #7
200059b4:	009b      	lsls	r3, r3, #2
200059b6:	220f      	movs	r2, #15
200059b8:	fa02 f303 	lsl.w	r3, r2, r3
200059bc:	43db      	mvns	r3, r3
200059be:	69ba      	ldr	r2, [r7, #24]
200059c0:	4013      	ands	r3, r2
200059c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
200059c4:	683b      	ldr	r3, [r7, #0]
200059c6:	691a      	ldr	r2, [r3, #16]
200059c8:	69fb      	ldr	r3, [r7, #28]
200059ca:	f003 0307 	and.w	r3, r3, #7
200059ce:	009b      	lsls	r3, r3, #2
200059d0:	fa02 f303 	lsl.w	r3, r2, r3
200059d4:	69ba      	ldr	r2, [r7, #24]
200059d6:	4313      	orrs	r3, r2
200059d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
200059da:	69fb      	ldr	r3, [r7, #28]
200059dc:	08da      	lsrs	r2, r3, #3
200059de:	687b      	ldr	r3, [r7, #4]
200059e0:	3208      	adds	r2, #8
200059e2:	69b9      	ldr	r1, [r7, #24]
200059e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
200059e8:	687b      	ldr	r3, [r7, #4]
200059ea:	681b      	ldr	r3, [r3, #0]
200059ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
200059ee:	69fb      	ldr	r3, [r7, #28]
200059f0:	005b      	lsls	r3, r3, #1
200059f2:	2203      	movs	r2, #3
200059f4:	fa02 f303 	lsl.w	r3, r2, r3
200059f8:	43db      	mvns	r3, r3
200059fa:	69ba      	ldr	r2, [r7, #24]
200059fc:	4013      	ands	r3, r2
200059fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20005a00:	683b      	ldr	r3, [r7, #0]
20005a02:	685b      	ldr	r3, [r3, #4]
20005a04:	f003 0203 	and.w	r2, r3, #3
20005a08:	69fb      	ldr	r3, [r7, #28]
20005a0a:	005b      	lsls	r3, r3, #1
20005a0c:	fa02 f303 	lsl.w	r3, r2, r3
20005a10:	69ba      	ldr	r2, [r7, #24]
20005a12:	4313      	orrs	r3, r2
20005a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
20005a16:	687b      	ldr	r3, [r7, #4]
20005a18:	69ba      	ldr	r2, [r7, #24]
20005a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
20005a1c:	683b      	ldr	r3, [r7, #0]
20005a1e:	685b      	ldr	r3, [r3, #4]
20005a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20005a24:	2b00      	cmp	r3, #0
20005a26:	f000 80a2 	beq.w	20005b6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
20005a2a:	2300      	movs	r3, #0
20005a2c:	60fb      	str	r3, [r7, #12]
20005a2e:	4b57      	ldr	r3, [pc, #348]	; (20005b8c <HAL_GPIO_Init+0x2e8>)
20005a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20005a32:	4a56      	ldr	r2, [pc, #344]	; (20005b8c <HAL_GPIO_Init+0x2e8>)
20005a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20005a38:	6453      	str	r3, [r2, #68]	; 0x44
20005a3a:	4b54      	ldr	r3, [pc, #336]	; (20005b8c <HAL_GPIO_Init+0x2e8>)
20005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20005a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20005a42:	60fb      	str	r3, [r7, #12]
20005a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
20005a46:	4a52      	ldr	r2, [pc, #328]	; (20005b90 <HAL_GPIO_Init+0x2ec>)
20005a48:	69fb      	ldr	r3, [r7, #28]
20005a4a:	089b      	lsrs	r3, r3, #2
20005a4c:	3302      	adds	r3, #2
20005a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20005a54:	69fb      	ldr	r3, [r7, #28]
20005a56:	f003 0303 	and.w	r3, r3, #3
20005a5a:	009b      	lsls	r3, r3, #2
20005a5c:	220f      	movs	r2, #15
20005a5e:	fa02 f303 	lsl.w	r3, r2, r3
20005a62:	43db      	mvns	r3, r3
20005a64:	69ba      	ldr	r2, [r7, #24]
20005a66:	4013      	ands	r3, r2
20005a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
20005a6a:	687b      	ldr	r3, [r7, #4]
20005a6c:	4a49      	ldr	r2, [pc, #292]	; (20005b94 <HAL_GPIO_Init+0x2f0>)
20005a6e:	4293      	cmp	r3, r2
20005a70:	d019      	beq.n	20005aa6 <HAL_GPIO_Init+0x202>
20005a72:	687b      	ldr	r3, [r7, #4]
20005a74:	4a48      	ldr	r2, [pc, #288]	; (20005b98 <HAL_GPIO_Init+0x2f4>)
20005a76:	4293      	cmp	r3, r2
20005a78:	d013      	beq.n	20005aa2 <HAL_GPIO_Init+0x1fe>
20005a7a:	687b      	ldr	r3, [r7, #4]
20005a7c:	4a47      	ldr	r2, [pc, #284]	; (20005b9c <HAL_GPIO_Init+0x2f8>)
20005a7e:	4293      	cmp	r3, r2
20005a80:	d00d      	beq.n	20005a9e <HAL_GPIO_Init+0x1fa>
20005a82:	687b      	ldr	r3, [r7, #4]
20005a84:	4a46      	ldr	r2, [pc, #280]	; (20005ba0 <HAL_GPIO_Init+0x2fc>)
20005a86:	4293      	cmp	r3, r2
20005a88:	d007      	beq.n	20005a9a <HAL_GPIO_Init+0x1f6>
20005a8a:	687b      	ldr	r3, [r7, #4]
20005a8c:	4a45      	ldr	r2, [pc, #276]	; (20005ba4 <HAL_GPIO_Init+0x300>)
20005a8e:	4293      	cmp	r3, r2
20005a90:	d101      	bne.n	20005a96 <HAL_GPIO_Init+0x1f2>
20005a92:	2304      	movs	r3, #4
20005a94:	e008      	b.n	20005aa8 <HAL_GPIO_Init+0x204>
20005a96:	2307      	movs	r3, #7
20005a98:	e006      	b.n	20005aa8 <HAL_GPIO_Init+0x204>
20005a9a:	2303      	movs	r3, #3
20005a9c:	e004      	b.n	20005aa8 <HAL_GPIO_Init+0x204>
20005a9e:	2302      	movs	r3, #2
20005aa0:	e002      	b.n	20005aa8 <HAL_GPIO_Init+0x204>
20005aa2:	2301      	movs	r3, #1
20005aa4:	e000      	b.n	20005aa8 <HAL_GPIO_Init+0x204>
20005aa6:	2300      	movs	r3, #0
20005aa8:	69fa      	ldr	r2, [r7, #28]
20005aaa:	f002 0203 	and.w	r2, r2, #3
20005aae:	0092      	lsls	r2, r2, #2
20005ab0:	4093      	lsls	r3, r2
20005ab2:	69ba      	ldr	r2, [r7, #24]
20005ab4:	4313      	orrs	r3, r2
20005ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20005ab8:	4935      	ldr	r1, [pc, #212]	; (20005b90 <HAL_GPIO_Init+0x2ec>)
20005aba:	69fb      	ldr	r3, [r7, #28]
20005abc:	089b      	lsrs	r3, r3, #2
20005abe:	3302      	adds	r3, #2
20005ac0:	69ba      	ldr	r2, [r7, #24]
20005ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20005ac6:	4b38      	ldr	r3, [pc, #224]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005ac8:	689b      	ldr	r3, [r3, #8]
20005aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005acc:	693b      	ldr	r3, [r7, #16]
20005ace:	43db      	mvns	r3, r3
20005ad0:	69ba      	ldr	r2, [r7, #24]
20005ad2:	4013      	ands	r3, r2
20005ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20005ad6:	683b      	ldr	r3, [r7, #0]
20005ad8:	685b      	ldr	r3, [r3, #4]
20005ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
20005ade:	2b00      	cmp	r3, #0
20005ae0:	d003      	beq.n	20005aea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
20005ae2:	69ba      	ldr	r2, [r7, #24]
20005ae4:	693b      	ldr	r3, [r7, #16]
20005ae6:	4313      	orrs	r3, r2
20005ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20005aea:	4a2f      	ldr	r2, [pc, #188]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005aec:	69bb      	ldr	r3, [r7, #24]
20005aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
20005af0:	4b2d      	ldr	r3, [pc, #180]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005af2:	68db      	ldr	r3, [r3, #12]
20005af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005af6:	693b      	ldr	r3, [r7, #16]
20005af8:	43db      	mvns	r3, r3
20005afa:	69ba      	ldr	r2, [r7, #24]
20005afc:	4013      	ands	r3, r2
20005afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
20005b00:	683b      	ldr	r3, [r7, #0]
20005b02:	685b      	ldr	r3, [r3, #4]
20005b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
20005b08:	2b00      	cmp	r3, #0
20005b0a:	d003      	beq.n	20005b14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
20005b0c:	69ba      	ldr	r2, [r7, #24]
20005b0e:	693b      	ldr	r3, [r7, #16]
20005b10:	4313      	orrs	r3, r2
20005b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
20005b14:	4a24      	ldr	r2, [pc, #144]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005b16:	69bb      	ldr	r3, [r7, #24]
20005b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
20005b1a:	4b23      	ldr	r3, [pc, #140]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005b1c:	685b      	ldr	r3, [r3, #4]
20005b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b20:	693b      	ldr	r3, [r7, #16]
20005b22:	43db      	mvns	r3, r3
20005b24:	69ba      	ldr	r2, [r7, #24]
20005b26:	4013      	ands	r3, r2
20005b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
20005b2a:	683b      	ldr	r3, [r7, #0]
20005b2c:	685b      	ldr	r3, [r3, #4]
20005b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005b32:	2b00      	cmp	r3, #0
20005b34:	d003      	beq.n	20005b3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
20005b36:	69ba      	ldr	r2, [r7, #24]
20005b38:	693b      	ldr	r3, [r7, #16]
20005b3a:	4313      	orrs	r3, r2
20005b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
20005b3e:	4a1a      	ldr	r2, [pc, #104]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005b40:	69bb      	ldr	r3, [r7, #24]
20005b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
20005b44:	4b18      	ldr	r3, [pc, #96]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005b46:	681b      	ldr	r3, [r3, #0]
20005b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005b4a:	693b      	ldr	r3, [r7, #16]
20005b4c:	43db      	mvns	r3, r3
20005b4e:	69ba      	ldr	r2, [r7, #24]
20005b50:	4013      	ands	r3, r2
20005b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20005b54:	683b      	ldr	r3, [r7, #0]
20005b56:	685b      	ldr	r3, [r3, #4]
20005b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005b5c:	2b00      	cmp	r3, #0
20005b5e:	d003      	beq.n	20005b68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
20005b60:	69ba      	ldr	r2, [r7, #24]
20005b62:	693b      	ldr	r3, [r7, #16]
20005b64:	4313      	orrs	r3, r2
20005b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20005b68:	4a0f      	ldr	r2, [pc, #60]	; (20005ba8 <HAL_GPIO_Init+0x304>)
20005b6a:	69bb      	ldr	r3, [r7, #24]
20005b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
20005b6e:	69fb      	ldr	r3, [r7, #28]
20005b70:	3301      	adds	r3, #1
20005b72:	61fb      	str	r3, [r7, #28]
20005b74:	69fb      	ldr	r3, [r7, #28]
20005b76:	2b0f      	cmp	r3, #15
20005b78:	f67f aea2 	bls.w	200058c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
20005b7c:	bf00      	nop
20005b7e:	bf00      	nop
20005b80:	3724      	adds	r7, #36	; 0x24
20005b82:	46bd      	mov	sp, r7
20005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b88:	4770      	bx	lr
20005b8a:	bf00      	nop
20005b8c:	40023800 	.word	0x40023800
20005b90:	40013800 	.word	0x40013800
20005b94:	40020000 	.word	0x40020000
20005b98:	40020400 	.word	0x40020400
20005b9c:	40020800 	.word	0x40020800
20005ba0:	40020c00 	.word	0x40020c00
20005ba4:	40021000 	.word	0x40021000
20005ba8:	40013c00 	.word	0x40013c00

20005bac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
20005bac:	b480      	push	{r7}
20005bae:	b087      	sub	sp, #28
20005bb0:	af00      	add	r7, sp, #0
20005bb2:	6078      	str	r0, [r7, #4]
20005bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
20005bb6:	2300      	movs	r3, #0
20005bb8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
20005bba:	2300      	movs	r3, #0
20005bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
20005bbe:	2300      	movs	r3, #0
20005bc0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20005bc2:	2300      	movs	r3, #0
20005bc4:	617b      	str	r3, [r7, #20]
20005bc6:	e0bb      	b.n	20005d40 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
20005bc8:	2201      	movs	r2, #1
20005bca:	697b      	ldr	r3, [r7, #20]
20005bcc:	fa02 f303 	lsl.w	r3, r2, r3
20005bd0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
20005bd2:	683a      	ldr	r2, [r7, #0]
20005bd4:	693b      	ldr	r3, [r7, #16]
20005bd6:	4013      	ands	r3, r2
20005bd8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
20005bda:	68fa      	ldr	r2, [r7, #12]
20005bdc:	693b      	ldr	r3, [r7, #16]
20005bde:	429a      	cmp	r2, r3
20005be0:	f040 80ab 	bne.w	20005d3a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
20005be4:	4a5c      	ldr	r2, [pc, #368]	; (20005d58 <HAL_GPIO_DeInit+0x1ac>)
20005be6:	697b      	ldr	r3, [r7, #20]
20005be8:	089b      	lsrs	r3, r3, #2
20005bea:	3302      	adds	r3, #2
20005bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005bf0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
20005bf2:	697b      	ldr	r3, [r7, #20]
20005bf4:	f003 0303 	and.w	r3, r3, #3
20005bf8:	009b      	lsls	r3, r3, #2
20005bfa:	220f      	movs	r2, #15
20005bfc:	fa02 f303 	lsl.w	r3, r2, r3
20005c00:	68ba      	ldr	r2, [r7, #8]
20005c02:	4013      	ands	r3, r2
20005c04:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
20005c06:	687b      	ldr	r3, [r7, #4]
20005c08:	4a54      	ldr	r2, [pc, #336]	; (20005d5c <HAL_GPIO_DeInit+0x1b0>)
20005c0a:	4293      	cmp	r3, r2
20005c0c:	d019      	beq.n	20005c42 <HAL_GPIO_DeInit+0x96>
20005c0e:	687b      	ldr	r3, [r7, #4]
20005c10:	4a53      	ldr	r2, [pc, #332]	; (20005d60 <HAL_GPIO_DeInit+0x1b4>)
20005c12:	4293      	cmp	r3, r2
20005c14:	d013      	beq.n	20005c3e <HAL_GPIO_DeInit+0x92>
20005c16:	687b      	ldr	r3, [r7, #4]
20005c18:	4a52      	ldr	r2, [pc, #328]	; (20005d64 <HAL_GPIO_DeInit+0x1b8>)
20005c1a:	4293      	cmp	r3, r2
20005c1c:	d00d      	beq.n	20005c3a <HAL_GPIO_DeInit+0x8e>
20005c1e:	687b      	ldr	r3, [r7, #4]
20005c20:	4a51      	ldr	r2, [pc, #324]	; (20005d68 <HAL_GPIO_DeInit+0x1bc>)
20005c22:	4293      	cmp	r3, r2
20005c24:	d007      	beq.n	20005c36 <HAL_GPIO_DeInit+0x8a>
20005c26:	687b      	ldr	r3, [r7, #4]
20005c28:	4a50      	ldr	r2, [pc, #320]	; (20005d6c <HAL_GPIO_DeInit+0x1c0>)
20005c2a:	4293      	cmp	r3, r2
20005c2c:	d101      	bne.n	20005c32 <HAL_GPIO_DeInit+0x86>
20005c2e:	2304      	movs	r3, #4
20005c30:	e008      	b.n	20005c44 <HAL_GPIO_DeInit+0x98>
20005c32:	2307      	movs	r3, #7
20005c34:	e006      	b.n	20005c44 <HAL_GPIO_DeInit+0x98>
20005c36:	2303      	movs	r3, #3
20005c38:	e004      	b.n	20005c44 <HAL_GPIO_DeInit+0x98>
20005c3a:	2302      	movs	r3, #2
20005c3c:	e002      	b.n	20005c44 <HAL_GPIO_DeInit+0x98>
20005c3e:	2301      	movs	r3, #1
20005c40:	e000      	b.n	20005c44 <HAL_GPIO_DeInit+0x98>
20005c42:	2300      	movs	r3, #0
20005c44:	697a      	ldr	r2, [r7, #20]
20005c46:	f002 0203 	and.w	r2, r2, #3
20005c4a:	0092      	lsls	r2, r2, #2
20005c4c:	4093      	lsls	r3, r2
20005c4e:	68ba      	ldr	r2, [r7, #8]
20005c50:	429a      	cmp	r2, r3
20005c52:	d132      	bne.n	20005cba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
20005c54:	4b46      	ldr	r3, [pc, #280]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c56:	681a      	ldr	r2, [r3, #0]
20005c58:	68fb      	ldr	r3, [r7, #12]
20005c5a:	43db      	mvns	r3, r3
20005c5c:	4944      	ldr	r1, [pc, #272]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c5e:	4013      	ands	r3, r2
20005c60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
20005c62:	4b43      	ldr	r3, [pc, #268]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c64:	685a      	ldr	r2, [r3, #4]
20005c66:	68fb      	ldr	r3, [r7, #12]
20005c68:	43db      	mvns	r3, r3
20005c6a:	4941      	ldr	r1, [pc, #260]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c6c:	4013      	ands	r3, r2
20005c6e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
20005c70:	4b3f      	ldr	r3, [pc, #252]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c72:	68da      	ldr	r2, [r3, #12]
20005c74:	68fb      	ldr	r3, [r7, #12]
20005c76:	43db      	mvns	r3, r3
20005c78:	493d      	ldr	r1, [pc, #244]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c7a:	4013      	ands	r3, r2
20005c7c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
20005c7e:	4b3c      	ldr	r3, [pc, #240]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c80:	689a      	ldr	r2, [r3, #8]
20005c82:	68fb      	ldr	r3, [r7, #12]
20005c84:	43db      	mvns	r3, r3
20005c86:	493a      	ldr	r1, [pc, #232]	; (20005d70 <HAL_GPIO_DeInit+0x1c4>)
20005c88:	4013      	ands	r3, r2
20005c8a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
20005c8c:	697b      	ldr	r3, [r7, #20]
20005c8e:	f003 0303 	and.w	r3, r3, #3
20005c92:	009b      	lsls	r3, r3, #2
20005c94:	220f      	movs	r2, #15
20005c96:	fa02 f303 	lsl.w	r3, r2, r3
20005c9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
20005c9c:	4a2e      	ldr	r2, [pc, #184]	; (20005d58 <HAL_GPIO_DeInit+0x1ac>)
20005c9e:	697b      	ldr	r3, [r7, #20]
20005ca0:	089b      	lsrs	r3, r3, #2
20005ca2:	3302      	adds	r3, #2
20005ca4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
20005ca8:	68bb      	ldr	r3, [r7, #8]
20005caa:	43da      	mvns	r2, r3
20005cac:	482a      	ldr	r0, [pc, #168]	; (20005d58 <HAL_GPIO_DeInit+0x1ac>)
20005cae:	697b      	ldr	r3, [r7, #20]
20005cb0:	089b      	lsrs	r3, r3, #2
20005cb2:	400a      	ands	r2, r1
20005cb4:	3302      	adds	r3, #2
20005cb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
20005cba:	687b      	ldr	r3, [r7, #4]
20005cbc:	681a      	ldr	r2, [r3, #0]
20005cbe:	697b      	ldr	r3, [r7, #20]
20005cc0:	005b      	lsls	r3, r3, #1
20005cc2:	2103      	movs	r1, #3
20005cc4:	fa01 f303 	lsl.w	r3, r1, r3
20005cc8:	43db      	mvns	r3, r3
20005cca:	401a      	ands	r2, r3
20005ccc:	687b      	ldr	r3, [r7, #4]
20005cce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20005cd0:	697b      	ldr	r3, [r7, #20]
20005cd2:	08da      	lsrs	r2, r3, #3
20005cd4:	687b      	ldr	r3, [r7, #4]
20005cd6:	3208      	adds	r2, #8
20005cd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
20005cdc:	697b      	ldr	r3, [r7, #20]
20005cde:	f003 0307 	and.w	r3, r3, #7
20005ce2:	009b      	lsls	r3, r3, #2
20005ce4:	220f      	movs	r2, #15
20005ce6:	fa02 f303 	lsl.w	r3, r2, r3
20005cea:	43db      	mvns	r3, r3
20005cec:	697a      	ldr	r2, [r7, #20]
20005cee:	08d2      	lsrs	r2, r2, #3
20005cf0:	4019      	ands	r1, r3
20005cf2:	687b      	ldr	r3, [r7, #4]
20005cf4:	3208      	adds	r2, #8
20005cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20005cfa:	687b      	ldr	r3, [r7, #4]
20005cfc:	68da      	ldr	r2, [r3, #12]
20005cfe:	697b      	ldr	r3, [r7, #20]
20005d00:	005b      	lsls	r3, r3, #1
20005d02:	2103      	movs	r1, #3
20005d04:	fa01 f303 	lsl.w	r3, r1, r3
20005d08:	43db      	mvns	r3, r3
20005d0a:	401a      	ands	r2, r3
20005d0c:	687b      	ldr	r3, [r7, #4]
20005d0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
20005d10:	687b      	ldr	r3, [r7, #4]
20005d12:	685a      	ldr	r2, [r3, #4]
20005d14:	2101      	movs	r1, #1
20005d16:	697b      	ldr	r3, [r7, #20]
20005d18:	fa01 f303 	lsl.w	r3, r1, r3
20005d1c:	43db      	mvns	r3, r3
20005d1e:	401a      	ands	r2, r3
20005d20:	687b      	ldr	r3, [r7, #4]
20005d22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20005d24:	687b      	ldr	r3, [r7, #4]
20005d26:	689a      	ldr	r2, [r3, #8]
20005d28:	697b      	ldr	r3, [r7, #20]
20005d2a:	005b      	lsls	r3, r3, #1
20005d2c:	2103      	movs	r1, #3
20005d2e:	fa01 f303 	lsl.w	r3, r1, r3
20005d32:	43db      	mvns	r3, r3
20005d34:	401a      	ands	r2, r3
20005d36:	687b      	ldr	r3, [r7, #4]
20005d38:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
20005d3a:	697b      	ldr	r3, [r7, #20]
20005d3c:	3301      	adds	r3, #1
20005d3e:	617b      	str	r3, [r7, #20]
20005d40:	697b      	ldr	r3, [r7, #20]
20005d42:	2b0f      	cmp	r3, #15
20005d44:	f67f af40 	bls.w	20005bc8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
20005d48:	bf00      	nop
20005d4a:	bf00      	nop
20005d4c:	371c      	adds	r7, #28
20005d4e:	46bd      	mov	sp, r7
20005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d54:	4770      	bx	lr
20005d56:	bf00      	nop
20005d58:	40013800 	.word	0x40013800
20005d5c:	40020000 	.word	0x40020000
20005d60:	40020400 	.word	0x40020400
20005d64:	40020800 	.word	0x40020800
20005d68:	40020c00 	.word	0x40020c00
20005d6c:	40021000 	.word	0x40021000
20005d70:	40013c00 	.word	0x40013c00

20005d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005d74:	b480      	push	{r7}
20005d76:	b085      	sub	sp, #20
20005d78:	af00      	add	r7, sp, #0
20005d7a:	6078      	str	r0, [r7, #4]
20005d7c:	460b      	mov	r3, r1
20005d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20005d80:	687b      	ldr	r3, [r7, #4]
20005d82:	691a      	ldr	r2, [r3, #16]
20005d84:	887b      	ldrh	r3, [r7, #2]
20005d86:	4013      	ands	r3, r2
20005d88:	2b00      	cmp	r3, #0
20005d8a:	d002      	beq.n	20005d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20005d8c:	2301      	movs	r3, #1
20005d8e:	73fb      	strb	r3, [r7, #15]
20005d90:	e001      	b.n	20005d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20005d92:	2300      	movs	r3, #0
20005d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
20005d96:	7bfb      	ldrb	r3, [r7, #15]
}
20005d98:	4618      	mov	r0, r3
20005d9a:	3714      	adds	r7, #20
20005d9c:	46bd      	mov	sp, r7
20005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005da2:	4770      	bx	lr

20005da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20005da4:	b480      	push	{r7}
20005da6:	b083      	sub	sp, #12
20005da8:	af00      	add	r7, sp, #0
20005daa:	6078      	str	r0, [r7, #4]
20005dac:	460b      	mov	r3, r1
20005dae:	807b      	strh	r3, [r7, #2]
20005db0:	4613      	mov	r3, r2
20005db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20005db4:	787b      	ldrb	r3, [r7, #1]
20005db6:	2b00      	cmp	r3, #0
20005db8:	d003      	beq.n	20005dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
20005dba:	887a      	ldrh	r2, [r7, #2]
20005dbc:	687b      	ldr	r3, [r7, #4]
20005dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20005dc0:	e003      	b.n	20005dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20005dc2:	887b      	ldrh	r3, [r7, #2]
20005dc4:	041a      	lsls	r2, r3, #16
20005dc6:	687b      	ldr	r3, [r7, #4]
20005dc8:	619a      	str	r2, [r3, #24]
}
20005dca:	bf00      	nop
20005dcc:	370c      	adds	r7, #12
20005dce:	46bd      	mov	sp, r7
20005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dd4:	4770      	bx	lr

20005dd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005dd6:	b480      	push	{r7}
20005dd8:	b085      	sub	sp, #20
20005dda:	af00      	add	r7, sp, #0
20005ddc:	6078      	str	r0, [r7, #4]
20005dde:	460b      	mov	r3, r1
20005de0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
20005de2:	687b      	ldr	r3, [r7, #4]
20005de4:	695b      	ldr	r3, [r3, #20]
20005de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
20005de8:	887a      	ldrh	r2, [r7, #2]
20005dea:	68fb      	ldr	r3, [r7, #12]
20005dec:	4013      	ands	r3, r2
20005dee:	041a      	lsls	r2, r3, #16
20005df0:	68fb      	ldr	r3, [r7, #12]
20005df2:	43d9      	mvns	r1, r3
20005df4:	887b      	ldrh	r3, [r7, #2]
20005df6:	400b      	ands	r3, r1
20005df8:	431a      	orrs	r2, r3
20005dfa:	687b      	ldr	r3, [r7, #4]
20005dfc:	619a      	str	r2, [r3, #24]
}
20005dfe:	bf00      	nop
20005e00:	3714      	adds	r7, #20
20005e02:	46bd      	mov	sp, r7
20005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e08:	4770      	bx	lr

20005e0a <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
20005e0a:	b480      	push	{r7}
20005e0c:	b085      	sub	sp, #20
20005e0e:	af00      	add	r7, sp, #0
20005e10:	6078      	str	r0, [r7, #4]
20005e12:	460b      	mov	r3, r1
20005e14:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
20005e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20005e1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
20005e1c:	887a      	ldrh	r2, [r7, #2]
20005e1e:	68fb      	ldr	r3, [r7, #12]
20005e20:	4313      	orrs	r3, r2
20005e22:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005e24:	68fa      	ldr	r2, [r7, #12]
20005e26:	687b      	ldr	r3, [r7, #4]
20005e28:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
20005e2a:	887a      	ldrh	r2, [r7, #2]
20005e2c:	687b      	ldr	r3, [r7, #4]
20005e2e:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
20005e30:	68fa      	ldr	r2, [r7, #12]
20005e32:	687b      	ldr	r3, [r7, #4]
20005e34:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
20005e36:	687b      	ldr	r3, [r7, #4]
20005e38:	69db      	ldr	r3, [r3, #28]
20005e3a:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
20005e3c:	687b      	ldr	r3, [r7, #4]
20005e3e:	69db      	ldr	r3, [r3, #28]
20005e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005e44:	2b00      	cmp	r3, #0
20005e46:	d001      	beq.n	20005e4c <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
20005e48:	2300      	movs	r3, #0
20005e4a:	e000      	b.n	20005e4e <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
20005e4c:	2301      	movs	r3, #1
  }
}
20005e4e:	4618      	mov	r0, r3
20005e50:	3714      	adds	r7, #20
20005e52:	46bd      	mov	sp, r7
20005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
20005e58:	4770      	bx	lr
	...

20005e5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
20005e5c:	b580      	push	{r7, lr}
20005e5e:	b082      	sub	sp, #8
20005e60:	af00      	add	r7, sp, #0
20005e62:	4603      	mov	r3, r0
20005e64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
20005e66:	4b08      	ldr	r3, [pc, #32]	; (20005e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005e68:	695a      	ldr	r2, [r3, #20]
20005e6a:	88fb      	ldrh	r3, [r7, #6]
20005e6c:	4013      	ands	r3, r2
20005e6e:	2b00      	cmp	r3, #0
20005e70:	d006      	beq.n	20005e80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
20005e72:	4a05      	ldr	r2, [pc, #20]	; (20005e88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
20005e74:	88fb      	ldrh	r3, [r7, #6]
20005e76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
20005e78:	88fb      	ldrh	r3, [r7, #6]
20005e7a:	4618      	mov	r0, r3
20005e7c:	f000 f806 	bl	20005e8c <HAL_GPIO_EXTI_Callback>
  }
}
20005e80:	bf00      	nop
20005e82:	3708      	adds	r7, #8
20005e84:	46bd      	mov	sp, r7
20005e86:	bd80      	pop	{r7, pc}
20005e88:	40013c00 	.word	0x40013c00

20005e8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
20005e8c:	b480      	push	{r7}
20005e8e:	b083      	sub	sp, #12
20005e90:	af00      	add	r7, sp, #0
20005e92:	4603      	mov	r3, r0
20005e94:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
20005e96:	bf00      	nop
20005e98:	370c      	adds	r7, #12
20005e9a:	46bd      	mov	sp, r7
20005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ea0:	4770      	bx	lr
	...

20005ea4 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
20005ea4:	b480      	push	{r7}
20005ea6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
20005ea8:	4b08      	ldr	r3, [pc, #32]	; (20005ecc <HAL_PWR_DeInit+0x28>)
20005eaa:	6a1b      	ldr	r3, [r3, #32]
20005eac:	4a07      	ldr	r2, [pc, #28]	; (20005ecc <HAL_PWR_DeInit+0x28>)
20005eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20005eb2:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
20005eb4:	4b05      	ldr	r3, [pc, #20]	; (20005ecc <HAL_PWR_DeInit+0x28>)
20005eb6:	6a1b      	ldr	r3, [r3, #32]
20005eb8:	4a04      	ldr	r2, [pc, #16]	; (20005ecc <HAL_PWR_DeInit+0x28>)
20005eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20005ebe:	6213      	str	r3, [r2, #32]
}
20005ec0:	bf00      	nop
20005ec2:	46bd      	mov	sp, r7
20005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ec8:	4770      	bx	lr
20005eca:	bf00      	nop
20005ecc:	40023800 	.word	0x40023800

20005ed0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20005ed0:	b480      	push	{r7}
20005ed2:	b083      	sub	sp, #12
20005ed4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
20005ed6:	4b06      	ldr	r3, [pc, #24]	; (20005ef0 <HAL_PWR_EnableBkUpAccess+0x20>)
20005ed8:	2201      	movs	r2, #1
20005eda:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005edc:	4b05      	ldr	r3, [pc, #20]	; (20005ef4 <HAL_PWR_EnableBkUpAccess+0x24>)
20005ede:	681b      	ldr	r3, [r3, #0]
20005ee0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
20005ee2:	687b      	ldr	r3, [r7, #4]
}
20005ee4:	bf00      	nop
20005ee6:	370c      	adds	r7, #12
20005ee8:	46bd      	mov	sp, r7
20005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
20005eee:	4770      	bx	lr
20005ef0:	420e0020 	.word	0x420e0020
20005ef4:	40007000 	.word	0x40007000

20005ef8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
20005ef8:	b480      	push	{r7}
20005efa:	b083      	sub	sp, #12
20005efc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
20005efe:	4b06      	ldr	r3, [pc, #24]	; (20005f18 <HAL_PWR_DisableBkUpAccess+0x20>)
20005f00:	2200      	movs	r2, #0
20005f02:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005f04:	4b05      	ldr	r3, [pc, #20]	; (20005f1c <HAL_PWR_DisableBkUpAccess+0x24>)
20005f06:	681b      	ldr	r3, [r3, #0]
20005f08:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
20005f0a:	687b      	ldr	r3, [r7, #4]
}
20005f0c:	bf00      	nop
20005f0e:	370c      	adds	r7, #12
20005f10:	46bd      	mov	sp, r7
20005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
20005f16:	4770      	bx	lr
20005f18:	420e0020 	.word	0x420e0020
20005f1c:	40007000 	.word	0x40007000

20005f20 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
20005f20:	b480      	push	{r7}
20005f22:	b083      	sub	sp, #12
20005f24:	af00      	add	r7, sp, #0
20005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
20005f28:	4b2b      	ldr	r3, [pc, #172]	; (20005fd8 <HAL_PWR_ConfigPVD+0xb8>)
20005f2a:	681b      	ldr	r3, [r3, #0]
20005f2c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
20005f30:	687b      	ldr	r3, [r7, #4]
20005f32:	681b      	ldr	r3, [r3, #0]
20005f34:	4928      	ldr	r1, [pc, #160]	; (20005fd8 <HAL_PWR_ConfigPVD+0xb8>)
20005f36:	4313      	orrs	r3, r2
20005f38:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
20005f3a:	4b28      	ldr	r3, [pc, #160]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f3c:	685b      	ldr	r3, [r3, #4]
20005f3e:	4a27      	ldr	r2, [pc, #156]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f44:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
20005f46:	4b25      	ldr	r3, [pc, #148]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f48:	681b      	ldr	r3, [r3, #0]
20005f4a:	4a24      	ldr	r2, [pc, #144]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f50:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
20005f52:	4b22      	ldr	r3, [pc, #136]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f54:	689b      	ldr	r3, [r3, #8]
20005f56:	4a21      	ldr	r2, [pc, #132]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f5c:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
20005f5e:	4b1f      	ldr	r3, [pc, #124]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f60:	68db      	ldr	r3, [r3, #12]
20005f62:	4a1e      	ldr	r2, [pc, #120]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005f68:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
20005f6a:	687b      	ldr	r3, [r7, #4]
20005f6c:	685b      	ldr	r3, [r3, #4]
20005f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005f72:	2b00      	cmp	r3, #0
20005f74:	d005      	beq.n	20005f82 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
20005f76:	4b19      	ldr	r3, [pc, #100]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f78:	681b      	ldr	r3, [r3, #0]
20005f7a:	4a18      	ldr	r2, [pc, #96]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005f80:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
20005f82:	687b      	ldr	r3, [r7, #4]
20005f84:	685b      	ldr	r3, [r3, #4]
20005f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005f8a:	2b00      	cmp	r3, #0
20005f8c:	d005      	beq.n	20005f9a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
20005f8e:	4b13      	ldr	r3, [pc, #76]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f90:	685b      	ldr	r3, [r3, #4]
20005f92:	4a12      	ldr	r2, [pc, #72]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005f98:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
20005f9a:	687b      	ldr	r3, [r7, #4]
20005f9c:	685b      	ldr	r3, [r3, #4]
20005f9e:	f003 0301 	and.w	r3, r3, #1
20005fa2:	2b00      	cmp	r3, #0
20005fa4:	d005      	beq.n	20005fb2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
20005fa6:	4b0d      	ldr	r3, [pc, #52]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005fa8:	689b      	ldr	r3, [r3, #8]
20005faa:	4a0c      	ldr	r2, [pc, #48]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005fb0:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
20005fb2:	687b      	ldr	r3, [r7, #4]
20005fb4:	685b      	ldr	r3, [r3, #4]
20005fb6:	f003 0302 	and.w	r3, r3, #2
20005fba:	2b00      	cmp	r3, #0
20005fbc:	d005      	beq.n	20005fca <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
20005fbe:	4b07      	ldr	r3, [pc, #28]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005fc0:	68db      	ldr	r3, [r3, #12]
20005fc2:	4a06      	ldr	r2, [pc, #24]	; (20005fdc <HAL_PWR_ConfigPVD+0xbc>)
20005fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005fc8:	60d3      	str	r3, [r2, #12]
  }
}
20005fca:	bf00      	nop
20005fcc:	370c      	adds	r7, #12
20005fce:	46bd      	mov	sp, r7
20005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
20005fd4:	4770      	bx	lr
20005fd6:	bf00      	nop
20005fd8:	40007000 	.word	0x40007000
20005fdc:	40013c00 	.word	0x40013c00

20005fe0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
20005fe0:	b480      	push	{r7}
20005fe2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
20005fe4:	4b03      	ldr	r3, [pc, #12]	; (20005ff4 <HAL_PWR_EnablePVD+0x14>)
20005fe6:	2201      	movs	r2, #1
20005fe8:	601a      	str	r2, [r3, #0]
}
20005fea:	bf00      	nop
20005fec:	46bd      	mov	sp, r7
20005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ff2:	4770      	bx	lr
20005ff4:	420e0010 	.word	0x420e0010

20005ff8 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
20005ff8:	b480      	push	{r7}
20005ffa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
20005ffc:	4b03      	ldr	r3, [pc, #12]	; (2000600c <HAL_PWR_DisablePVD+0x14>)
20005ffe:	2200      	movs	r2, #0
20006000:	601a      	str	r2, [r3, #0]
}
20006002:	bf00      	nop
20006004:	46bd      	mov	sp, r7
20006006:	f85d 7b04 	ldr.w	r7, [sp], #4
2000600a:	4770      	bx	lr
2000600c:	420e0010 	.word	0x420e0010

20006010 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
20006010:	b480      	push	{r7}
20006012:	b083      	sub	sp, #12
20006014:	af00      	add	r7, sp, #0
20006016:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
20006018:	4b05      	ldr	r3, [pc, #20]	; (20006030 <HAL_PWR_EnableWakeUpPin+0x20>)
2000601a:	685a      	ldr	r2, [r3, #4]
2000601c:	4904      	ldr	r1, [pc, #16]	; (20006030 <HAL_PWR_EnableWakeUpPin+0x20>)
2000601e:	687b      	ldr	r3, [r7, #4]
20006020:	4313      	orrs	r3, r2
20006022:	604b      	str	r3, [r1, #4]
}
20006024:	bf00      	nop
20006026:	370c      	adds	r7, #12
20006028:	46bd      	mov	sp, r7
2000602a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000602e:	4770      	bx	lr
20006030:	40007000 	.word	0x40007000

20006034 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
20006034:	b480      	push	{r7}
20006036:	b083      	sub	sp, #12
20006038:	af00      	add	r7, sp, #0
2000603a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
2000603c:	4b06      	ldr	r3, [pc, #24]	; (20006058 <HAL_PWR_DisableWakeUpPin+0x24>)
2000603e:	685a      	ldr	r2, [r3, #4]
20006040:	687b      	ldr	r3, [r7, #4]
20006042:	43db      	mvns	r3, r3
20006044:	4904      	ldr	r1, [pc, #16]	; (20006058 <HAL_PWR_DisableWakeUpPin+0x24>)
20006046:	4013      	ands	r3, r2
20006048:	604b      	str	r3, [r1, #4]
}
2000604a:	bf00      	nop
2000604c:	370c      	adds	r7, #12
2000604e:	46bd      	mov	sp, r7
20006050:	f85d 7b04 	ldr.w	r7, [sp], #4
20006054:	4770      	bx	lr
20006056:	bf00      	nop
20006058:	40007000 	.word	0x40007000

2000605c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR : Enter SLEEP mode with WFE instruction and
  *                                                   no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
2000605c:	b480      	push	{r7}
2000605e:	b083      	sub	sp, #12
20006060:	af00      	add	r7, sp, #0
20006062:	6078      	str	r0, [r7, #4]
20006064:	460b      	mov	r3, r1
20006066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20006068:	4b0b      	ldr	r3, [pc, #44]	; (20006098 <HAL_PWR_EnterSLEEPMode+0x3c>)
2000606a:	691b      	ldr	r3, [r3, #16]
2000606c:	4a0a      	ldr	r2, [pc, #40]	; (20006098 <HAL_PWR_EnterSLEEPMode+0x3c>)
2000606e:	f023 0304 	bic.w	r3, r3, #4
20006072:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
20006074:	78fb      	ldrb	r3, [r7, #3]
20006076:	2b01      	cmp	r3, #1
20006078:	d101      	bne.n	2000607e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
2000607a:	bf30      	wfi
    }

    /* Request Wait For Event */
    __WFE();
  }
}
2000607c:	e005      	b.n	2000608a <HAL_PWR_EnterSLEEPMode+0x2e>
    if(SLEEPEntry != PWR_SLEEPENTRY_WFE_NO_EVT_CLEAR)
2000607e:	78fb      	ldrb	r3, [r7, #3]
20006080:	2b03      	cmp	r3, #3
20006082:	d001      	beq.n	20006088 <HAL_PWR_EnterSLEEPMode+0x2c>
      __SEV();
20006084:	bf40      	sev
      __WFE();
20006086:	bf20      	wfe
    __WFE();
20006088:	bf20      	wfe
}
2000608a:	bf00      	nop
2000608c:	370c      	adds	r7, #12
2000608e:	46bd      	mov	sp, r7
20006090:	f85d 7b04 	ldr.w	r7, [sp], #4
20006094:	4770      	bx	lr
20006096:	bf00      	nop
20006098:	e000ed00 	.word	0xe000ed00

2000609c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
2000609c:	b480      	push	{r7}
2000609e:	b083      	sub	sp, #12
200060a0:	af00      	add	r7, sp, #0
200060a2:	6078      	str	r0, [r7, #4]
200060a4:	460b      	mov	r3, r1
200060a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
200060a8:	4b12      	ldr	r3, [pc, #72]	; (200060f4 <HAL_PWR_EnterSTOPMode+0x58>)
200060aa:	681b      	ldr	r3, [r3, #0]
200060ac:	f023 0203 	bic.w	r2, r3, #3
200060b0:	4910      	ldr	r1, [pc, #64]	; (200060f4 <HAL_PWR_EnterSTOPMode+0x58>)
200060b2:	687b      	ldr	r3, [r7, #4]
200060b4:	4313      	orrs	r3, r2
200060b6:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
200060b8:	4b0f      	ldr	r3, [pc, #60]	; (200060f8 <HAL_PWR_EnterSTOPMode+0x5c>)
200060ba:	691b      	ldr	r3, [r3, #16]
200060bc:	4a0e      	ldr	r2, [pc, #56]	; (200060f8 <HAL_PWR_EnterSTOPMode+0x5c>)
200060be:	f043 0304 	orr.w	r3, r3, #4
200060c2:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
200060c4:	78fb      	ldrb	r3, [r7, #3]
200060c6:	2b01      	cmp	r3, #1
200060c8:	d101      	bne.n	200060ce <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
200060ca:	bf30      	wfi
200060cc:	e005      	b.n	200060da <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
200060ce:	78fb      	ldrb	r3, [r7, #3]
200060d0:	2b03      	cmp	r3, #3
200060d2:	d001      	beq.n	200060d8 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
200060d4:	bf40      	sev
      __WFE();
200060d6:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
200060d8:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
200060da:	4b07      	ldr	r3, [pc, #28]	; (200060f8 <HAL_PWR_EnterSTOPMode+0x5c>)
200060dc:	691b      	ldr	r3, [r3, #16]
200060de:	4a06      	ldr	r2, [pc, #24]	; (200060f8 <HAL_PWR_EnterSTOPMode+0x5c>)
200060e0:	f023 0304 	bic.w	r3, r3, #4
200060e4:	6113      	str	r3, [r2, #16]
}
200060e6:	bf00      	nop
200060e8:	370c      	adds	r7, #12
200060ea:	46bd      	mov	sp, r7
200060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200060f0:	4770      	bx	lr
200060f2:	bf00      	nop
200060f4:	40007000 	.word	0x40007000
200060f8:	e000ed00 	.word	0xe000ed00

200060fc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
200060fc:	b480      	push	{r7}
200060fe:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
20006100:	4b08      	ldr	r3, [pc, #32]	; (20006124 <HAL_PWR_EnterSTANDBYMode+0x28>)
20006102:	681b      	ldr	r3, [r3, #0]
20006104:	4a07      	ldr	r2, [pc, #28]	; (20006124 <HAL_PWR_EnterSTANDBYMode+0x28>)
20006106:	f043 0302 	orr.w	r3, r3, #2
2000610a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
2000610c:	4b06      	ldr	r3, [pc, #24]	; (20006128 <HAL_PWR_EnterSTANDBYMode+0x2c>)
2000610e:	691b      	ldr	r3, [r3, #16]
20006110:	4a05      	ldr	r2, [pc, #20]	; (20006128 <HAL_PWR_EnterSTANDBYMode+0x2c>)
20006112:	f043 0304 	orr.w	r3, r3, #4
20006116:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
20006118:	bf30      	wfi
}
2000611a:	bf00      	nop
2000611c:	46bd      	mov	sp, r7
2000611e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006122:	4770      	bx	lr
20006124:	40007000 	.word	0x40007000
20006128:	e000ed00 	.word	0xe000ed00

2000612c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
2000612c:	b580      	push	{r7, lr}
2000612e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
20006130:	4b06      	ldr	r3, [pc, #24]	; (2000614c <HAL_PWR_PVD_IRQHandler+0x20>)
20006132:	695b      	ldr	r3, [r3, #20]
20006134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20006138:	2b00      	cmp	r3, #0
2000613a:	d005      	beq.n	20006148 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
2000613c:	f000 f808 	bl	20006150 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
20006140:	4b02      	ldr	r3, [pc, #8]	; (2000614c <HAL_PWR_PVD_IRQHandler+0x20>)
20006142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20006146:	615a      	str	r2, [r3, #20]
  }
}
20006148:	bf00      	nop
2000614a:	bd80      	pop	{r7, pc}
2000614c:	40013c00 	.word	0x40013c00

20006150 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
20006150:	b480      	push	{r7}
20006152:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
20006154:	bf00      	nop
20006156:	46bd      	mov	sp, r7
20006158:	f85d 7b04 	ldr.w	r7, [sp], #4
2000615c:	4770      	bx	lr
	...

20006160 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
20006160:	b480      	push	{r7}
20006162:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20006164:	4b05      	ldr	r3, [pc, #20]	; (2000617c <HAL_PWR_EnableSleepOnExit+0x1c>)
20006166:	691b      	ldr	r3, [r3, #16]
20006168:	4a04      	ldr	r2, [pc, #16]	; (2000617c <HAL_PWR_EnableSleepOnExit+0x1c>)
2000616a:	f043 0302 	orr.w	r3, r3, #2
2000616e:	6113      	str	r3, [r2, #16]
}
20006170:	bf00      	nop
20006172:	46bd      	mov	sp, r7
20006174:	f85d 7b04 	ldr.w	r7, [sp], #4
20006178:	4770      	bx	lr
2000617a:	bf00      	nop
2000617c:	e000ed00 	.word	0xe000ed00

20006180 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
20006180:	b480      	push	{r7}
20006182:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20006184:	4b05      	ldr	r3, [pc, #20]	; (2000619c <HAL_PWR_DisableSleepOnExit+0x1c>)
20006186:	691b      	ldr	r3, [r3, #16]
20006188:	4a04      	ldr	r2, [pc, #16]	; (2000619c <HAL_PWR_DisableSleepOnExit+0x1c>)
2000618a:	f023 0302 	bic.w	r3, r3, #2
2000618e:	6113      	str	r3, [r2, #16]
}
20006190:	bf00      	nop
20006192:	46bd      	mov	sp, r7
20006194:	f85d 7b04 	ldr.w	r7, [sp], #4
20006198:	4770      	bx	lr
2000619a:	bf00      	nop
2000619c:	e000ed00 	.word	0xe000ed00

200061a0 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
200061a0:	b480      	push	{r7}
200061a2:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
200061a4:	4b05      	ldr	r3, [pc, #20]	; (200061bc <HAL_PWR_EnableSEVOnPend+0x1c>)
200061a6:	691b      	ldr	r3, [r3, #16]
200061a8:	4a04      	ldr	r2, [pc, #16]	; (200061bc <HAL_PWR_EnableSEVOnPend+0x1c>)
200061aa:	f043 0310 	orr.w	r3, r3, #16
200061ae:	6113      	str	r3, [r2, #16]
}
200061b0:	bf00      	nop
200061b2:	46bd      	mov	sp, r7
200061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200061b8:	4770      	bx	lr
200061ba:	bf00      	nop
200061bc:	e000ed00 	.word	0xe000ed00

200061c0 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
200061c0:	b480      	push	{r7}
200061c2:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
200061c4:	4b05      	ldr	r3, [pc, #20]	; (200061dc <HAL_PWR_DisableSEVOnPend+0x1c>)
200061c6:	691b      	ldr	r3, [r3, #16]
200061c8:	4a04      	ldr	r2, [pc, #16]	; (200061dc <HAL_PWR_DisableSEVOnPend+0x1c>)
200061ca:	f023 0310 	bic.w	r3, r3, #16
200061ce:	6113      	str	r3, [r2, #16]
}
200061d0:	bf00      	nop
200061d2:	46bd      	mov	sp, r7
200061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
200061d8:	4770      	bx	lr
200061da:	bf00      	nop
200061dc:	e000ed00 	.word	0xe000ed00

200061e0 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
200061e0:	b580      	push	{r7, lr}
200061e2:	b082      	sub	sp, #8
200061e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
200061e6:	2300      	movs	r3, #0
200061e8:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
200061ea:	4b0e      	ldr	r3, [pc, #56]	; (20006224 <HAL_PWREx_EnableBkUpReg+0x44>)
200061ec:	2201      	movs	r2, #1
200061ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
200061f0:	f7fa fc17 	bl	20000a22 <HAL_GetTick>
200061f4:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
200061f6:	e009      	b.n	2000620c <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
200061f8:	f7fa fc13 	bl	20000a22 <HAL_GetTick>
200061fc:	4602      	mov	r2, r0
200061fe:	687b      	ldr	r3, [r7, #4]
20006200:	1ad3      	subs	r3, r2, r3
20006202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20006206:	d901      	bls.n	2000620c <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20006208:	2303      	movs	r3, #3
2000620a:	e006      	b.n	2000621a <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
2000620c:	4b06      	ldr	r3, [pc, #24]	; (20006228 <HAL_PWREx_EnableBkUpReg+0x48>)
2000620e:	685b      	ldr	r3, [r3, #4]
20006210:	f003 0308 	and.w	r3, r3, #8
20006214:	2b08      	cmp	r3, #8
20006216:	d1ef      	bne.n	200061f8 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20006218:	2300      	movs	r3, #0
}
2000621a:	4618      	mov	r0, r3
2000621c:	3708      	adds	r7, #8
2000621e:	46bd      	mov	sp, r7
20006220:	bd80      	pop	{r7, pc}
20006222:	bf00      	nop
20006224:	420e00a4 	.word	0x420e00a4
20006228:	40007000 	.word	0x40007000

2000622c <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
2000622c:	b580      	push	{r7, lr}
2000622e:	b082      	sub	sp, #8
20006230:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20006232:	2300      	movs	r3, #0
20006234:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
20006236:	4b0e      	ldr	r3, [pc, #56]	; (20006270 <HAL_PWREx_DisableBkUpReg+0x44>)
20006238:	2200      	movs	r2, #0
2000623a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
2000623c:	f7fa fbf1 	bl	20000a22 <HAL_GetTick>
20006240:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20006242:	e009      	b.n	20006258 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20006244:	f7fa fbed 	bl	20000a22 <HAL_GetTick>
20006248:	4602      	mov	r2, r0
2000624a:	687b      	ldr	r3, [r7, #4]
2000624c:	1ad3      	subs	r3, r2, r3
2000624e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20006252:	d901      	bls.n	20006258 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20006254:	2303      	movs	r3, #3
20006256:	e006      	b.n	20006266 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20006258:	4b06      	ldr	r3, [pc, #24]	; (20006274 <HAL_PWREx_DisableBkUpReg+0x48>)
2000625a:	685b      	ldr	r3, [r3, #4]
2000625c:	f003 0308 	and.w	r3, r3, #8
20006260:	2b08      	cmp	r3, #8
20006262:	d0ef      	beq.n	20006244 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20006264:	2300      	movs	r3, #0
}
20006266:	4618      	mov	r0, r3
20006268:	3708      	adds	r7, #8
2000626a:	46bd      	mov	sp, r7
2000626c:	bd80      	pop	{r7, pc}
2000626e:	bf00      	nop
20006270:	420e00a4 	.word	0x420e00a4
20006274:	40007000 	.word	0x40007000

20006278 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
20006278:	b480      	push	{r7}
2000627a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
2000627c:	4b03      	ldr	r3, [pc, #12]	; (2000628c <HAL_PWREx_EnableFlashPowerDown+0x14>)
2000627e:	2201      	movs	r2, #1
20006280:	601a      	str	r2, [r3, #0]
}
20006282:	bf00      	nop
20006284:	46bd      	mov	sp, r7
20006286:	f85d 7b04 	ldr.w	r7, [sp], #4
2000628a:	4770      	bx	lr
2000628c:	420e0024 	.word	0x420e0024

20006290 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
20006290:	b480      	push	{r7}
20006292:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
20006294:	4b03      	ldr	r3, [pc, #12]	; (200062a4 <HAL_PWREx_DisableFlashPowerDown+0x14>)
20006296:	2200      	movs	r2, #0
20006298:	601a      	str	r2, [r3, #0]
}
2000629a:	bf00      	nop
2000629c:	46bd      	mov	sp, r7
2000629e:	f85d 7b04 	ldr.w	r7, [sp], #4
200062a2:	4770      	bx	lr
200062a4:	420e0024 	.word	0x420e0024

200062a8 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
200062a8:	b480      	push	{r7}
200062aa:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
200062ac:	4b04      	ldr	r3, [pc, #16]	; (200062c0 <HAL_PWREx_GetVoltageRange+0x18>)
200062ae:	681b      	ldr	r3, [r3, #0]
200062b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
200062b4:	4618      	mov	r0, r3
200062b6:	46bd      	mov	sp, r7
200062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200062bc:	4770      	bx	lr
200062be:	bf00      	nop
200062c0:	40007000 	.word	0x40007000

200062c4 <HAL_PWREx_ControlVoltageScaling>:
  * @note This API forces the PLL state ON to allow the possibility to configure the voltage scale 1 or 2.
  * @note The new voltage scale is active only when the PLL is ON.  
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
200062c4:	b580      	push	{r7, lr}
200062c6:	b086      	sub	sp, #24
200062c8:	af00      	add	r7, sp, #0
200062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
200062cc:	2300      	movs	r3, #0
200062ce:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
200062d0:	2300      	movs	r3, #0
200062d2:	613b      	str	r3, [r7, #16]
200062d4:	4b35      	ldr	r3, [pc, #212]	; (200063ac <HAL_PWREx_ControlVoltageScaling+0xe8>)
200062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200062d8:	4a34      	ldr	r2, [pc, #208]	; (200063ac <HAL_PWREx_ControlVoltageScaling+0xe8>)
200062da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200062de:	6413      	str	r3, [r2, #64]	; 0x40
200062e0:	4b32      	ldr	r3, [pc, #200]	; (200063ac <HAL_PWREx_ControlVoltageScaling+0xe8>)
200062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200062e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200062e8:	613b      	str	r3, [r7, #16]
200062ea:	693b      	ldr	r3, [r7, #16]
  
  /* Check if the PLL is used as system clock or not */
  if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
200062ec:	4b2f      	ldr	r3, [pc, #188]	; (200063ac <HAL_PWREx_ControlVoltageScaling+0xe8>)
200062ee:	689b      	ldr	r3, [r3, #8]
200062f0:	f003 030c 	and.w	r3, r3, #12
200062f4:	2b08      	cmp	r3, #8
200062f6:	d051      	beq.n	2000639c <HAL_PWREx_ControlVoltageScaling+0xd8>
  {
    /* Disable the main PLL */
    __HAL_RCC_PLL_DISABLE();
200062f8:	4b2d      	ldr	r3, [pc, #180]	; (200063b0 <HAL_PWREx_ControlVoltageScaling+0xec>)
200062fa:	2200      	movs	r2, #0
200062fc:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();    
200062fe:	f7fa fb90 	bl	20000a22 <HAL_GetTick>
20006302:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is disabled */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006304:	e008      	b.n	20006318 <HAL_PWREx_ControlVoltageScaling+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20006306:	f7fa fb8c 	bl	20000a22 <HAL_GetTick>
2000630a:	4602      	mov	r2, r0
2000630c:	697b      	ldr	r3, [r7, #20]
2000630e:	1ad3      	subs	r3, r2, r3
20006310:	2b02      	cmp	r3, #2
20006312:	d901      	bls.n	20006318 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        return HAL_TIMEOUT;
20006314:	2303      	movs	r3, #3
20006316:	e044      	b.n	200063a2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006318:	4b24      	ldr	r3, [pc, #144]	; (200063ac <HAL_PWREx_ControlVoltageScaling+0xe8>)
2000631a:	681b      	ldr	r3, [r3, #0]
2000631c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006320:	2b00      	cmp	r3, #0
20006322:	d1f0      	bne.n	20006306 <HAL_PWREx_ControlVoltageScaling+0x42>
      }
    }
    
    /* Set Range */
    __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
20006324:	2300      	movs	r3, #0
20006326:	60fb      	str	r3, [r7, #12]
20006328:	4b22      	ldr	r3, [pc, #136]	; (200063b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000632a:	681b      	ldr	r3, [r3, #0]
2000632c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
20006330:	4920      	ldr	r1, [pc, #128]	; (200063b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
20006332:	687b      	ldr	r3, [r7, #4]
20006334:	4313      	orrs	r3, r2
20006336:	600b      	str	r3, [r1, #0]
20006338:	4b1e      	ldr	r3, [pc, #120]	; (200063b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000633a:	681b      	ldr	r3, [r3, #0]
2000633c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
20006340:	60fb      	str	r3, [r7, #12]
20006342:	68fb      	ldr	r3, [r7, #12]
    
    /* Enable the main PLL */
    __HAL_RCC_PLL_ENABLE();
20006344:	4b1a      	ldr	r3, [pc, #104]	; (200063b0 <HAL_PWREx_ControlVoltageScaling+0xec>)
20006346:	2201      	movs	r2, #1
20006348:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000634a:	f7fa fb6a 	bl	20000a22 <HAL_GetTick>
2000634e:	6178      	str	r0, [r7, #20]
    /* Wait till PLL is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006350:	e008      	b.n	20006364 <HAL_PWREx_ControlVoltageScaling+0xa0>
    {
      if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20006352:	f7fa fb66 	bl	20000a22 <HAL_GetTick>
20006356:	4602      	mov	r2, r0
20006358:	697b      	ldr	r3, [r7, #20]
2000635a:	1ad3      	subs	r3, r2, r3
2000635c:	2b02      	cmp	r3, #2
2000635e:	d901      	bls.n	20006364 <HAL_PWREx_ControlVoltageScaling+0xa0>
      {
        return HAL_TIMEOUT;
20006360:	2303      	movs	r3, #3
20006362:	e01e      	b.n	200063a2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006364:	4b11      	ldr	r3, [pc, #68]	; (200063ac <HAL_PWREx_ControlVoltageScaling+0xe8>)
20006366:	681b      	ldr	r3, [r3, #0]
20006368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000636c:	2b00      	cmp	r3, #0
2000636e:	d0f0      	beq.n	20006352 <HAL_PWREx_ControlVoltageScaling+0x8e>
      } 
    }
    
    /* Get Start Tick */
    tickstart = HAL_GetTick();
20006370:	f7fa fb57 	bl	20000a22 <HAL_GetTick>
20006374:	6178      	str	r0, [r7, #20]
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20006376:	e009      	b.n	2000638c <HAL_PWREx_ControlVoltageScaling+0xc8>
    {
      if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
20006378:	f7fa fb53 	bl	20000a22 <HAL_GetTick>
2000637c:	4602      	mov	r2, r0
2000637e:	697b      	ldr	r3, [r7, #20]
20006380:	1ad3      	subs	r3, r2, r3
20006382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20006386:	d901      	bls.n	2000638c <HAL_PWREx_ControlVoltageScaling+0xc8>
      {
        return HAL_TIMEOUT;
20006388:	2303      	movs	r3, #3
2000638a:	e00a      	b.n	200063a2 <HAL_PWREx_ControlVoltageScaling+0xde>
    while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
2000638c:	4b09      	ldr	r3, [pc, #36]	; (200063b4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
2000638e:	685b      	ldr	r3, [r3, #4]
20006390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20006394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
20006398:	d1ee      	bne.n	20006378 <HAL_PWREx_ControlVoltageScaling+0xb4>
2000639a:	e001      	b.n	200063a0 <HAL_PWREx_ControlVoltageScaling+0xdc>
      } 
    }
  }
  else
  {
    return HAL_ERROR;
2000639c:	2301      	movs	r3, #1
2000639e:	e000      	b.n	200063a2 <HAL_PWREx_ControlVoltageScaling+0xde>
  }

  return HAL_OK;
200063a0:	2300      	movs	r3, #0
}
200063a2:	4618      	mov	r0, r3
200063a4:	3718      	adds	r7, #24
200063a6:	46bd      	mov	sp, r7
200063a8:	bd80      	pop	{r7, pc}
200063aa:	bf00      	nop
200063ac:	40023800 	.word	0x40023800
200063b0:	42470060 	.word	0x42470060
200063b4:	40007000 	.word	0x40007000

200063b8 <HAL_PWREx_EnableMainRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xx devices.   
  * @retval None
  */
void HAL_PWREx_EnableMainRegulatorLowVoltage(void)
{
200063b8:	b480      	push	{r7}
200063ba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
200063bc:	4b03      	ldr	r3, [pc, #12]	; (200063cc <HAL_PWREx_EnableMainRegulatorLowVoltage+0x14>)
200063be:	2201      	movs	r2, #1
200063c0:	601a      	str	r2, [r3, #0]
}
200063c2:	bf00      	nop
200063c4:	46bd      	mov	sp, r7
200063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200063ca:	4770      	bx	lr
200063cc:	420e002c 	.word	0x420e002c

200063d0 <HAL_PWREx_DisableMainRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xxdevices. 
  * @retval None
  */
void HAL_PWREx_DisableMainRegulatorLowVoltage(void)
{
200063d0:	b480      	push	{r7}
200063d2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
200063d4:	4b03      	ldr	r3, [pc, #12]	; (200063e4 <HAL_PWREx_DisableMainRegulatorLowVoltage+0x14>)
200063d6:	2200      	movs	r2, #0
200063d8:	601a      	str	r2, [r3, #0]
}
200063da:	bf00      	nop
200063dc:	46bd      	mov	sp, r7
200063de:	f85d 7b04 	ldr.w	r7, [sp], #4
200063e2:	4770      	bx	lr
200063e4:	420e002c 	.word	0x420e002c

200063e8 <HAL_PWREx_EnableLowRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xx devices.   
  * @retval None
  */
void HAL_PWREx_EnableLowRegulatorLowVoltage(void)
{
200063e8:	b480      	push	{r7}
200063ea:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
200063ec:	4b03      	ldr	r3, [pc, #12]	; (200063fc <HAL_PWREx_EnableLowRegulatorLowVoltage+0x14>)
200063ee:	2201      	movs	r2, #1
200063f0:	601a      	str	r2, [r3, #0]
}
200063f2:	bf00      	nop
200063f4:	46bd      	mov	sp, r7
200063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200063fa:	4770      	bx	lr
200063fc:	420e0028 	.word	0x420e0028

20006400 <HAL_PWREx_DisableLowRegulatorLowVoltage>:
  * @note  This mode is only available for STM32F401xx/STM32F410xx/STM32F411xx/STM32F412Zx/STM32F412Rx/STM32F412Vx/STM32F412Cx/
  *        STM32F413xx/STM32F423xx  devices.   
  * @retval None
  */
void HAL_PWREx_DisableLowRegulatorLowVoltage(void)
{
20006400:	b480      	push	{r7}
20006402:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
20006404:	4b03      	ldr	r3, [pc, #12]	; (20006414 <HAL_PWREx_DisableLowRegulatorLowVoltage+0x14>)
20006406:	2200      	movs	r2, #0
20006408:	601a      	str	r2, [r3, #0]
}
2000640a:	bf00      	nop
2000640c:	46bd      	mov	sp, r7
2000640e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006412:	4770      	bx	lr
20006414:	420e0028 	.word	0x420e0028
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20006418:	b480      	push	{r7}
2000641a:	af00      	add	r7, sp, #0
  return HAL_OK;
2000641c:	2300      	movs	r3, #0
}
2000641e:	4618      	mov	r0, r3
20006420:	46bd      	mov	sp, r7
20006422:	f85d 7b04 	ldr.w	r7, [sp], #4
20006426:	4770      	bx	lr

20006428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20006428:	b580      	push	{r7, lr}
2000642a:	b086      	sub	sp, #24
2000642c:	af00      	add	r7, sp, #0
2000642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20006430:	687b      	ldr	r3, [r7, #4]
20006432:	2b00      	cmp	r3, #0
20006434:	d101      	bne.n	2000643a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20006436:	2301      	movs	r3, #1
20006438:	e267      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000643a:	687b      	ldr	r3, [r7, #4]
2000643c:	681b      	ldr	r3, [r3, #0]
2000643e:	f003 0301 	and.w	r3, r3, #1
20006442:	2b00      	cmp	r3, #0
20006444:	d075      	beq.n	20006532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20006446:	4b88      	ldr	r3, [pc, #544]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006448:	689b      	ldr	r3, [r3, #8]
2000644a:	f003 030c 	and.w	r3, r3, #12
2000644e:	2b04      	cmp	r3, #4
20006450:	d00c      	beq.n	2000646c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20006452:	4b85      	ldr	r3, [pc, #532]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006454:	689b      	ldr	r3, [r3, #8]
20006456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000645a:	2b08      	cmp	r3, #8
2000645c:	d112      	bne.n	20006484 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000645e:	4b82      	ldr	r3, [pc, #520]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006460:	685b      	ldr	r3, [r3, #4]
20006462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20006466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000646a:	d10b      	bne.n	20006484 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000646c:	4b7e      	ldr	r3, [pc, #504]	; (20006668 <HAL_RCC_OscConfig+0x240>)
2000646e:	681b      	ldr	r3, [r3, #0]
20006470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20006474:	2b00      	cmp	r3, #0
20006476:	d05b      	beq.n	20006530 <HAL_RCC_OscConfig+0x108>
20006478:	687b      	ldr	r3, [r7, #4]
2000647a:	685b      	ldr	r3, [r3, #4]
2000647c:	2b00      	cmp	r3, #0
2000647e:	d157      	bne.n	20006530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20006480:	2301      	movs	r3, #1
20006482:	e242      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20006484:	687b      	ldr	r3, [r7, #4]
20006486:	685b      	ldr	r3, [r3, #4]
20006488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000648c:	d106      	bne.n	2000649c <HAL_RCC_OscConfig+0x74>
2000648e:	4b76      	ldr	r3, [pc, #472]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006490:	681b      	ldr	r3, [r3, #0]
20006492:	4a75      	ldr	r2, [pc, #468]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20006498:	6013      	str	r3, [r2, #0]
2000649a:	e01d      	b.n	200064d8 <HAL_RCC_OscConfig+0xb0>
2000649c:	687b      	ldr	r3, [r7, #4]
2000649e:	685b      	ldr	r3, [r3, #4]
200064a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
200064a4:	d10c      	bne.n	200064c0 <HAL_RCC_OscConfig+0x98>
200064a6:	4b70      	ldr	r3, [pc, #448]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064a8:	681b      	ldr	r3, [r3, #0]
200064aa:	4a6f      	ldr	r2, [pc, #444]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200064b0:	6013      	str	r3, [r2, #0]
200064b2:	4b6d      	ldr	r3, [pc, #436]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064b4:	681b      	ldr	r3, [r3, #0]
200064b6:	4a6c      	ldr	r2, [pc, #432]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
200064bc:	6013      	str	r3, [r2, #0]
200064be:	e00b      	b.n	200064d8 <HAL_RCC_OscConfig+0xb0>
200064c0:	4b69      	ldr	r3, [pc, #420]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064c2:	681b      	ldr	r3, [r3, #0]
200064c4:	4a68      	ldr	r2, [pc, #416]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200064ca:	6013      	str	r3, [r2, #0]
200064cc:	4b66      	ldr	r3, [pc, #408]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064ce:	681b      	ldr	r3, [r3, #0]
200064d0:	4a65      	ldr	r2, [pc, #404]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
200064d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
200064d8:	687b      	ldr	r3, [r7, #4]
200064da:	685b      	ldr	r3, [r3, #4]
200064dc:	2b00      	cmp	r3, #0
200064de:	d013      	beq.n	20006508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
200064e0:	f7fa fa9f 	bl	20000a22 <HAL_GetTick>
200064e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200064e6:	e008      	b.n	200064fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
200064e8:	f7fa fa9b 	bl	20000a22 <HAL_GetTick>
200064ec:	4602      	mov	r2, r0
200064ee:	693b      	ldr	r3, [r7, #16]
200064f0:	1ad3      	subs	r3, r2, r3
200064f2:	2b64      	cmp	r3, #100	; 0x64
200064f4:	d901      	bls.n	200064fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
200064f6:	2303      	movs	r3, #3
200064f8:	e207      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200064fa:	4b5b      	ldr	r3, [pc, #364]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200064fc:	681b      	ldr	r3, [r3, #0]
200064fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20006502:	2b00      	cmp	r3, #0
20006504:	d0f0      	beq.n	200064e8 <HAL_RCC_OscConfig+0xc0>
20006506:	e014      	b.n	20006532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006508:	f7fa fa8b 	bl	20000a22 <HAL_GetTick>
2000650c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000650e:	e008      	b.n	20006522 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20006510:	f7fa fa87 	bl	20000a22 <HAL_GetTick>
20006514:	4602      	mov	r2, r0
20006516:	693b      	ldr	r3, [r7, #16]
20006518:	1ad3      	subs	r3, r2, r3
2000651a:	2b64      	cmp	r3, #100	; 0x64
2000651c:	d901      	bls.n	20006522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000651e:	2303      	movs	r3, #3
20006520:	e1f3      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20006522:	4b51      	ldr	r3, [pc, #324]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006524:	681b      	ldr	r3, [r3, #0]
20006526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000652a:	2b00      	cmp	r3, #0
2000652c:	d1f0      	bne.n	20006510 <HAL_RCC_OscConfig+0xe8>
2000652e:	e000      	b.n	20006532 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20006530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20006532:	687b      	ldr	r3, [r7, #4]
20006534:	681b      	ldr	r3, [r3, #0]
20006536:	f003 0302 	and.w	r3, r3, #2
2000653a:	2b00      	cmp	r3, #0
2000653c:	d063      	beq.n	20006606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000653e:	4b4a      	ldr	r3, [pc, #296]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006540:	689b      	ldr	r3, [r3, #8]
20006542:	f003 030c 	and.w	r3, r3, #12
20006546:	2b00      	cmp	r3, #0
20006548:	d00b      	beq.n	20006562 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000654a:	4b47      	ldr	r3, [pc, #284]	; (20006668 <HAL_RCC_OscConfig+0x240>)
2000654c:	689b      	ldr	r3, [r3, #8]
2000654e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20006552:	2b08      	cmp	r3, #8
20006554:	d11c      	bne.n	20006590 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20006556:	4b44      	ldr	r3, [pc, #272]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006558:	685b      	ldr	r3, [r3, #4]
2000655a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000655e:	2b00      	cmp	r3, #0
20006560:	d116      	bne.n	20006590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20006562:	4b41      	ldr	r3, [pc, #260]	; (20006668 <HAL_RCC_OscConfig+0x240>)
20006564:	681b      	ldr	r3, [r3, #0]
20006566:	f003 0302 	and.w	r3, r3, #2
2000656a:	2b00      	cmp	r3, #0
2000656c:	d005      	beq.n	2000657a <HAL_RCC_OscConfig+0x152>
2000656e:	687b      	ldr	r3, [r7, #4]
20006570:	68db      	ldr	r3, [r3, #12]
20006572:	2b01      	cmp	r3, #1
20006574:	d001      	beq.n	2000657a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
20006576:	2301      	movs	r3, #1
20006578:	e1c7      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000657a:	4b3b      	ldr	r3, [pc, #236]	; (20006668 <HAL_RCC_OscConfig+0x240>)
2000657c:	681b      	ldr	r3, [r3, #0]
2000657e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20006582:	687b      	ldr	r3, [r7, #4]
20006584:	691b      	ldr	r3, [r3, #16]
20006586:	00db      	lsls	r3, r3, #3
20006588:	4937      	ldr	r1, [pc, #220]	; (20006668 <HAL_RCC_OscConfig+0x240>)
2000658a:	4313      	orrs	r3, r2
2000658c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000658e:	e03a      	b.n	20006606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20006590:	687b      	ldr	r3, [r7, #4]
20006592:	68db      	ldr	r3, [r3, #12]
20006594:	2b00      	cmp	r3, #0
20006596:	d020      	beq.n	200065da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20006598:	4b34      	ldr	r3, [pc, #208]	; (2000666c <HAL_RCC_OscConfig+0x244>)
2000659a:	2201      	movs	r2, #1
2000659c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000659e:	f7fa fa40 	bl	20000a22 <HAL_GetTick>
200065a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200065a4:	e008      	b.n	200065b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
200065a6:	f7fa fa3c 	bl	20000a22 <HAL_GetTick>
200065aa:	4602      	mov	r2, r0
200065ac:	693b      	ldr	r3, [r7, #16]
200065ae:	1ad3      	subs	r3, r2, r3
200065b0:	2b02      	cmp	r3, #2
200065b2:	d901      	bls.n	200065b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
200065b4:	2303      	movs	r3, #3
200065b6:	e1a8      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200065b8:	4b2b      	ldr	r3, [pc, #172]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200065ba:	681b      	ldr	r3, [r3, #0]
200065bc:	f003 0302 	and.w	r3, r3, #2
200065c0:	2b00      	cmp	r3, #0
200065c2:	d0f0      	beq.n	200065a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200065c4:	4b28      	ldr	r3, [pc, #160]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200065c6:	681b      	ldr	r3, [r3, #0]
200065c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
200065cc:	687b      	ldr	r3, [r7, #4]
200065ce:	691b      	ldr	r3, [r3, #16]
200065d0:	00db      	lsls	r3, r3, #3
200065d2:	4925      	ldr	r1, [pc, #148]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200065d4:	4313      	orrs	r3, r2
200065d6:	600b      	str	r3, [r1, #0]
200065d8:	e015      	b.n	20006606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
200065da:	4b24      	ldr	r3, [pc, #144]	; (2000666c <HAL_RCC_OscConfig+0x244>)
200065dc:	2200      	movs	r2, #0
200065de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200065e0:	f7fa fa1f 	bl	20000a22 <HAL_GetTick>
200065e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200065e6:	e008      	b.n	200065fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
200065e8:	f7fa fa1b 	bl	20000a22 <HAL_GetTick>
200065ec:	4602      	mov	r2, r0
200065ee:	693b      	ldr	r3, [r7, #16]
200065f0:	1ad3      	subs	r3, r2, r3
200065f2:	2b02      	cmp	r3, #2
200065f4:	d901      	bls.n	200065fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
200065f6:	2303      	movs	r3, #3
200065f8:	e187      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
200065fa:	4b1b      	ldr	r3, [pc, #108]	; (20006668 <HAL_RCC_OscConfig+0x240>)
200065fc:	681b      	ldr	r3, [r3, #0]
200065fe:	f003 0302 	and.w	r3, r3, #2
20006602:	2b00      	cmp	r3, #0
20006604:	d1f0      	bne.n	200065e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20006606:	687b      	ldr	r3, [r7, #4]
20006608:	681b      	ldr	r3, [r3, #0]
2000660a:	f003 0308 	and.w	r3, r3, #8
2000660e:	2b00      	cmp	r3, #0
20006610:	d036      	beq.n	20006680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20006612:	687b      	ldr	r3, [r7, #4]
20006614:	695b      	ldr	r3, [r3, #20]
20006616:	2b00      	cmp	r3, #0
20006618:	d016      	beq.n	20006648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000661a:	4b15      	ldr	r3, [pc, #84]	; (20006670 <HAL_RCC_OscConfig+0x248>)
2000661c:	2201      	movs	r2, #1
2000661e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006620:	f7fa f9ff 	bl	20000a22 <HAL_GetTick>
20006624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20006626:	e008      	b.n	2000663a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20006628:	f7fa f9fb 	bl	20000a22 <HAL_GetTick>
2000662c:	4602      	mov	r2, r0
2000662e:	693b      	ldr	r3, [r7, #16]
20006630:	1ad3      	subs	r3, r2, r3
20006632:	2b02      	cmp	r3, #2
20006634:	d901      	bls.n	2000663a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
20006636:	2303      	movs	r3, #3
20006638:	e167      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000663a:	4b0b      	ldr	r3, [pc, #44]	; (20006668 <HAL_RCC_OscConfig+0x240>)
2000663c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000663e:	f003 0302 	and.w	r3, r3, #2
20006642:	2b00      	cmp	r3, #0
20006644:	d0f0      	beq.n	20006628 <HAL_RCC_OscConfig+0x200>
20006646:	e01b      	b.n	20006680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20006648:	4b09      	ldr	r3, [pc, #36]	; (20006670 <HAL_RCC_OscConfig+0x248>)
2000664a:	2200      	movs	r2, #0
2000664c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000664e:	f7fa f9e8 	bl	20000a22 <HAL_GetTick>
20006652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20006654:	e00e      	b.n	20006674 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20006656:	f7fa f9e4 	bl	20000a22 <HAL_GetTick>
2000665a:	4602      	mov	r2, r0
2000665c:	693b      	ldr	r3, [r7, #16]
2000665e:	1ad3      	subs	r3, r2, r3
20006660:	2b02      	cmp	r3, #2
20006662:	d907      	bls.n	20006674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
20006664:	2303      	movs	r3, #3
20006666:	e150      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
20006668:	40023800 	.word	0x40023800
2000666c:	42470000 	.word	0x42470000
20006670:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20006674:	4b88      	ldr	r3, [pc, #544]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20006678:	f003 0302 	and.w	r3, r3, #2
2000667c:	2b00      	cmp	r3, #0
2000667e:	d1ea      	bne.n	20006656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20006680:	687b      	ldr	r3, [r7, #4]
20006682:	681b      	ldr	r3, [r3, #0]
20006684:	f003 0304 	and.w	r3, r3, #4
20006688:	2b00      	cmp	r3, #0
2000668a:	f000 8097 	beq.w	200067bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
2000668e:	2300      	movs	r3, #0
20006690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
20006692:	4b81      	ldr	r3, [pc, #516]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000669a:	2b00      	cmp	r3, #0
2000669c:	d10f      	bne.n	200066be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000669e:	2300      	movs	r3, #0
200066a0:	60bb      	str	r3, [r7, #8]
200066a2:	4b7d      	ldr	r3, [pc, #500]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200066a6:	4a7c      	ldr	r2, [pc, #496]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200066a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200066ac:	6413      	str	r3, [r2, #64]	; 0x40
200066ae:	4b7a      	ldr	r3, [pc, #488]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200066b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200066b6:	60bb      	str	r3, [r7, #8]
200066b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
200066ba:	2301      	movs	r3, #1
200066bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200066be:	4b77      	ldr	r3, [pc, #476]	; (2000689c <HAL_RCC_OscConfig+0x474>)
200066c0:	681b      	ldr	r3, [r3, #0]
200066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
200066c6:	2b00      	cmp	r3, #0
200066c8:	d118      	bne.n	200066fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
200066ca:	4b74      	ldr	r3, [pc, #464]	; (2000689c <HAL_RCC_OscConfig+0x474>)
200066cc:	681b      	ldr	r3, [r3, #0]
200066ce:	4a73      	ldr	r2, [pc, #460]	; (2000689c <HAL_RCC_OscConfig+0x474>)
200066d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200066d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
200066d6:	f7fa f9a4 	bl	20000a22 <HAL_GetTick>
200066da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200066dc:	e008      	b.n	200066f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
200066de:	f7fa f9a0 	bl	20000a22 <HAL_GetTick>
200066e2:	4602      	mov	r2, r0
200066e4:	693b      	ldr	r3, [r7, #16]
200066e6:	1ad3      	subs	r3, r2, r3
200066e8:	2b02      	cmp	r3, #2
200066ea:	d901      	bls.n	200066f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
200066ec:	2303      	movs	r3, #3
200066ee:	e10c      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
200066f0:	4b6a      	ldr	r3, [pc, #424]	; (2000689c <HAL_RCC_OscConfig+0x474>)
200066f2:	681b      	ldr	r3, [r3, #0]
200066f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
200066f8:	2b00      	cmp	r3, #0
200066fa:	d0f0      	beq.n	200066de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200066fc:	687b      	ldr	r3, [r7, #4]
200066fe:	689b      	ldr	r3, [r3, #8]
20006700:	2b01      	cmp	r3, #1
20006702:	d106      	bne.n	20006712 <HAL_RCC_OscConfig+0x2ea>
20006704:	4b64      	ldr	r3, [pc, #400]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006708:	4a63      	ldr	r2, [pc, #396]	; (20006898 <HAL_RCC_OscConfig+0x470>)
2000670a:	f043 0301 	orr.w	r3, r3, #1
2000670e:	6713      	str	r3, [r2, #112]	; 0x70
20006710:	e01c      	b.n	2000674c <HAL_RCC_OscConfig+0x324>
20006712:	687b      	ldr	r3, [r7, #4]
20006714:	689b      	ldr	r3, [r3, #8]
20006716:	2b05      	cmp	r3, #5
20006718:	d10c      	bne.n	20006734 <HAL_RCC_OscConfig+0x30c>
2000671a:	4b5f      	ldr	r3, [pc, #380]	; (20006898 <HAL_RCC_OscConfig+0x470>)
2000671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000671e:	4a5e      	ldr	r2, [pc, #376]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006720:	f043 0304 	orr.w	r3, r3, #4
20006724:	6713      	str	r3, [r2, #112]	; 0x70
20006726:	4b5c      	ldr	r3, [pc, #368]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000672a:	4a5b      	ldr	r2, [pc, #364]	; (20006898 <HAL_RCC_OscConfig+0x470>)
2000672c:	f043 0301 	orr.w	r3, r3, #1
20006730:	6713      	str	r3, [r2, #112]	; 0x70
20006732:	e00b      	b.n	2000674c <HAL_RCC_OscConfig+0x324>
20006734:	4b58      	ldr	r3, [pc, #352]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006738:	4a57      	ldr	r2, [pc, #348]	; (20006898 <HAL_RCC_OscConfig+0x470>)
2000673a:	f023 0301 	bic.w	r3, r3, #1
2000673e:	6713      	str	r3, [r2, #112]	; 0x70
20006740:	4b55      	ldr	r3, [pc, #340]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006744:	4a54      	ldr	r2, [pc, #336]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006746:	f023 0304 	bic.w	r3, r3, #4
2000674a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000674c:	687b      	ldr	r3, [r7, #4]
2000674e:	689b      	ldr	r3, [r3, #8]
20006750:	2b00      	cmp	r3, #0
20006752:	d015      	beq.n	20006780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20006754:	f7fa f965 	bl	20000a22 <HAL_GetTick>
20006758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000675a:	e00a      	b.n	20006772 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000675c:	f7fa f961 	bl	20000a22 <HAL_GetTick>
20006760:	4602      	mov	r2, r0
20006762:	693b      	ldr	r3, [r7, #16]
20006764:	1ad3      	subs	r3, r2, r3
20006766:	f241 3288 	movw	r2, #5000	; 0x1388
2000676a:	4293      	cmp	r3, r2
2000676c:	d901      	bls.n	20006772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
2000676e:	2303      	movs	r3, #3
20006770:	e0cb      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006772:	4b49      	ldr	r3, [pc, #292]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006776:	f003 0302 	and.w	r3, r3, #2
2000677a:	2b00      	cmp	r3, #0
2000677c:	d0ee      	beq.n	2000675c <HAL_RCC_OscConfig+0x334>
2000677e:	e014      	b.n	200067aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
20006780:	f7fa f94f 	bl	20000a22 <HAL_GetTick>
20006784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20006786:	e00a      	b.n	2000679e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20006788:	f7fa f94b 	bl	20000a22 <HAL_GetTick>
2000678c:	4602      	mov	r2, r0
2000678e:	693b      	ldr	r3, [r7, #16]
20006790:	1ad3      	subs	r3, r2, r3
20006792:	f241 3288 	movw	r2, #5000	; 0x1388
20006796:	4293      	cmp	r3, r2
20006798:	d901      	bls.n	2000679e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
2000679a:	2303      	movs	r3, #3
2000679c:	e0b5      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000679e:	4b3e      	ldr	r3, [pc, #248]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200067a2:	f003 0302 	and.w	r3, r3, #2
200067a6:	2b00      	cmp	r3, #0
200067a8:	d1ee      	bne.n	20006788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
200067aa:	7dfb      	ldrb	r3, [r7, #23]
200067ac:	2b01      	cmp	r3, #1
200067ae:	d105      	bne.n	200067bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
200067b0:	4b39      	ldr	r3, [pc, #228]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200067b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200067b4:	4a38      	ldr	r2, [pc, #224]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200067b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
200067ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
200067bc:	687b      	ldr	r3, [r7, #4]
200067be:	699b      	ldr	r3, [r3, #24]
200067c0:	2b00      	cmp	r3, #0
200067c2:	f000 80a1 	beq.w	20006908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
200067c6:	4b34      	ldr	r3, [pc, #208]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200067c8:	689b      	ldr	r3, [r3, #8]
200067ca:	f003 030c 	and.w	r3, r3, #12
200067ce:	2b08      	cmp	r3, #8
200067d0:	d05c      	beq.n	2000688c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
200067d2:	687b      	ldr	r3, [r7, #4]
200067d4:	699b      	ldr	r3, [r3, #24]
200067d6:	2b02      	cmp	r3, #2
200067d8:	d141      	bne.n	2000685e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
200067da:	4b31      	ldr	r3, [pc, #196]	; (200068a0 <HAL_RCC_OscConfig+0x478>)
200067dc:	2200      	movs	r2, #0
200067de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200067e0:	f7fa f91f 	bl	20000a22 <HAL_GetTick>
200067e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200067e6:	e008      	b.n	200067fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200067e8:	f7fa f91b 	bl	20000a22 <HAL_GetTick>
200067ec:	4602      	mov	r2, r0
200067ee:	693b      	ldr	r3, [r7, #16]
200067f0:	1ad3      	subs	r3, r2, r3
200067f2:	2b02      	cmp	r3, #2
200067f4:	d901      	bls.n	200067fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
200067f6:	2303      	movs	r3, #3
200067f8:	e087      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200067fa:	4b27      	ldr	r3, [pc, #156]	; (20006898 <HAL_RCC_OscConfig+0x470>)
200067fc:	681b      	ldr	r3, [r3, #0]
200067fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006802:	2b00      	cmp	r3, #0
20006804:	d1f0      	bne.n	200067e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
20006806:	687b      	ldr	r3, [r7, #4]
20006808:	69da      	ldr	r2, [r3, #28]
2000680a:	687b      	ldr	r3, [r7, #4]
2000680c:	6a1b      	ldr	r3, [r3, #32]
2000680e:	431a      	orrs	r2, r3
20006810:	687b      	ldr	r3, [r7, #4]
20006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006814:	019b      	lsls	r3, r3, #6
20006816:	431a      	orrs	r2, r3
20006818:	687b      	ldr	r3, [r7, #4]
2000681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000681c:	085b      	lsrs	r3, r3, #1
2000681e:	3b01      	subs	r3, #1
20006820:	041b      	lsls	r3, r3, #16
20006822:	431a      	orrs	r2, r3
20006824:	687b      	ldr	r3, [r7, #4]
20006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20006828:	061b      	lsls	r3, r3, #24
2000682a:	491b      	ldr	r1, [pc, #108]	; (20006898 <HAL_RCC_OscConfig+0x470>)
2000682c:	4313      	orrs	r3, r2
2000682e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20006830:	4b1b      	ldr	r3, [pc, #108]	; (200068a0 <HAL_RCC_OscConfig+0x478>)
20006832:	2201      	movs	r2, #1
20006834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006836:	f7fa f8f4 	bl	20000a22 <HAL_GetTick>
2000683a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000683c:	e008      	b.n	20006850 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000683e:	f7fa f8f0 	bl	20000a22 <HAL_GetTick>
20006842:	4602      	mov	r2, r0
20006844:	693b      	ldr	r3, [r7, #16]
20006846:	1ad3      	subs	r3, r2, r3
20006848:	2b02      	cmp	r3, #2
2000684a:	d901      	bls.n	20006850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
2000684c:	2303      	movs	r3, #3
2000684e:	e05c      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
20006850:	4b11      	ldr	r3, [pc, #68]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006852:	681b      	ldr	r3, [r3, #0]
20006854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006858:	2b00      	cmp	r3, #0
2000685a:	d0f0      	beq.n	2000683e <HAL_RCC_OscConfig+0x416>
2000685c:	e054      	b.n	20006908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000685e:	4b10      	ldr	r3, [pc, #64]	; (200068a0 <HAL_RCC_OscConfig+0x478>)
20006860:	2200      	movs	r2, #0
20006862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
20006864:	f7fa f8dd 	bl	20000a22 <HAL_GetTick>
20006868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000686a:	e008      	b.n	2000687e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000686c:	f7fa f8d9 	bl	20000a22 <HAL_GetTick>
20006870:	4602      	mov	r2, r0
20006872:	693b      	ldr	r3, [r7, #16]
20006874:	1ad3      	subs	r3, r2, r3
20006876:	2b02      	cmp	r3, #2
20006878:	d901      	bls.n	2000687e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
2000687a:	2303      	movs	r3, #3
2000687c:	e045      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000687e:	4b06      	ldr	r3, [pc, #24]	; (20006898 <HAL_RCC_OscConfig+0x470>)
20006880:	681b      	ldr	r3, [r3, #0]
20006882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006886:	2b00      	cmp	r3, #0
20006888:	d1f0      	bne.n	2000686c <HAL_RCC_OscConfig+0x444>
2000688a:	e03d      	b.n	20006908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000688c:	687b      	ldr	r3, [r7, #4]
2000688e:	699b      	ldr	r3, [r3, #24]
20006890:	2b01      	cmp	r3, #1
20006892:	d107      	bne.n	200068a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
20006894:	2301      	movs	r3, #1
20006896:	e038      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
20006898:	40023800 	.word	0x40023800
2000689c:	40007000 	.word	0x40007000
200068a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
200068a4:	4b1b      	ldr	r3, [pc, #108]	; (20006914 <HAL_RCC_OscConfig+0x4ec>)
200068a6:	685b      	ldr	r3, [r3, #4]
200068a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200068aa:	687b      	ldr	r3, [r7, #4]
200068ac:	699b      	ldr	r3, [r3, #24]
200068ae:	2b01      	cmp	r3, #1
200068b0:	d028      	beq.n	20006904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200068b2:	68fb      	ldr	r3, [r7, #12]
200068b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
200068b8:	687b      	ldr	r3, [r7, #4]
200068ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
200068bc:	429a      	cmp	r2, r3
200068be:	d121      	bne.n	20006904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
200068c0:	68fb      	ldr	r3, [r7, #12]
200068c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
200068c6:	687b      	ldr	r3, [r7, #4]
200068c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
200068ca:	429a      	cmp	r2, r3
200068cc:	d11a      	bne.n	20006904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
200068ce:	68fa      	ldr	r2, [r7, #12]
200068d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
200068d4:	4013      	ands	r3, r2
200068d6:	687a      	ldr	r2, [r7, #4]
200068d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
200068da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
200068dc:	4293      	cmp	r3, r2
200068de:	d111      	bne.n	20006904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
200068e0:	68fb      	ldr	r3, [r7, #12]
200068e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
200068e6:	687b      	ldr	r3, [r7, #4]
200068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200068ea:	085b      	lsrs	r3, r3, #1
200068ec:	3b01      	subs	r3, #1
200068ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
200068f0:	429a      	cmp	r2, r3
200068f2:	d107      	bne.n	20006904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
200068f4:	68fb      	ldr	r3, [r7, #12]
200068f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
200068fa:	687b      	ldr	r3, [r7, #4]
200068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200068fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
20006900:	429a      	cmp	r2, r3
20006902:	d001      	beq.n	20006908 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
20006904:	2301      	movs	r3, #1
20006906:	e000      	b.n	2000690a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
20006908:	2300      	movs	r3, #0
}
2000690a:	4618      	mov	r0, r3
2000690c:	3718      	adds	r7, #24
2000690e:	46bd      	mov	sp, r7
20006910:	bd80      	pop	{r7, pc}
20006912:	bf00      	nop
20006914:	40023800 	.word	0x40023800

20006918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20006918:	b580      	push	{r7, lr}
2000691a:	b084      	sub	sp, #16
2000691c:	af00      	add	r7, sp, #0
2000691e:	6078      	str	r0, [r7, #4]
20006920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
20006922:	687b      	ldr	r3, [r7, #4]
20006924:	2b00      	cmp	r3, #0
20006926:	d101      	bne.n	2000692c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
20006928:	2301      	movs	r3, #1
2000692a:	e0cc      	b.n	20006ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000692c:	4b68      	ldr	r3, [pc, #416]	; (20006ad0 <HAL_RCC_ClockConfig+0x1b8>)
2000692e:	681b      	ldr	r3, [r3, #0]
20006930:	f003 0307 	and.w	r3, r3, #7
20006934:	683a      	ldr	r2, [r7, #0]
20006936:	429a      	cmp	r2, r3
20006938:	d90c      	bls.n	20006954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000693a:	4b65      	ldr	r3, [pc, #404]	; (20006ad0 <HAL_RCC_ClockConfig+0x1b8>)
2000693c:	683a      	ldr	r2, [r7, #0]
2000693e:	b2d2      	uxtb	r2, r2
20006940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20006942:	4b63      	ldr	r3, [pc, #396]	; (20006ad0 <HAL_RCC_ClockConfig+0x1b8>)
20006944:	681b      	ldr	r3, [r3, #0]
20006946:	f003 0307 	and.w	r3, r3, #7
2000694a:	683a      	ldr	r2, [r7, #0]
2000694c:	429a      	cmp	r2, r3
2000694e:	d001      	beq.n	20006954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
20006950:	2301      	movs	r3, #1
20006952:	e0b8      	b.n	20006ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20006954:	687b      	ldr	r3, [r7, #4]
20006956:	681b      	ldr	r3, [r3, #0]
20006958:	f003 0302 	and.w	r3, r3, #2
2000695c:	2b00      	cmp	r3, #0
2000695e:	d020      	beq.n	200069a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006960:	687b      	ldr	r3, [r7, #4]
20006962:	681b      	ldr	r3, [r3, #0]
20006964:	f003 0304 	and.w	r3, r3, #4
20006968:	2b00      	cmp	r3, #0
2000696a:	d005      	beq.n	20006978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000696c:	4b59      	ldr	r3, [pc, #356]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
2000696e:	689b      	ldr	r3, [r3, #8]
20006970:	4a58      	ldr	r2, [pc, #352]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
20006976:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006978:	687b      	ldr	r3, [r7, #4]
2000697a:	681b      	ldr	r3, [r3, #0]
2000697c:	f003 0308 	and.w	r3, r3, #8
20006980:	2b00      	cmp	r3, #0
20006982:	d005      	beq.n	20006990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20006984:	4b53      	ldr	r3, [pc, #332]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006986:	689b      	ldr	r3, [r3, #8]
20006988:	4a52      	ldr	r2, [pc, #328]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
2000698a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000698e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20006990:	4b50      	ldr	r3, [pc, #320]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006992:	689b      	ldr	r3, [r3, #8]
20006994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20006998:	687b      	ldr	r3, [r7, #4]
2000699a:	689b      	ldr	r3, [r3, #8]
2000699c:	494d      	ldr	r1, [pc, #308]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
2000699e:	4313      	orrs	r3, r2
200069a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
200069a2:	687b      	ldr	r3, [r7, #4]
200069a4:	681b      	ldr	r3, [r3, #0]
200069a6:	f003 0301 	and.w	r3, r3, #1
200069aa:	2b00      	cmp	r3, #0
200069ac:	d044      	beq.n	20006a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
200069ae:	687b      	ldr	r3, [r7, #4]
200069b0:	685b      	ldr	r3, [r3, #4]
200069b2:	2b01      	cmp	r3, #1
200069b4:	d107      	bne.n	200069c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
200069b6:	4b47      	ldr	r3, [pc, #284]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
200069b8:	681b      	ldr	r3, [r3, #0]
200069ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200069be:	2b00      	cmp	r3, #0
200069c0:	d119      	bne.n	200069f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
200069c2:	2301      	movs	r3, #1
200069c4:	e07f      	b.n	20006ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200069c6:	687b      	ldr	r3, [r7, #4]
200069c8:	685b      	ldr	r3, [r3, #4]
200069ca:	2b02      	cmp	r3, #2
200069cc:	d003      	beq.n	200069d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
200069ce:	687b      	ldr	r3, [r7, #4]
200069d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
200069d2:	2b03      	cmp	r3, #3
200069d4:	d107      	bne.n	200069e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200069d6:	4b3f      	ldr	r3, [pc, #252]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
200069d8:	681b      	ldr	r3, [r3, #0]
200069da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200069de:	2b00      	cmp	r3, #0
200069e0:	d109      	bne.n	200069f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
200069e2:	2301      	movs	r3, #1
200069e4:	e06f      	b.n	20006ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
200069e6:	4b3b      	ldr	r3, [pc, #236]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
200069e8:	681b      	ldr	r3, [r3, #0]
200069ea:	f003 0302 	and.w	r3, r3, #2
200069ee:	2b00      	cmp	r3, #0
200069f0:	d101      	bne.n	200069f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
200069f2:	2301      	movs	r3, #1
200069f4:	e067      	b.n	20006ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
200069f6:	4b37      	ldr	r3, [pc, #220]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
200069f8:	689b      	ldr	r3, [r3, #8]
200069fa:	f023 0203 	bic.w	r2, r3, #3
200069fe:	687b      	ldr	r3, [r7, #4]
20006a00:	685b      	ldr	r3, [r3, #4]
20006a02:	4934      	ldr	r1, [pc, #208]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006a04:	4313      	orrs	r3, r2
20006a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
20006a08:	f7fa f80b 	bl	20000a22 <HAL_GetTick>
20006a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006a0e:	e00a      	b.n	20006a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20006a10:	f7fa f807 	bl	20000a22 <HAL_GetTick>
20006a14:	4602      	mov	r2, r0
20006a16:	68fb      	ldr	r3, [r7, #12]
20006a18:	1ad3      	subs	r3, r2, r3
20006a1a:	f241 3288 	movw	r2, #5000	; 0x1388
20006a1e:	4293      	cmp	r3, r2
20006a20:	d901      	bls.n	20006a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
20006a22:	2303      	movs	r3, #3
20006a24:	e04f      	b.n	20006ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20006a26:	4b2b      	ldr	r3, [pc, #172]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006a28:	689b      	ldr	r3, [r3, #8]
20006a2a:	f003 020c 	and.w	r2, r3, #12
20006a2e:	687b      	ldr	r3, [r7, #4]
20006a30:	685b      	ldr	r3, [r3, #4]
20006a32:	009b      	lsls	r3, r3, #2
20006a34:	429a      	cmp	r2, r3
20006a36:	d1eb      	bne.n	20006a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
20006a38:	4b25      	ldr	r3, [pc, #148]	; (20006ad0 <HAL_RCC_ClockConfig+0x1b8>)
20006a3a:	681b      	ldr	r3, [r3, #0]
20006a3c:	f003 0307 	and.w	r3, r3, #7
20006a40:	683a      	ldr	r2, [r7, #0]
20006a42:	429a      	cmp	r2, r3
20006a44:	d20c      	bcs.n	20006a60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20006a46:	4b22      	ldr	r3, [pc, #136]	; (20006ad0 <HAL_RCC_ClockConfig+0x1b8>)
20006a48:	683a      	ldr	r2, [r7, #0]
20006a4a:	b2d2      	uxtb	r2, r2
20006a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
20006a4e:	4b20      	ldr	r3, [pc, #128]	; (20006ad0 <HAL_RCC_ClockConfig+0x1b8>)
20006a50:	681b      	ldr	r3, [r3, #0]
20006a52:	f003 0307 	and.w	r3, r3, #7
20006a56:	683a      	ldr	r2, [r7, #0]
20006a58:	429a      	cmp	r2, r3
20006a5a:	d001      	beq.n	20006a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20006a5c:	2301      	movs	r3, #1
20006a5e:	e032      	b.n	20006ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006a60:	687b      	ldr	r3, [r7, #4]
20006a62:	681b      	ldr	r3, [r3, #0]
20006a64:	f003 0304 	and.w	r3, r3, #4
20006a68:	2b00      	cmp	r3, #0
20006a6a:	d008      	beq.n	20006a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20006a6c:	4b19      	ldr	r3, [pc, #100]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006a6e:	689b      	ldr	r3, [r3, #8]
20006a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20006a74:	687b      	ldr	r3, [r7, #4]
20006a76:	68db      	ldr	r3, [r3, #12]
20006a78:	4916      	ldr	r1, [pc, #88]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006a7a:	4313      	orrs	r3, r2
20006a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006a7e:	687b      	ldr	r3, [r7, #4]
20006a80:	681b      	ldr	r3, [r3, #0]
20006a82:	f003 0308 	and.w	r3, r3, #8
20006a86:	2b00      	cmp	r3, #0
20006a88:	d009      	beq.n	20006a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20006a8a:	4b12      	ldr	r3, [pc, #72]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006a8c:	689b      	ldr	r3, [r3, #8]
20006a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20006a92:	687b      	ldr	r3, [r7, #4]
20006a94:	691b      	ldr	r3, [r3, #16]
20006a96:	00db      	lsls	r3, r3, #3
20006a98:	490e      	ldr	r1, [pc, #56]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006a9a:	4313      	orrs	r3, r2
20006a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20006a9e:	f000 f8a1 	bl	20006be4 <HAL_RCC_GetSysClockFreq>
20006aa2:	4602      	mov	r2, r0
20006aa4:	4b0b      	ldr	r3, [pc, #44]	; (20006ad4 <HAL_RCC_ClockConfig+0x1bc>)
20006aa6:	689b      	ldr	r3, [r3, #8]
20006aa8:	091b      	lsrs	r3, r3, #4
20006aaa:	f003 030f 	and.w	r3, r3, #15
20006aae:	490a      	ldr	r1, [pc, #40]	; (20006ad8 <HAL_RCC_ClockConfig+0x1c0>)
20006ab0:	5ccb      	ldrb	r3, [r1, r3]
20006ab2:	fa22 f303 	lsr.w	r3, r2, r3
20006ab6:	4a09      	ldr	r2, [pc, #36]	; (20006adc <HAL_RCC_ClockConfig+0x1c4>)
20006ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
20006aba:	4b09      	ldr	r3, [pc, #36]	; (20006ae0 <HAL_RCC_ClockConfig+0x1c8>)
20006abc:	681b      	ldr	r3, [r3, #0]
20006abe:	4618      	mov	r0, r3
20006ac0:	f7f9 ffc2 	bl	20000a48 <HAL_InitTick>

  return HAL_OK;
20006ac4:	2300      	movs	r3, #0
}
20006ac6:	4618      	mov	r0, r3
20006ac8:	3710      	adds	r7, #16
20006aca:	46bd      	mov	sp, r7
20006acc:	bd80      	pop	{r7, pc}
20006ace:	bf00      	nop
20006ad0:	40023c00 	.word	0x40023c00
20006ad4:	40023800 	.word	0x40023800
20006ad8:	2000a5f4 	.word	0x2000a5f4
20006adc:	200003b0 	.word	0x200003b0
20006ae0:	200003b4 	.word	0x200003b4

20006ae4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
20006ae4:	b580      	push	{r7, lr}
20006ae6:	b08c      	sub	sp, #48	; 0x30
20006ae8:	af00      	add	r7, sp, #0
20006aea:	60f8      	str	r0, [r7, #12]
20006aec:	60b9      	str	r1, [r7, #8]
20006aee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
20006af0:	68fb      	ldr	r3, [r7, #12]
20006af2:	2b00      	cmp	r3, #0
20006af4:	d129      	bne.n	20006b4a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
20006af6:	2300      	movs	r3, #0
20006af8:	61bb      	str	r3, [r7, #24]
20006afa:	4b2b      	ldr	r3, [pc, #172]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006afe:	4a2a      	ldr	r2, [pc, #168]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b00:	f043 0301 	orr.w	r3, r3, #1
20006b04:	6313      	str	r3, [r2, #48]	; 0x30
20006b06:	4b28      	ldr	r3, [pc, #160]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006b0a:	f003 0301 	and.w	r3, r3, #1
20006b0e:	61bb      	str	r3, [r7, #24]
20006b10:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
20006b12:	f44f 7380 	mov.w	r3, #256	; 0x100
20006b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20006b18:	2302      	movs	r3, #2
20006b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20006b1c:	2303      	movs	r3, #3
20006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20006b20:	2300      	movs	r3, #0
20006b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20006b24:	2300      	movs	r3, #0
20006b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
20006b28:	f107 031c 	add.w	r3, r7, #28
20006b2c:	4619      	mov	r1, r3
20006b2e:	481f      	ldr	r0, [pc, #124]	; (20006bac <HAL_RCC_MCOConfig+0xc8>)
20006b30:	f7fe feb8 	bl	200058a4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
20006b34:	4b1c      	ldr	r3, [pc, #112]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b36:	689b      	ldr	r3, [r3, #8]
20006b38:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
20006b3c:	68b9      	ldr	r1, [r7, #8]
20006b3e:	687b      	ldr	r3, [r7, #4]
20006b40:	430b      	orrs	r3, r1
20006b42:	4919      	ldr	r1, [pc, #100]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b44:	4313      	orrs	r3, r2
20006b46:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
20006b48:	e029      	b.n	20006b9e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
20006b4a:	2300      	movs	r3, #0
20006b4c:	617b      	str	r3, [r7, #20]
20006b4e:	4b16      	ldr	r3, [pc, #88]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006b52:	4a15      	ldr	r2, [pc, #84]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b54:	f043 0304 	orr.w	r3, r3, #4
20006b58:	6313      	str	r3, [r2, #48]	; 0x30
20006b5a:	4b13      	ldr	r3, [pc, #76]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006b5e:	f003 0304 	and.w	r3, r3, #4
20006b62:	617b      	str	r3, [r7, #20]
20006b64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
20006b66:	f44f 7300 	mov.w	r3, #512	; 0x200
20006b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20006b6c:	2302      	movs	r3, #2
20006b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20006b70:	2303      	movs	r3, #3
20006b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20006b74:	2300      	movs	r3, #0
20006b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
20006b78:	2300      	movs	r3, #0
20006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
20006b7c:	f107 031c 	add.w	r3, r7, #28
20006b80:	4619      	mov	r1, r3
20006b82:	480b      	ldr	r0, [pc, #44]	; (20006bb0 <HAL_RCC_MCOConfig+0xcc>)
20006b84:	f7fe fe8e 	bl	200058a4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
20006b88:	4b07      	ldr	r3, [pc, #28]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b8a:	689b      	ldr	r3, [r3, #8]
20006b8c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
20006b90:	687b      	ldr	r3, [r7, #4]
20006b92:	00d9      	lsls	r1, r3, #3
20006b94:	68bb      	ldr	r3, [r7, #8]
20006b96:	430b      	orrs	r3, r1
20006b98:	4903      	ldr	r1, [pc, #12]	; (20006ba8 <HAL_RCC_MCOConfig+0xc4>)
20006b9a:	4313      	orrs	r3, r2
20006b9c:	608b      	str	r3, [r1, #8]
}
20006b9e:	bf00      	nop
20006ba0:	3730      	adds	r7, #48	; 0x30
20006ba2:	46bd      	mov	sp, r7
20006ba4:	bd80      	pop	{r7, pc}
20006ba6:	bf00      	nop
20006ba8:	40023800 	.word	0x40023800
20006bac:	40020000 	.word	0x40020000
20006bb0:	40020800 	.word	0x40020800

20006bb4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
20006bb4:	b480      	push	{r7}
20006bb6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
20006bb8:	4b03      	ldr	r3, [pc, #12]	; (20006bc8 <HAL_RCC_EnableCSS+0x14>)
20006bba:	2201      	movs	r2, #1
20006bbc:	601a      	str	r2, [r3, #0]
}
20006bbe:	bf00      	nop
20006bc0:	46bd      	mov	sp, r7
20006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
20006bc6:	4770      	bx	lr
20006bc8:	4247004c 	.word	0x4247004c

20006bcc <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
20006bcc:	b480      	push	{r7}
20006bce:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
20006bd0:	4b03      	ldr	r3, [pc, #12]	; (20006be0 <HAL_RCC_DisableCSS+0x14>)
20006bd2:	2200      	movs	r2, #0
20006bd4:	601a      	str	r2, [r3, #0]
}
20006bd6:	bf00      	nop
20006bd8:	46bd      	mov	sp, r7
20006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
20006bde:	4770      	bx	lr
20006be0:	4247004c 	.word	0x4247004c

20006be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20006be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
20006be8:	b090      	sub	sp, #64	; 0x40
20006bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20006bec:	2300      	movs	r3, #0
20006bee:	637b      	str	r3, [r7, #52]	; 0x34
20006bf0:	2300      	movs	r3, #0
20006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
20006bf4:	2300      	movs	r3, #0
20006bf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
20006bf8:	2300      	movs	r3, #0
20006bfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
20006bfc:	4b59      	ldr	r3, [pc, #356]	; (20006d64 <HAL_RCC_GetSysClockFreq+0x180>)
20006bfe:	689b      	ldr	r3, [r3, #8]
20006c00:	f003 030c 	and.w	r3, r3, #12
20006c04:	2b08      	cmp	r3, #8
20006c06:	d00d      	beq.n	20006c24 <HAL_RCC_GetSysClockFreq+0x40>
20006c08:	2b08      	cmp	r3, #8
20006c0a:	f200 80a1 	bhi.w	20006d50 <HAL_RCC_GetSysClockFreq+0x16c>
20006c0e:	2b00      	cmp	r3, #0
20006c10:	d002      	beq.n	20006c18 <HAL_RCC_GetSysClockFreq+0x34>
20006c12:	2b04      	cmp	r3, #4
20006c14:	d003      	beq.n	20006c1e <HAL_RCC_GetSysClockFreq+0x3a>
20006c16:	e09b      	b.n	20006d50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
20006c18:	4b53      	ldr	r3, [pc, #332]	; (20006d68 <HAL_RCC_GetSysClockFreq+0x184>)
20006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
20006c1c:	e09b      	b.n	20006d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
20006c1e:	4b53      	ldr	r3, [pc, #332]	; (20006d6c <HAL_RCC_GetSysClockFreq+0x188>)
20006c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20006c22:	e098      	b.n	20006d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
20006c24:	4b4f      	ldr	r3, [pc, #316]	; (20006d64 <HAL_RCC_GetSysClockFreq+0x180>)
20006c26:	685b      	ldr	r3, [r3, #4]
20006c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20006c2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
20006c2e:	4b4d      	ldr	r3, [pc, #308]	; (20006d64 <HAL_RCC_GetSysClockFreq+0x180>)
20006c30:	685b      	ldr	r3, [r3, #4]
20006c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20006c36:	2b00      	cmp	r3, #0
20006c38:	d028      	beq.n	20006c8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006c3a:	4b4a      	ldr	r3, [pc, #296]	; (20006d64 <HAL_RCC_GetSysClockFreq+0x180>)
20006c3c:	685b      	ldr	r3, [r3, #4]
20006c3e:	099b      	lsrs	r3, r3, #6
20006c40:	2200      	movs	r2, #0
20006c42:	623b      	str	r3, [r7, #32]
20006c44:	627a      	str	r2, [r7, #36]	; 0x24
20006c46:	6a3b      	ldr	r3, [r7, #32]
20006c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
20006c4c:	2100      	movs	r1, #0
20006c4e:	4b47      	ldr	r3, [pc, #284]	; (20006d6c <HAL_RCC_GetSysClockFreq+0x188>)
20006c50:	fb03 f201 	mul.w	r2, r3, r1
20006c54:	2300      	movs	r3, #0
20006c56:	fb00 f303 	mul.w	r3, r0, r3
20006c5a:	4413      	add	r3, r2
20006c5c:	4a43      	ldr	r2, [pc, #268]	; (20006d6c <HAL_RCC_GetSysClockFreq+0x188>)
20006c5e:	fba0 1202 	umull	r1, r2, r0, r2
20006c62:	62fa      	str	r2, [r7, #44]	; 0x2c
20006c64:	460a      	mov	r2, r1
20006c66:	62ba      	str	r2, [r7, #40]	; 0x28
20006c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
20006c6a:	4413      	add	r3, r2
20006c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
20006c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20006c70:	2200      	movs	r2, #0
20006c72:	61bb      	str	r3, [r7, #24]
20006c74:	61fa      	str	r2, [r7, #28]
20006c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20006c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
20006c7e:	f7f9 fd2b 	bl	200006d8 <__aeabi_uldivmod>
20006c82:	4602      	mov	r2, r0
20006c84:	460b      	mov	r3, r1
20006c86:	4613      	mov	r3, r2
20006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
20006c8a:	e053      	b.n	20006d34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
20006c8c:	4b35      	ldr	r3, [pc, #212]	; (20006d64 <HAL_RCC_GetSysClockFreq+0x180>)
20006c8e:	685b      	ldr	r3, [r3, #4]
20006c90:	099b      	lsrs	r3, r3, #6
20006c92:	2200      	movs	r2, #0
20006c94:	613b      	str	r3, [r7, #16]
20006c96:	617a      	str	r2, [r7, #20]
20006c98:	693b      	ldr	r3, [r7, #16]
20006c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
20006c9e:	f04f 0b00 	mov.w	fp, #0
20006ca2:	4652      	mov	r2, sl
20006ca4:	465b      	mov	r3, fp
20006ca6:	f04f 0000 	mov.w	r0, #0
20006caa:	f04f 0100 	mov.w	r1, #0
20006cae:	0159      	lsls	r1, r3, #5
20006cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
20006cb4:	0150      	lsls	r0, r2, #5
20006cb6:	4602      	mov	r2, r0
20006cb8:	460b      	mov	r3, r1
20006cba:	ebb2 080a 	subs.w	r8, r2, sl
20006cbe:	eb63 090b 	sbc.w	r9, r3, fp
20006cc2:	f04f 0200 	mov.w	r2, #0
20006cc6:	f04f 0300 	mov.w	r3, #0
20006cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
20006cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
20006cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
20006cd6:	ebb2 0408 	subs.w	r4, r2, r8
20006cda:	eb63 0509 	sbc.w	r5, r3, r9
20006cde:	f04f 0200 	mov.w	r2, #0
20006ce2:	f04f 0300 	mov.w	r3, #0
20006ce6:	00eb      	lsls	r3, r5, #3
20006ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
20006cec:	00e2      	lsls	r2, r4, #3
20006cee:	4614      	mov	r4, r2
20006cf0:	461d      	mov	r5, r3
20006cf2:	eb14 030a 	adds.w	r3, r4, sl
20006cf6:	603b      	str	r3, [r7, #0]
20006cf8:	eb45 030b 	adc.w	r3, r5, fp
20006cfc:	607b      	str	r3, [r7, #4]
20006cfe:	f04f 0200 	mov.w	r2, #0
20006d02:	f04f 0300 	mov.w	r3, #0
20006d06:	e9d7 4500 	ldrd	r4, r5, [r7]
20006d0a:	4629      	mov	r1, r5
20006d0c:	028b      	lsls	r3, r1, #10
20006d0e:	4621      	mov	r1, r4
20006d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
20006d14:	4621      	mov	r1, r4
20006d16:	028a      	lsls	r2, r1, #10
20006d18:	4610      	mov	r0, r2
20006d1a:	4619      	mov	r1, r3
20006d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20006d1e:	2200      	movs	r2, #0
20006d20:	60bb      	str	r3, [r7, #8]
20006d22:	60fa      	str	r2, [r7, #12]
20006d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
20006d28:	f7f9 fcd6 	bl	200006d8 <__aeabi_uldivmod>
20006d2c:	4602      	mov	r2, r0
20006d2e:	460b      	mov	r3, r1
20006d30:	4613      	mov	r3, r2
20006d32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20006d34:	4b0b      	ldr	r3, [pc, #44]	; (20006d64 <HAL_RCC_GetSysClockFreq+0x180>)
20006d36:	685b      	ldr	r3, [r3, #4]
20006d38:	0c1b      	lsrs	r3, r3, #16
20006d3a:	f003 0303 	and.w	r3, r3, #3
20006d3e:	3301      	adds	r3, #1
20006d40:	005b      	lsls	r3, r3, #1
20006d42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
20006d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
20006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20006d48:	fbb2 f3f3 	udiv	r3, r2, r3
20006d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20006d4e:	e002      	b.n	20006d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
20006d50:	4b05      	ldr	r3, [pc, #20]	; (20006d68 <HAL_RCC_GetSysClockFreq+0x184>)
20006d52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
20006d54:	bf00      	nop
    }
  }
  return sysclockfreq;
20006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
20006d58:	4618      	mov	r0, r3
20006d5a:	3740      	adds	r7, #64	; 0x40
20006d5c:	46bd      	mov	sp, r7
20006d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
20006d62:	bf00      	nop
20006d64:	40023800 	.word	0x40023800
20006d68:	00f42400 	.word	0x00f42400
20006d6c:	017d7840 	.word	0x017d7840

20006d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
20006d70:	b480      	push	{r7}
20006d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20006d74:	4b03      	ldr	r3, [pc, #12]	; (20006d84 <HAL_RCC_GetHCLKFreq+0x14>)
20006d76:	681b      	ldr	r3, [r3, #0]
}
20006d78:	4618      	mov	r0, r3
20006d7a:	46bd      	mov	sp, r7
20006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
20006d80:	4770      	bx	lr
20006d82:	bf00      	nop
20006d84:	200003b0 	.word	0x200003b0

20006d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20006d88:	b580      	push	{r7, lr}
20006d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20006d8c:	f7ff fff0 	bl	20006d70 <HAL_RCC_GetHCLKFreq>
20006d90:	4602      	mov	r2, r0
20006d92:	4b05      	ldr	r3, [pc, #20]	; (20006da8 <HAL_RCC_GetPCLK1Freq+0x20>)
20006d94:	689b      	ldr	r3, [r3, #8]
20006d96:	0a9b      	lsrs	r3, r3, #10
20006d98:	f003 0307 	and.w	r3, r3, #7
20006d9c:	4903      	ldr	r1, [pc, #12]	; (20006dac <HAL_RCC_GetPCLK1Freq+0x24>)
20006d9e:	5ccb      	ldrb	r3, [r1, r3]
20006da0:	fa22 f303 	lsr.w	r3, r2, r3
}
20006da4:	4618      	mov	r0, r3
20006da6:	bd80      	pop	{r7, pc}
20006da8:	40023800 	.word	0x40023800
20006dac:	2000a604 	.word	0x2000a604

20006db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
20006db0:	b580      	push	{r7, lr}
20006db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20006db4:	f7ff ffdc 	bl	20006d70 <HAL_RCC_GetHCLKFreq>
20006db8:	4602      	mov	r2, r0
20006dba:	4b05      	ldr	r3, [pc, #20]	; (20006dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
20006dbc:	689b      	ldr	r3, [r3, #8]
20006dbe:	0b5b      	lsrs	r3, r3, #13
20006dc0:	f003 0307 	and.w	r3, r3, #7
20006dc4:	4903      	ldr	r1, [pc, #12]	; (20006dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
20006dc6:	5ccb      	ldrb	r3, [r1, r3]
20006dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
20006dcc:	4618      	mov	r0, r3
20006dce:	bd80      	pop	{r7, pc}
20006dd0:	40023800 	.word	0x40023800
20006dd4:	2000a604 	.word	0x2000a604

20006dd8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20006dd8:	b480      	push	{r7}
20006dda:	b083      	sub	sp, #12
20006ddc:	af00      	add	r7, sp, #0
20006dde:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
20006de0:	687b      	ldr	r3, [r7, #4]
20006de2:	220f      	movs	r2, #15
20006de4:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
20006de6:	4b45      	ldr	r3, [pc, #276]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006de8:	681b      	ldr	r3, [r3, #0]
20006dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20006dee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
20006df2:	d104      	bne.n	20006dfe <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
20006df4:	687b      	ldr	r3, [r7, #4]
20006df6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
20006dfa:	605a      	str	r2, [r3, #4]
20006dfc:	e00e      	b.n	20006e1c <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
20006dfe:	4b3f      	ldr	r3, [pc, #252]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006e00:	681b      	ldr	r3, [r3, #0]
20006e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20006e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20006e0a:	d104      	bne.n	20006e16 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
20006e0c:	687b      	ldr	r3, [r7, #4]
20006e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20006e12:	605a      	str	r2, [r3, #4]
20006e14:	e002      	b.n	20006e1c <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
20006e16:	687b      	ldr	r3, [r7, #4]
20006e18:	2200      	movs	r2, #0
20006e1a:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
20006e1c:	4b37      	ldr	r3, [pc, #220]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006e1e:	681b      	ldr	r3, [r3, #0]
20006e20:	f003 0301 	and.w	r3, r3, #1
20006e24:	2b01      	cmp	r3, #1
20006e26:	d103      	bne.n	20006e30 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
20006e28:	687b      	ldr	r3, [r7, #4]
20006e2a:	2201      	movs	r2, #1
20006e2c:	60da      	str	r2, [r3, #12]
20006e2e:	e002      	b.n	20006e36 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
20006e30:	687b      	ldr	r3, [r7, #4]
20006e32:	2200      	movs	r2, #0
20006e34:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
20006e36:	4b31      	ldr	r3, [pc, #196]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006e38:	681b      	ldr	r3, [r3, #0]
20006e3a:	08db      	lsrs	r3, r3, #3
20006e3c:	f003 021f 	and.w	r2, r3, #31
20006e40:	687b      	ldr	r3, [r7, #4]
20006e42:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20006e44:	4b2d      	ldr	r3, [pc, #180]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006e48:	f003 0304 	and.w	r3, r3, #4
20006e4c:	2b04      	cmp	r3, #4
20006e4e:	d103      	bne.n	20006e58 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
20006e50:	687b      	ldr	r3, [r7, #4]
20006e52:	2205      	movs	r2, #5
20006e54:	609a      	str	r2, [r3, #8]
20006e56:	e00c      	b.n	20006e72 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
20006e58:	4b28      	ldr	r3, [pc, #160]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006e5c:	f003 0301 	and.w	r3, r3, #1
20006e60:	2b01      	cmp	r3, #1
20006e62:	d103      	bne.n	20006e6c <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
20006e64:	687b      	ldr	r3, [r7, #4]
20006e66:	2201      	movs	r2, #1
20006e68:	609a      	str	r2, [r3, #8]
20006e6a:	e002      	b.n	20006e72 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
20006e6c:	687b      	ldr	r3, [r7, #4]
20006e6e:	2200      	movs	r2, #0
20006e70:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
20006e72:	4b22      	ldr	r3, [pc, #136]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20006e76:	f003 0301 	and.w	r3, r3, #1
20006e7a:	2b01      	cmp	r3, #1
20006e7c:	d103      	bne.n	20006e86 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
20006e7e:	687b      	ldr	r3, [r7, #4]
20006e80:	2201      	movs	r2, #1
20006e82:	615a      	str	r2, [r3, #20]
20006e84:	e002      	b.n	20006e8c <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20006e86:	687b      	ldr	r3, [r7, #4]
20006e88:	2200      	movs	r2, #0
20006e8a:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
20006e8c:	4b1b      	ldr	r3, [pc, #108]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006e8e:	681b      	ldr	r3, [r3, #0]
20006e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20006e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20006e98:	d103      	bne.n	20006ea2 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
20006e9a:	687b      	ldr	r3, [r7, #4]
20006e9c:	2202      	movs	r2, #2
20006e9e:	619a      	str	r2, [r3, #24]
20006ea0:	e002      	b.n	20006ea8 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
20006ea2:	687b      	ldr	r3, [r7, #4]
20006ea4:	2201      	movs	r2, #1
20006ea6:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20006ea8:	4b14      	ldr	r3, [pc, #80]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006eaa:	685b      	ldr	r3, [r3, #4]
20006eac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20006eb0:	687b      	ldr	r3, [r7, #4]
20006eb2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
20006eb4:	4b11      	ldr	r3, [pc, #68]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006eb6:	685b      	ldr	r3, [r3, #4]
20006eb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20006ebc:	687b      	ldr	r3, [r7, #4]
20006ebe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20006ec0:	4b0e      	ldr	r3, [pc, #56]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006ec2:	685b      	ldr	r3, [r3, #4]
20006ec4:	099b      	lsrs	r3, r3, #6
20006ec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
20006eca:	687b      	ldr	r3, [r7, #4]
20006ecc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
20006ece:	4b0b      	ldr	r3, [pc, #44]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006ed0:	685b      	ldr	r3, [r3, #4]
20006ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
20006ed6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
20006eda:	005b      	lsls	r3, r3, #1
20006edc:	0c1a      	lsrs	r2, r3, #16
20006ede:	687b      	ldr	r3, [r7, #4]
20006ee0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
20006ee2:	4b06      	ldr	r3, [pc, #24]	; (20006efc <HAL_RCC_GetOscConfig+0x124>)
20006ee4:	685b      	ldr	r3, [r3, #4]
20006ee6:	0e1b      	lsrs	r3, r3, #24
20006ee8:	f003 020f 	and.w	r2, r3, #15
20006eec:	687b      	ldr	r3, [r7, #4]
20006eee:	62da      	str	r2, [r3, #44]	; 0x2c
}
20006ef0:	bf00      	nop
20006ef2:	370c      	adds	r7, #12
20006ef4:	46bd      	mov	sp, r7
20006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
20006efa:	4770      	bx	lr
20006efc:	40023800 	.word	0x40023800

20006f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
20006f00:	b480      	push	{r7}
20006f02:	b083      	sub	sp, #12
20006f04:	af00      	add	r7, sp, #0
20006f06:	6078      	str	r0, [r7, #4]
20006f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
20006f0a:	687b      	ldr	r3, [r7, #4]
20006f0c:	220f      	movs	r2, #15
20006f0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
20006f10:	4b12      	ldr	r3, [pc, #72]	; (20006f5c <HAL_RCC_GetClockConfig+0x5c>)
20006f12:	689b      	ldr	r3, [r3, #8]
20006f14:	f003 0203 	and.w	r2, r3, #3
20006f18:	687b      	ldr	r3, [r7, #4]
20006f1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
20006f1c:	4b0f      	ldr	r3, [pc, #60]	; (20006f5c <HAL_RCC_GetClockConfig+0x5c>)
20006f1e:	689b      	ldr	r3, [r3, #8]
20006f20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
20006f24:	687b      	ldr	r3, [r7, #4]
20006f26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
20006f28:	4b0c      	ldr	r3, [pc, #48]	; (20006f5c <HAL_RCC_GetClockConfig+0x5c>)
20006f2a:	689b      	ldr	r3, [r3, #8]
20006f2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
20006f30:	687b      	ldr	r3, [r7, #4]
20006f32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
20006f34:	4b09      	ldr	r3, [pc, #36]	; (20006f5c <HAL_RCC_GetClockConfig+0x5c>)
20006f36:	689b      	ldr	r3, [r3, #8]
20006f38:	08db      	lsrs	r3, r3, #3
20006f3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
20006f3e:	687b      	ldr	r3, [r7, #4]
20006f40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
20006f42:	4b07      	ldr	r3, [pc, #28]	; (20006f60 <HAL_RCC_GetClockConfig+0x60>)
20006f44:	681b      	ldr	r3, [r3, #0]
20006f46:	f003 0207 	and.w	r2, r3, #7
20006f4a:	683b      	ldr	r3, [r7, #0]
20006f4c:	601a      	str	r2, [r3, #0]
}
20006f4e:	bf00      	nop
20006f50:	370c      	adds	r7, #12
20006f52:	46bd      	mov	sp, r7
20006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
20006f58:	4770      	bx	lr
20006f5a:	bf00      	nop
20006f5c:	40023800 	.word	0x40023800
20006f60:	40023c00 	.word	0x40023c00

20006f64 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
20006f64:	b580      	push	{r7, lr}
20006f66:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
20006f68:	4b06      	ldr	r3, [pc, #24]	; (20006f84 <HAL_RCC_NMI_IRQHandler+0x20>)
20006f6a:	68db      	ldr	r3, [r3, #12]
20006f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
20006f70:	2b80      	cmp	r3, #128	; 0x80
20006f72:	d104      	bne.n	20006f7e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
20006f74:	f000 f80a 	bl	20006f8c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
20006f78:	4b03      	ldr	r3, [pc, #12]	; (20006f88 <HAL_RCC_NMI_IRQHandler+0x24>)
20006f7a:	2280      	movs	r2, #128	; 0x80
20006f7c:	701a      	strb	r2, [r3, #0]
  }
}
20006f7e:	bf00      	nop
20006f80:	bd80      	pop	{r7, pc}
20006f82:	bf00      	nop
20006f84:	40023800 	.word	0x40023800
20006f88:	4002380e 	.word	0x4002380e

20006f8c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
20006f8c:	b480      	push	{r7}
20006f8e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
20006f90:	bf00      	nop
20006f92:	46bd      	mov	sp, r7
20006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
20006f98:	4770      	bx	lr
	...

20006f9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20006f9c:	b580      	push	{r7, lr}
20006f9e:	b086      	sub	sp, #24
20006fa0:	af00      	add	r7, sp, #0
20006fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20006fa4:	2300      	movs	r3, #0
20006fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
20006fa8:	2300      	movs	r3, #0
20006faa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
20006fac:	687b      	ldr	r3, [r7, #4]
20006fae:	681b      	ldr	r3, [r3, #0]
20006fb0:	f003 0301 	and.w	r3, r3, #1
20006fb4:	2b00      	cmp	r3, #0
20006fb6:	d105      	bne.n	20006fc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20006fb8:	687b      	ldr	r3, [r7, #4]
20006fba:	681b      	ldr	r3, [r3, #0]
20006fbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
20006fc0:	2b00      	cmp	r3, #0
20006fc2:	d038      	beq.n	20007036 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
20006fc4:	4b68      	ldr	r3, [pc, #416]	; (20007168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
20006fc6:	2200      	movs	r2, #0
20006fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20006fca:	f7f9 fd2a 	bl	20000a22 <HAL_GetTick>
20006fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20006fd0:	e008      	b.n	20006fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20006fd2:	f7f9 fd26 	bl	20000a22 <HAL_GetTick>
20006fd6:	4602      	mov	r2, r0
20006fd8:	697b      	ldr	r3, [r7, #20]
20006fda:	1ad3      	subs	r3, r2, r3
20006fdc:	2b02      	cmp	r3, #2
20006fde:	d901      	bls.n	20006fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20006fe0:	2303      	movs	r3, #3
20006fe2:	e0bd      	b.n	20007160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
20006fe4:	4b61      	ldr	r3, [pc, #388]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20006fe6:	681b      	ldr	r3, [r3, #0]
20006fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20006fec:	2b00      	cmp	r3, #0
20006fee:	d1f0      	bne.n	20006fd2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
20006ff0:	687b      	ldr	r3, [r7, #4]
20006ff2:	685a      	ldr	r2, [r3, #4]
20006ff4:	687b      	ldr	r3, [r7, #4]
20006ff6:	689b      	ldr	r3, [r3, #8]
20006ff8:	019b      	lsls	r3, r3, #6
20006ffa:	431a      	orrs	r2, r3
20006ffc:	687b      	ldr	r3, [r7, #4]
20006ffe:	68db      	ldr	r3, [r3, #12]
20007000:	071b      	lsls	r3, r3, #28
20007002:	495a      	ldr	r1, [pc, #360]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007004:	4313      	orrs	r3, r2
20007006:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
2000700a:	4b57      	ldr	r3, [pc, #348]	; (20007168 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
2000700c:	2201      	movs	r2, #1
2000700e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
20007010:	f7f9 fd07 	bl	20000a22 <HAL_GetTick>
20007014:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20007016:	e008      	b.n	2000702a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20007018:	f7f9 fd03 	bl	20000a22 <HAL_GetTick>
2000701c:	4602      	mov	r2, r0
2000701e:	697b      	ldr	r3, [r7, #20]
20007020:	1ad3      	subs	r3, r2, r3
20007022:	2b02      	cmp	r3, #2
20007024:	d901      	bls.n	2000702a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
20007026:	2303      	movs	r3, #3
20007028:	e09a      	b.n	20007160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
2000702a:	4b50      	ldr	r3, [pc, #320]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000702c:	681b      	ldr	r3, [r3, #0]
2000702e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20007032:	2b00      	cmp	r3, #0
20007034:	d0f0      	beq.n	20007018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
20007036:	687b      	ldr	r3, [r7, #4]
20007038:	681b      	ldr	r3, [r3, #0]
2000703a:	f003 0302 	and.w	r3, r3, #2
2000703e:	2b00      	cmp	r3, #0
20007040:	f000 8083 	beq.w	2000714a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
20007044:	2300      	movs	r3, #0
20007046:	60fb      	str	r3, [r7, #12]
20007048:	4b48      	ldr	r3, [pc, #288]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000704c:	4a47      	ldr	r2, [pc, #284]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000704e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20007052:	6413      	str	r3, [r2, #64]	; 0x40
20007054:	4b45      	ldr	r3, [pc, #276]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20007058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000705c:	60fb      	str	r3, [r7, #12]
2000705e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
20007060:	4b43      	ldr	r3, [pc, #268]	; (20007170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20007062:	681b      	ldr	r3, [r3, #0]
20007064:	4a42      	ldr	r2, [pc, #264]	; (20007170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20007066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000706a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
2000706c:	f7f9 fcd9 	bl	20000a22 <HAL_GetTick>
20007070:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
20007072:	e008      	b.n	20007086 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
20007074:	f7f9 fcd5 	bl	20000a22 <HAL_GetTick>
20007078:	4602      	mov	r2, r0
2000707a:	697b      	ldr	r3, [r7, #20]
2000707c:	1ad3      	subs	r3, r2, r3
2000707e:	2b02      	cmp	r3, #2
20007080:	d901      	bls.n	20007086 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
20007082:	2303      	movs	r3, #3
20007084:	e06c      	b.n	20007160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
20007086:	4b3a      	ldr	r3, [pc, #232]	; (20007170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
20007088:	681b      	ldr	r3, [r3, #0]
2000708a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000708e:	2b00      	cmp	r3, #0
20007090:	d0f0      	beq.n	20007074 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
20007092:	4b36      	ldr	r3, [pc, #216]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20007096:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000709a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
2000709c:	693b      	ldr	r3, [r7, #16]
2000709e:	2b00      	cmp	r3, #0
200070a0:	d02f      	beq.n	20007102 <HAL_RCCEx_PeriphCLKConfig+0x166>
200070a2:	687b      	ldr	r3, [r7, #4]
200070a4:	691b      	ldr	r3, [r3, #16]
200070a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
200070aa:	693a      	ldr	r2, [r7, #16]
200070ac:	429a      	cmp	r2, r3
200070ae:	d028      	beq.n	20007102 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
200070b0:	4b2e      	ldr	r3, [pc, #184]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200070b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
200070b8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
200070ba:	4b2e      	ldr	r3, [pc, #184]	; (20007174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
200070bc:	2201      	movs	r2, #1
200070be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
200070c0:	4b2c      	ldr	r3, [pc, #176]	; (20007174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
200070c2:	2200      	movs	r2, #0
200070c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
200070c6:	4a29      	ldr	r2, [pc, #164]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070c8:	693b      	ldr	r3, [r7, #16]
200070ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
200070cc:	4b27      	ldr	r3, [pc, #156]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200070d0:	f003 0301 	and.w	r3, r3, #1
200070d4:	2b01      	cmp	r3, #1
200070d6:	d114      	bne.n	20007102 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
200070d8:	f7f9 fca3 	bl	20000a22 <HAL_GetTick>
200070dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200070de:	e00a      	b.n	200070f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
200070e0:	f7f9 fc9f 	bl	20000a22 <HAL_GetTick>
200070e4:	4602      	mov	r2, r0
200070e6:	697b      	ldr	r3, [r7, #20]
200070e8:	1ad3      	subs	r3, r2, r3
200070ea:	f241 3288 	movw	r2, #5000	; 0x1388
200070ee:	4293      	cmp	r3, r2
200070f0:	d901      	bls.n	200070f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
200070f2:	2303      	movs	r3, #3
200070f4:	e034      	b.n	20007160 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
200070f6:	4b1d      	ldr	r3, [pc, #116]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
200070f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200070fa:	f003 0302 	and.w	r3, r3, #2
200070fe:	2b00      	cmp	r3, #0
20007100:	d0ee      	beq.n	200070e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20007102:	687b      	ldr	r3, [r7, #4]
20007104:	691b      	ldr	r3, [r3, #16]
20007106:	f403 7340 	and.w	r3, r3, #768	; 0x300
2000710a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
2000710e:	d10d      	bne.n	2000712c <HAL_RCCEx_PeriphCLKConfig+0x190>
20007110:	4b16      	ldr	r3, [pc, #88]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007112:	689b      	ldr	r3, [r3, #8]
20007114:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
20007118:	687b      	ldr	r3, [r7, #4]
2000711a:	691b      	ldr	r3, [r3, #16]
2000711c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20007124:	4911      	ldr	r1, [pc, #68]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007126:	4313      	orrs	r3, r2
20007128:	608b      	str	r3, [r1, #8]
2000712a:	e005      	b.n	20007138 <HAL_RCCEx_PeriphCLKConfig+0x19c>
2000712c:	4b0f      	ldr	r3, [pc, #60]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000712e:	689b      	ldr	r3, [r3, #8]
20007130:	4a0e      	ldr	r2, [pc, #56]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007132:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
20007136:	6093      	str	r3, [r2, #8]
20007138:	4b0c      	ldr	r3, [pc, #48]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
2000713a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
2000713c:	687b      	ldr	r3, [r7, #4]
2000713e:	691b      	ldr	r3, [r3, #16]
20007140:	f3c3 030b 	ubfx	r3, r3, #0, #12
20007144:	4909      	ldr	r1, [pc, #36]	; (2000716c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
20007146:	4313      	orrs	r3, r2
20007148:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
2000714a:	687b      	ldr	r3, [r7, #4]
2000714c:	681b      	ldr	r3, [r3, #0]
2000714e:	f003 0308 	and.w	r3, r3, #8
20007152:	2b00      	cmp	r3, #0
20007154:	d003      	beq.n	2000715e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
20007156:	687b      	ldr	r3, [r7, #4]
20007158:	7d1a      	ldrb	r2, [r3, #20]
2000715a:	4b07      	ldr	r3, [pc, #28]	; (20007178 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
2000715c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
2000715e:	2300      	movs	r3, #0
}
20007160:	4618      	mov	r0, r3
20007162:	3718      	adds	r7, #24
20007164:	46bd      	mov	sp, r7
20007166:	bd80      	pop	{r7, pc}
20007168:	42470068 	.word	0x42470068
2000716c:	40023800 	.word	0x40023800
20007170:	40007000 	.word	0x40007000
20007174:	42470e40 	.word	0x42470e40
20007178:	424711e0 	.word	0x424711e0

2000717c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2000717c:	b480      	push	{r7}
2000717e:	b085      	sub	sp, #20
20007180:	af00      	add	r7, sp, #0
20007182:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
20007184:	687b      	ldr	r3, [r7, #4]
20007186:	2203      	movs	r2, #3
20007188:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
2000718a:	4b1c      	ldr	r3, [pc, #112]	; (200071fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
2000718c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007190:	099b      	lsrs	r3, r3, #6
20007192:	f3c3 0208 	ubfx	r2, r3, #0, #9
20007196:	687b      	ldr	r3, [r7, #4]
20007198:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
2000719a:	4b18      	ldr	r3, [pc, #96]	; (200071fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
2000719c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200071a0:	0f1b      	lsrs	r3, r3, #28
200071a2:	f003 0207 	and.w	r2, r3, #7
200071a6:	687b      	ldr	r3, [r7, #4]
200071a8:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
200071aa:	4b14      	ldr	r3, [pc, #80]	; (200071fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
200071ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
200071b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
200071b4:	687b      	ldr	r3, [r7, #4]
200071b6:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
200071b8:	4b10      	ldr	r3, [pc, #64]	; (200071fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
200071ba:	689b      	ldr	r3, [r3, #8]
200071bc:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
200071c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
200071c2:	4b0e      	ldr	r3, [pc, #56]	; (200071fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
200071c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200071c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
200071ca:	68fb      	ldr	r3, [r7, #12]
200071cc:	431a      	orrs	r2, r3
200071ce:	687b      	ldr	r3, [r7, #4]
200071d0:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
200071d2:	4b0a      	ldr	r3, [pc, #40]	; (200071fc <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
200071d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
200071d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
200071dc:	2b00      	cmp	r3, #0
200071de:	d103      	bne.n	200071e8 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
200071e0:	687b      	ldr	r3, [r7, #4]
200071e2:	2200      	movs	r2, #0
200071e4:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
200071e6:	e002      	b.n	200071ee <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
200071e8:	687b      	ldr	r3, [r7, #4]
200071ea:	2201      	movs	r2, #1
200071ec:	751a      	strb	r2, [r3, #20]
}
200071ee:	bf00      	nop
200071f0:	3714      	adds	r7, #20
200071f2:	46bd      	mov	sp, r7
200071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200071f8:	4770      	bx	lr
200071fa:	bf00      	nop
200071fc:	40023800 	.word	0x40023800

20007200 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
20007200:	b480      	push	{r7}
20007202:	b087      	sub	sp, #28
20007204:	af00      	add	r7, sp, #0
20007206:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
20007208:	2300      	movs	r3, #0
2000720a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
2000720c:	2300      	movs	r3, #0
2000720e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
20007210:	2300      	movs	r3, #0
20007212:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
20007214:	2300      	movs	r3, #0
20007216:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
20007218:	687b      	ldr	r3, [r7, #4]
2000721a:	2b01      	cmp	r3, #1
2000721c:	d141      	bne.n	200072a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
2000721e:	4b25      	ldr	r3, [pc, #148]	; (200072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
20007220:	689b      	ldr	r3, [r3, #8]
20007222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
20007226:	60fb      	str	r3, [r7, #12]
20007228:	68fb      	ldr	r3, [r7, #12]
2000722a:	2b00      	cmp	r3, #0
2000722c:	d006      	beq.n	2000723c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
2000722e:	68fb      	ldr	r3, [r7, #12]
20007230:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
20007234:	d131      	bne.n	2000729a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
20007236:	4b20      	ldr	r3, [pc, #128]	; (200072b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
20007238:	617b      	str	r3, [r7, #20]
          break;
2000723a:	e031      	b.n	200072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
2000723c:	4b1d      	ldr	r3, [pc, #116]	; (200072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
2000723e:	685b      	ldr	r3, [r3, #4]
20007240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20007244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20007248:	d109      	bne.n	2000725e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
2000724a:	4b1a      	ldr	r3, [pc, #104]	; (200072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
2000724c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007254:	4a19      	ldr	r2, [pc, #100]	; (200072bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
20007256:	fbb2 f3f3 	udiv	r3, r2, r3
2000725a:	613b      	str	r3, [r7, #16]
2000725c:	e008      	b.n	20007270 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
2000725e:	4b15      	ldr	r3, [pc, #84]	; (200072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
20007260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20007268:	4a15      	ldr	r2, [pc, #84]	; (200072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
2000726a:	fbb2 f3f3 	udiv	r3, r2, r3
2000726e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
20007270:	4b10      	ldr	r3, [pc, #64]	; (200072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
20007272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20007276:	099b      	lsrs	r3, r3, #6
20007278:	f3c3 0208 	ubfx	r2, r3, #0, #9
2000727c:	693b      	ldr	r3, [r7, #16]
2000727e:	fb02 f303 	mul.w	r3, r2, r3
20007282:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
20007284:	4b0b      	ldr	r3, [pc, #44]	; (200072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
20007286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2000728a:	0f1b      	lsrs	r3, r3, #28
2000728c:	f003 0307 	and.w	r3, r3, #7
20007290:	68ba      	ldr	r2, [r7, #8]
20007292:	fbb2 f3f3 	udiv	r3, r2, r3
20007296:	617b      	str	r3, [r7, #20]
          break;
20007298:	e002      	b.n	200072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
2000729a:	2300      	movs	r3, #0
2000729c:	617b      	str	r3, [r7, #20]
          break;
2000729e:	bf00      	nop
        }
      }
      break;
200072a0:	e000      	b.n	200072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
200072a2:	bf00      	nop
    }
  }
  return frequency;
200072a4:	697b      	ldr	r3, [r7, #20]
}
200072a6:	4618      	mov	r0, r3
200072a8:	371c      	adds	r7, #28
200072aa:	46bd      	mov	sp, r7
200072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200072b0:	4770      	bx	lr
200072b2:	bf00      	nop
200072b4:	40023800 	.word	0x40023800
200072b8:	00bb8000 	.word	0x00bb8000
200072bc:	017d7840 	.word	0x017d7840
200072c0:	00f42400 	.word	0x00f42400

200072c4 <HAL_RCCEx_SelectLSEMode>:
  *            @arg RCC_LSE_LOWPOWER_MODE:  LSE oscillator in low power mode selection
  *            @arg RCC_LSE_HIGHDRIVE_MODE: LSE oscillator in High Drive mode selection
  * @retval None
  */
void HAL_RCCEx_SelectLSEMode(uint8_t Mode)
{
200072c4:	b480      	push	{r7}
200072c6:	b083      	sub	sp, #12
200072c8:	af00      	add	r7, sp, #0
200072ca:	4603      	mov	r3, r0
200072cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE_MODE(Mode));
  if(Mode == RCC_LSE_HIGHDRIVE_MODE)
200072ce:	79fb      	ldrb	r3, [r7, #7]
200072d0:	2b01      	cmp	r3, #1
200072d2:	d106      	bne.n	200072e2 <HAL_RCCEx_SelectLSEMode+0x1e>
  {
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200072d4:	4b09      	ldr	r3, [pc, #36]	; (200072fc <HAL_RCCEx_SelectLSEMode+0x38>)
200072d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200072d8:	4a08      	ldr	r2, [pc, #32]	; (200072fc <HAL_RCCEx_SelectLSEMode+0x38>)
200072da:	f043 0308 	orr.w	r3, r3, #8
200072de:	6713      	str	r3, [r2, #112]	; 0x70
  }
  else
  {
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
  }
}
200072e0:	e005      	b.n	200072ee <HAL_RCCEx_SelectLSEMode+0x2a>
    CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEMOD);
200072e2:	4b06      	ldr	r3, [pc, #24]	; (200072fc <HAL_RCCEx_SelectLSEMode+0x38>)
200072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200072e6:	4a05      	ldr	r2, [pc, #20]	; (200072fc <HAL_RCCEx_SelectLSEMode+0x38>)
200072e8:	f023 0308 	bic.w	r3, r3, #8
200072ec:	6713      	str	r3, [r2, #112]	; 0x70
}
200072ee:	bf00      	nop
200072f0:	370c      	adds	r7, #12
200072f2:	46bd      	mov	sp, r7
200072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
200072f8:	4770      	bx	lr
200072fa:	bf00      	nop
200072fc:	40023800 	.word	0x40023800

20007300 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
20007300:	b580      	push	{r7, lr}
20007302:	b084      	sub	sp, #16
20007304:	af00      	add	r7, sp, #0
20007306:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20007308:	4b1e      	ldr	r3, [pc, #120]	; (20007384 <HAL_RCCEx_EnablePLLI2S+0x84>)
2000730a:	2200      	movs	r2, #0
2000730c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
2000730e:	f7f9 fb88 	bl	20000a22 <HAL_GetTick>
20007312:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20007314:	e008      	b.n	20007328 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20007316:	f7f9 fb84 	bl	20000a22 <HAL_GetTick>
2000731a:	4602      	mov	r2, r0
2000731c:	68fb      	ldr	r3, [r7, #12]
2000731e:	1ad3      	subs	r3, r2, r3
20007320:	2b02      	cmp	r3, #2
20007322:	d901      	bls.n	20007328 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20007324:	2303      	movs	r3, #3
20007326:	e029      	b.n	2000737c <HAL_RCCEx_EnablePLLI2S+0x7c>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20007328:	4b17      	ldr	r3, [pc, #92]	; (20007388 <HAL_RCCEx_EnablePLLI2S+0x88>)
2000732a:	681b      	ldr	r3, [r3, #0]
2000732c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20007330:	2b00      	cmp	r3, #0
20007332:	d1f0      	bne.n	20007316 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
#elif defined(STM32F411xE)
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
20007334:	687b      	ldr	r3, [r7, #4]
20007336:	681a      	ldr	r2, [r3, #0]
20007338:	687b      	ldr	r3, [r7, #4]
2000733a:	685b      	ldr	r3, [r3, #4]
2000733c:	019b      	lsls	r3, r3, #6
2000733e:	431a      	orrs	r2, r3
20007340:	687b      	ldr	r3, [r7, #4]
20007342:	689b      	ldr	r3, [r3, #8]
20007344:	071b      	lsls	r3, r3, #28
20007346:	4910      	ldr	r1, [pc, #64]	; (20007388 <HAL_RCCEx_EnablePLLI2S+0x88>)
20007348:	4313      	orrs	r3, r2
2000734a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
2000734e:	4b0d      	ldr	r3, [pc, #52]	; (20007384 <HAL_RCCEx_EnablePLLI2S+0x84>)
20007350:	2201      	movs	r2, #1
20007352:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
20007354:	f7f9 fb65 	bl	20000a22 <HAL_GetTick>
20007358:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2000735a:	e008      	b.n	2000736e <HAL_RCCEx_EnablePLLI2S+0x6e>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
2000735c:	f7f9 fb61 	bl	20000a22 <HAL_GetTick>
20007360:	4602      	mov	r2, r0
20007362:	68fb      	ldr	r3, [r7, #12]
20007364:	1ad3      	subs	r3, r2, r3
20007366:	2b02      	cmp	r3, #2
20007368:	d901      	bls.n	2000736e <HAL_RCCEx_EnablePLLI2S+0x6e>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
2000736a:	2303      	movs	r3, #3
2000736c:	e006      	b.n	2000737c <HAL_RCCEx_EnablePLLI2S+0x7c>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
2000736e:	4b06      	ldr	r3, [pc, #24]	; (20007388 <HAL_RCCEx_EnablePLLI2S+0x88>)
20007370:	681b      	ldr	r3, [r3, #0]
20007372:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20007376:	2b00      	cmp	r3, #0
20007378:	d0f0      	beq.n	2000735c <HAL_RCCEx_EnablePLLI2S+0x5c>
    }
  }

 return HAL_OK;
2000737a:	2300      	movs	r3, #0
}
2000737c:	4618      	mov	r0, r3
2000737e:	3710      	adds	r7, #16
20007380:	46bd      	mov	sp, r7
20007382:	bd80      	pop	{r7, pc}
20007384:	42470068 	.word	0x42470068
20007388:	40023800 	.word	0x40023800

2000738c <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
2000738c:	b580      	push	{r7, lr}
2000738e:	b082      	sub	sp, #8
20007390:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20007392:	4b0d      	ldr	r3, [pc, #52]	; (200073c8 <HAL_RCCEx_DisablePLLI2S+0x3c>)
20007394:	2200      	movs	r2, #0
20007396:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20007398:	f7f9 fb43 	bl	20000a22 <HAL_GetTick>
2000739c:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
2000739e:	e008      	b.n	200073b2 <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
200073a0:	f7f9 fb3f 	bl	20000a22 <HAL_GetTick>
200073a4:	4602      	mov	r2, r0
200073a6:	687b      	ldr	r3, [r7, #4]
200073a8:	1ad3      	subs	r3, r2, r3
200073aa:	2b02      	cmp	r3, #2
200073ac:	d901      	bls.n	200073b2 <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
200073ae:	2303      	movs	r3, #3
200073b0:	e006      	b.n	200073c0 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
200073b2:	4b06      	ldr	r3, [pc, #24]	; (200073cc <HAL_RCCEx_DisablePLLI2S+0x40>)
200073b4:	681b      	ldr	r3, [r3, #0]
200073b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
200073ba:	2b00      	cmp	r3, #0
200073bc:	d1f0      	bne.n	200073a0 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
200073be:	2300      	movs	r3, #0
}
200073c0:	4618      	mov	r0, r3
200073c2:	3708      	adds	r7, #8
200073c4:	46bd      	mov	sp, r7
200073c6:	bd80      	pop	{r7, pc}
200073c8:	42470068 	.word	0x42470068
200073cc:	40023800 	.word	0x40023800

200073d0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
200073d0:	b580      	push	{r7, lr}
200073d2:	b082      	sub	sp, #8
200073d4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
200073d6:	f7f9 fb24 	bl	20000a22 <HAL_GetTick>
200073da:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
200073dc:	4b5d      	ldr	r3, [pc, #372]	; (20007554 <HAL_RCC_DeInit+0x184>)
200073de:	681b      	ldr	r3, [r3, #0]
200073e0:	4a5c      	ldr	r2, [pc, #368]	; (20007554 <HAL_RCC_DeInit+0x184>)
200073e2:	f043 0301 	orr.w	r3, r3, #1
200073e6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
200073e8:	e008      	b.n	200073fc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200073ea:	f7f9 fb1a 	bl	20000a22 <HAL_GetTick>
200073ee:	4602      	mov	r2, r0
200073f0:	687b      	ldr	r3, [r7, #4]
200073f2:	1ad3      	subs	r3, r2, r3
200073f4:	2b02      	cmp	r3, #2
200073f6:	d901      	bls.n	200073fc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
200073f8:	2303      	movs	r3, #3
200073fa:	e0a7      	b.n	2000754c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
200073fc:	4b55      	ldr	r3, [pc, #340]	; (20007554 <HAL_RCC_DeInit+0x184>)
200073fe:	681b      	ldr	r3, [r3, #0]
20007400:	f003 0302 	and.w	r3, r3, #2
20007404:	2b00      	cmp	r3, #0
20007406:	d0f0      	beq.n	200073ea <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
20007408:	4b52      	ldr	r3, [pc, #328]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000740a:	681b      	ldr	r3, [r3, #0]
2000740c:	4a51      	ldr	r2, [pc, #324]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20007412:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20007414:	f7f9 fb05 	bl	20000a22 <HAL_GetTick>
20007418:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
2000741a:	4b4e      	ldr	r3, [pc, #312]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000741c:	2200      	movs	r2, #0
2000741e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20007420:	e00a      	b.n	20007438 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20007422:	f7f9 fafe 	bl	20000a22 <HAL_GetTick>
20007426:	4602      	mov	r2, r0
20007428:	687b      	ldr	r3, [r7, #4]
2000742a:	1ad3      	subs	r3, r2, r3
2000742c:	f241 3288 	movw	r2, #5000	; 0x1388
20007430:	4293      	cmp	r3, r2
20007432:	d901      	bls.n	20007438 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
20007434:	2303      	movs	r3, #3
20007436:	e089      	b.n	2000754c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20007438:	4b46      	ldr	r3, [pc, #280]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000743a:	689b      	ldr	r3, [r3, #8]
2000743c:	f003 030c 	and.w	r3, r3, #12
20007440:	2b00      	cmp	r3, #0
20007442:	d1ee      	bne.n	20007422 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20007444:	f7f9 faed 	bl	20000a22 <HAL_GetTick>
20007448:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
2000744a:	4b42      	ldr	r3, [pc, #264]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000744c:	681b      	ldr	r3, [r3, #0]
2000744e:	4a41      	ldr	r2, [pc, #260]	; (20007554 <HAL_RCC_DeInit+0x184>)
20007450:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
20007454:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
20007456:	e008      	b.n	2000746a <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20007458:	f7f9 fae3 	bl	20000a22 <HAL_GetTick>
2000745c:	4602      	mov	r2, r0
2000745e:	687b      	ldr	r3, [r7, #4]
20007460:	1ad3      	subs	r3, r2, r3
20007462:	2b64      	cmp	r3, #100	; 0x64
20007464:	d901      	bls.n	2000746a <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
20007466:	2303      	movs	r3, #3
20007468:	e070      	b.n	2000754c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
2000746a:	4b3a      	ldr	r3, [pc, #232]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000746c:	681b      	ldr	r3, [r3, #0]
2000746e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20007472:	2b00      	cmp	r3, #0
20007474:	d1f0      	bne.n	20007458 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20007476:	f7f9 fad4 	bl	20000a22 <HAL_GetTick>
2000747a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
2000747c:	4b35      	ldr	r3, [pc, #212]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000747e:	681b      	ldr	r3, [r3, #0]
20007480:	4a34      	ldr	r2, [pc, #208]	; (20007554 <HAL_RCC_DeInit+0x184>)
20007482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20007486:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20007488:	e008      	b.n	2000749c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2000748a:	f7f9 faca 	bl	20000a22 <HAL_GetTick>
2000748e:	4602      	mov	r2, r0
20007490:	687b      	ldr	r3, [r7, #4]
20007492:	1ad3      	subs	r3, r2, r3
20007494:	2b02      	cmp	r3, #2
20007496:	d901      	bls.n	2000749c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
20007498:	2303      	movs	r3, #3
2000749a:	e057      	b.n	2000754c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
2000749c:	4b2d      	ldr	r3, [pc, #180]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000749e:	681b      	ldr	r3, [r3, #0]
200074a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200074a4:	2b00      	cmp	r3, #0
200074a6:	d1f0      	bne.n	2000748a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
200074a8:	f7f9 fabb 	bl	20000a22 <HAL_GetTick>
200074ac:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
200074ae:	4b29      	ldr	r3, [pc, #164]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074b0:	681b      	ldr	r3, [r3, #0]
200074b2:	4a28      	ldr	r2, [pc, #160]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
200074b8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
200074ba:	e008      	b.n	200074ce <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
200074bc:	f7f9 fab1 	bl	20000a22 <HAL_GetTick>
200074c0:	4602      	mov	r2, r0
200074c2:	687b      	ldr	r3, [r7, #4]
200074c4:	1ad3      	subs	r3, r2, r3
200074c6:	2b02      	cmp	r3, #2
200074c8:	d901      	bls.n	200074ce <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
200074ca:	2303      	movs	r3, #3
200074cc:	e03e      	b.n	2000754c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
200074ce:	4b21      	ldr	r3, [pc, #132]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074d0:	681b      	ldr	r3, [r3, #0]
200074d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
200074d6:	2b00      	cmp	r3, #0
200074d8:	d1f0      	bne.n	200074bc <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
200074da:	4b1e      	ldr	r3, [pc, #120]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074dc:	4a1e      	ldr	r2, [pc, #120]	; (20007558 <HAL_RCC_DeInit+0x188>)
200074de:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
200074e0:	4b1c      	ldr	r3, [pc, #112]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074e2:	4a1e      	ldr	r2, [pc, #120]	; (2000755c <HAL_RCC_DeInit+0x18c>)
200074e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
200074e8:	4b1a      	ldr	r3, [pc, #104]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074ea:	68db      	ldr	r3, [r3, #12]
200074ec:	4a19      	ldr	r2, [pc, #100]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
200074f2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
200074f4:	4b17      	ldr	r3, [pc, #92]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074f6:	68db      	ldr	r3, [r3, #12]
200074f8:	4a16      	ldr	r2, [pc, #88]	; (20007554 <HAL_RCC_DeInit+0x184>)
200074fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
200074fe:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
20007500:	4b14      	ldr	r3, [pc, #80]	; (20007554 <HAL_RCC_DeInit+0x184>)
20007502:	68db      	ldr	r3, [r3, #12]
20007504:	4a13      	ldr	r2, [pc, #76]	; (20007554 <HAL_RCC_DeInit+0x184>)
20007506:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
2000750a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
2000750c:	4b11      	ldr	r3, [pc, #68]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000750e:	68db      	ldr	r3, [r3, #12]
20007510:	4a10      	ldr	r2, [pc, #64]	; (20007554 <HAL_RCC_DeInit+0x184>)
20007512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
20007516:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
20007518:	4b0e      	ldr	r3, [pc, #56]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000751a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000751c:	4a0d      	ldr	r2, [pc, #52]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000751e:	f023 0301 	bic.w	r3, r3, #1
20007522:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
20007524:	4b0b      	ldr	r3, [pc, #44]	; (20007554 <HAL_RCC_DeInit+0x184>)
20007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20007528:	4a0a      	ldr	r2, [pc, #40]	; (20007554 <HAL_RCC_DeInit+0x184>)
2000752a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000752e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
20007530:	4b0b      	ldr	r3, [pc, #44]	; (20007560 <HAL_RCC_DeInit+0x190>)
20007532:	4a0c      	ldr	r2, [pc, #48]	; (20007564 <HAL_RCC_DeInit+0x194>)
20007534:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
20007536:	4b0c      	ldr	r3, [pc, #48]	; (20007568 <HAL_RCC_DeInit+0x198>)
20007538:	681b      	ldr	r3, [r3, #0]
2000753a:	4618      	mov	r0, r3
2000753c:	f7f9 fa84 	bl	20000a48 <HAL_InitTick>
20007540:	4603      	mov	r3, r0
20007542:	2b00      	cmp	r3, #0
20007544:	d001      	beq.n	2000754a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
20007546:	2301      	movs	r3, #1
20007548:	e000      	b.n	2000754c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
2000754a:	2300      	movs	r3, #0
  }
}
2000754c:	4618      	mov	r0, r3
2000754e:	3708      	adds	r7, #8
20007550:	46bd      	mov	sp, r7
20007552:	bd80      	pop	{r7, pc}
20007554:	40023800 	.word	0x40023800
20007558:	04003010 	.word	0x04003010
2000755c:	20003010 	.word	0x20003010
20007560:	200003b0 	.word	0x200003b0
20007564:	00f42400 	.word	0x00f42400
20007568:	200003b4 	.word	0x200003b4

2000756c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
2000756c:	b580      	push	{r7, lr}
2000756e:	b082      	sub	sp, #8
20007570:	af00      	add	r7, sp, #0
20007572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20007574:	687b      	ldr	r3, [r7, #4]
20007576:	2b00      	cmp	r3, #0
20007578:	d101      	bne.n	2000757e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
2000757a:	2301      	movs	r3, #1
2000757c:	e07b      	b.n	20007676 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
2000757e:	687b      	ldr	r3, [r7, #4]
20007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20007582:	2b00      	cmp	r3, #0
20007584:	d108      	bne.n	20007598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20007586:	687b      	ldr	r3, [r7, #4]
20007588:	685b      	ldr	r3, [r3, #4]
2000758a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000758e:	d009      	beq.n	200075a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20007590:	687b      	ldr	r3, [r7, #4]
20007592:	2200      	movs	r2, #0
20007594:	61da      	str	r2, [r3, #28]
20007596:	e005      	b.n	200075a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20007598:	687b      	ldr	r3, [r7, #4]
2000759a:	2200      	movs	r2, #0
2000759c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
2000759e:	687b      	ldr	r3, [r7, #4]
200075a0:	2200      	movs	r2, #0
200075a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
200075a4:	687b      	ldr	r3, [r7, #4]
200075a6:	2200      	movs	r2, #0
200075a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
200075aa:	687b      	ldr	r3, [r7, #4]
200075ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200075b0:	b2db      	uxtb	r3, r3
200075b2:	2b00      	cmp	r3, #0
200075b4:	d106      	bne.n	200075c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
200075b6:	687b      	ldr	r3, [r7, #4]
200075b8:	2200      	movs	r2, #0
200075ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
200075be:	6878      	ldr	r0, [r7, #4]
200075c0:	f7f9 fd3e 	bl	20001040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
200075c4:	687b      	ldr	r3, [r7, #4]
200075c6:	2202      	movs	r2, #2
200075c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
200075cc:	687b      	ldr	r3, [r7, #4]
200075ce:	681b      	ldr	r3, [r3, #0]
200075d0:	681a      	ldr	r2, [r3, #0]
200075d2:	687b      	ldr	r3, [r7, #4]
200075d4:	681b      	ldr	r3, [r3, #0]
200075d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200075da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
200075dc:	687b      	ldr	r3, [r7, #4]
200075de:	685b      	ldr	r3, [r3, #4]
200075e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
200075e4:	687b      	ldr	r3, [r7, #4]
200075e6:	689b      	ldr	r3, [r3, #8]
200075e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
200075ec:	431a      	orrs	r2, r3
200075ee:	687b      	ldr	r3, [r7, #4]
200075f0:	68db      	ldr	r3, [r3, #12]
200075f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
200075f6:	431a      	orrs	r2, r3
200075f8:	687b      	ldr	r3, [r7, #4]
200075fa:	691b      	ldr	r3, [r3, #16]
200075fc:	f003 0302 	and.w	r3, r3, #2
20007600:	431a      	orrs	r2, r3
20007602:	687b      	ldr	r3, [r7, #4]
20007604:	695b      	ldr	r3, [r3, #20]
20007606:	f003 0301 	and.w	r3, r3, #1
2000760a:	431a      	orrs	r2, r3
2000760c:	687b      	ldr	r3, [r7, #4]
2000760e:	699b      	ldr	r3, [r3, #24]
20007610:	f403 7300 	and.w	r3, r3, #512	; 0x200
20007614:	431a      	orrs	r2, r3
20007616:	687b      	ldr	r3, [r7, #4]
20007618:	69db      	ldr	r3, [r3, #28]
2000761a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2000761e:	431a      	orrs	r2, r3
20007620:	687b      	ldr	r3, [r7, #4]
20007622:	6a1b      	ldr	r3, [r3, #32]
20007624:	f003 0380 	and.w	r3, r3, #128	; 0x80
20007628:	ea42 0103 	orr.w	r1, r2, r3
2000762c:	687b      	ldr	r3, [r7, #4]
2000762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20007630:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
20007634:	687b      	ldr	r3, [r7, #4]
20007636:	681b      	ldr	r3, [r3, #0]
20007638:	430a      	orrs	r2, r1
2000763a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
2000763c:	687b      	ldr	r3, [r7, #4]
2000763e:	699b      	ldr	r3, [r3, #24]
20007640:	0c1b      	lsrs	r3, r3, #16
20007642:	f003 0104 	and.w	r1, r3, #4
20007646:	687b      	ldr	r3, [r7, #4]
20007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000764a:	f003 0210 	and.w	r2, r3, #16
2000764e:	687b      	ldr	r3, [r7, #4]
20007650:	681b      	ldr	r3, [r3, #0]
20007652:	430a      	orrs	r2, r1
20007654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20007656:	687b      	ldr	r3, [r7, #4]
20007658:	681b      	ldr	r3, [r3, #0]
2000765a:	69da      	ldr	r2, [r3, #28]
2000765c:	687b      	ldr	r3, [r7, #4]
2000765e:	681b      	ldr	r3, [r3, #0]
20007660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20007664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20007666:	687b      	ldr	r3, [r7, #4]
20007668:	2200      	movs	r2, #0
2000766a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
2000766c:	687b      	ldr	r3, [r7, #4]
2000766e:	2201      	movs	r2, #1
20007670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
20007674:	2300      	movs	r3, #0
}
20007676:	4618      	mov	r0, r3
20007678:	3708      	adds	r7, #8
2000767a:	46bd      	mov	sp, r7
2000767c:	bd80      	pop	{r7, pc}

2000767e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
2000767e:	b580      	push	{r7, lr}
20007680:	b082      	sub	sp, #8
20007682:	af00      	add	r7, sp, #0
20007684:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20007686:	687b      	ldr	r3, [r7, #4]
20007688:	2b00      	cmp	r3, #0
2000768a:	d101      	bne.n	20007690 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
2000768c:	2301      	movs	r3, #1
2000768e:	e01a      	b.n	200076c6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
20007690:	687b      	ldr	r3, [r7, #4]
20007692:	2202      	movs	r2, #2
20007694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
20007698:	687b      	ldr	r3, [r7, #4]
2000769a:	681b      	ldr	r3, [r3, #0]
2000769c:	681a      	ldr	r2, [r3, #0]
2000769e:	687b      	ldr	r3, [r7, #4]
200076a0:	681b      	ldr	r3, [r3, #0]
200076a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200076a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
200076a8:	6878      	ldr	r0, [r7, #4]
200076aa:	f7f9 fd11 	bl	200010d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
200076ae:	687b      	ldr	r3, [r7, #4]
200076b0:	2200      	movs	r2, #0
200076b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
200076b4:	687b      	ldr	r3, [r7, #4]
200076b6:	2200      	movs	r2, #0
200076b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
200076bc:	687b      	ldr	r3, [r7, #4]
200076be:	2200      	movs	r2, #0
200076c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
200076c4:	2300      	movs	r3, #0
}
200076c6:	4618      	mov	r0, r3
200076c8:	3708      	adds	r7, #8
200076ca:	46bd      	mov	sp, r7
200076cc:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
200076ce:	b480      	push	{r7}
200076d0:	b083      	sub	sp, #12
200076d2:	af00      	add	r7, sp, #0
200076d4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
200076d6:	bf00      	nop
200076d8:	370c      	adds	r7, #12
200076da:	46bd      	mov	sp, r7
200076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200076e0:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
200076e2:	b480      	push	{r7}
200076e4:	b083      	sub	sp, #12
200076e6:	af00      	add	r7, sp, #0
200076e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
200076ea:	bf00      	nop
200076ec:	370c      	adds	r7, #12
200076ee:	46bd      	mov	sp, r7
200076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
200076f4:	4770      	bx	lr

200076f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
200076f6:	b580      	push	{r7, lr}
200076f8:	b088      	sub	sp, #32
200076fa:	af00      	add	r7, sp, #0
200076fc:	60f8      	str	r0, [r7, #12]
200076fe:	60b9      	str	r1, [r7, #8]
20007700:	603b      	str	r3, [r7, #0]
20007702:	4613      	mov	r3, r2
20007704:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20007706:	2300      	movs	r3, #0
20007708:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
2000770a:	68fb      	ldr	r3, [r7, #12]
2000770c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007710:	2b01      	cmp	r3, #1
20007712:	d101      	bne.n	20007718 <HAL_SPI_Transmit+0x22>
20007714:	2302      	movs	r3, #2
20007716:	e12d      	b.n	20007974 <HAL_SPI_Transmit+0x27e>
20007718:	68fb      	ldr	r3, [r7, #12]
2000771a:	2201      	movs	r2, #1
2000771c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20007720:	f7f9 f97f 	bl	20000a22 <HAL_GetTick>
20007724:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20007726:	88fb      	ldrh	r3, [r7, #6]
20007728:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
2000772a:	68fb      	ldr	r3, [r7, #12]
2000772c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007730:	b2db      	uxtb	r3, r3
20007732:	2b01      	cmp	r3, #1
20007734:	d002      	beq.n	2000773c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20007736:	2302      	movs	r3, #2
20007738:	77fb      	strb	r3, [r7, #31]
    goto error;
2000773a:	e116      	b.n	2000796a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
2000773c:	68bb      	ldr	r3, [r7, #8]
2000773e:	2b00      	cmp	r3, #0
20007740:	d002      	beq.n	20007748 <HAL_SPI_Transmit+0x52>
20007742:	88fb      	ldrh	r3, [r7, #6]
20007744:	2b00      	cmp	r3, #0
20007746:	d102      	bne.n	2000774e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20007748:	2301      	movs	r3, #1
2000774a:	77fb      	strb	r3, [r7, #31]
    goto error;
2000774c:	e10d      	b.n	2000796a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
2000774e:	68fb      	ldr	r3, [r7, #12]
20007750:	2203      	movs	r2, #3
20007752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007756:	68fb      	ldr	r3, [r7, #12]
20007758:	2200      	movs	r2, #0
2000775a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
2000775c:	68fb      	ldr	r3, [r7, #12]
2000775e:	68ba      	ldr	r2, [r7, #8]
20007760:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20007762:	68fb      	ldr	r3, [r7, #12]
20007764:	88fa      	ldrh	r2, [r7, #6]
20007766:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20007768:	68fb      	ldr	r3, [r7, #12]
2000776a:	88fa      	ldrh	r2, [r7, #6]
2000776c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
2000776e:	68fb      	ldr	r3, [r7, #12]
20007770:	2200      	movs	r2, #0
20007772:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20007774:	68fb      	ldr	r3, [r7, #12]
20007776:	2200      	movs	r2, #0
20007778:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
2000777a:	68fb      	ldr	r3, [r7, #12]
2000777c:	2200      	movs	r2, #0
2000777e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
20007780:	68fb      	ldr	r3, [r7, #12]
20007782:	2200      	movs	r2, #0
20007784:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20007786:	68fb      	ldr	r3, [r7, #12]
20007788:	2200      	movs	r2, #0
2000778a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000778c:	68fb      	ldr	r3, [r7, #12]
2000778e:	689b      	ldr	r3, [r3, #8]
20007790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007794:	d10f      	bne.n	200077b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007796:	68fb      	ldr	r3, [r7, #12]
20007798:	681b      	ldr	r3, [r3, #0]
2000779a:	681a      	ldr	r2, [r3, #0]
2000779c:	68fb      	ldr	r3, [r7, #12]
2000779e:	681b      	ldr	r3, [r3, #0]
200077a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200077a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
200077a6:	68fb      	ldr	r3, [r7, #12]
200077a8:	681b      	ldr	r3, [r3, #0]
200077aa:	681a      	ldr	r2, [r3, #0]
200077ac:	68fb      	ldr	r3, [r7, #12]
200077ae:	681b      	ldr	r3, [r3, #0]
200077b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200077b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200077b6:	68fb      	ldr	r3, [r7, #12]
200077b8:	681b      	ldr	r3, [r3, #0]
200077ba:	681b      	ldr	r3, [r3, #0]
200077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
200077c0:	2b40      	cmp	r3, #64	; 0x40
200077c2:	d007      	beq.n	200077d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200077c4:	68fb      	ldr	r3, [r7, #12]
200077c6:	681b      	ldr	r3, [r3, #0]
200077c8:	681a      	ldr	r2, [r3, #0]
200077ca:	68fb      	ldr	r3, [r7, #12]
200077cc:	681b      	ldr	r3, [r3, #0]
200077ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200077d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
200077d4:	68fb      	ldr	r3, [r7, #12]
200077d6:	68db      	ldr	r3, [r3, #12]
200077d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
200077dc:	d14f      	bne.n	2000787e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200077de:	68fb      	ldr	r3, [r7, #12]
200077e0:	685b      	ldr	r3, [r3, #4]
200077e2:	2b00      	cmp	r3, #0
200077e4:	d002      	beq.n	200077ec <HAL_SPI_Transmit+0xf6>
200077e6:	8afb      	ldrh	r3, [r7, #22]
200077e8:	2b01      	cmp	r3, #1
200077ea:	d142      	bne.n	20007872 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200077ec:	68fb      	ldr	r3, [r7, #12]
200077ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200077f0:	881a      	ldrh	r2, [r3, #0]
200077f2:	68fb      	ldr	r3, [r7, #12]
200077f4:	681b      	ldr	r3, [r3, #0]
200077f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
200077f8:	68fb      	ldr	r3, [r7, #12]
200077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200077fc:	1c9a      	adds	r2, r3, #2
200077fe:	68fb      	ldr	r3, [r7, #12]
20007800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20007802:	68fb      	ldr	r3, [r7, #12]
20007804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007806:	b29b      	uxth	r3, r3
20007808:	3b01      	subs	r3, #1
2000780a:	b29a      	uxth	r2, r3
2000780c:	68fb      	ldr	r3, [r7, #12]
2000780e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20007810:	e02f      	b.n	20007872 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20007812:	68fb      	ldr	r3, [r7, #12]
20007814:	681b      	ldr	r3, [r3, #0]
20007816:	689b      	ldr	r3, [r3, #8]
20007818:	f003 0302 	and.w	r3, r3, #2
2000781c:	2b02      	cmp	r3, #2
2000781e:	d112      	bne.n	20007846 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20007820:	68fb      	ldr	r3, [r7, #12]
20007822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007824:	881a      	ldrh	r2, [r3, #0]
20007826:	68fb      	ldr	r3, [r7, #12]
20007828:	681b      	ldr	r3, [r3, #0]
2000782a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
2000782c:	68fb      	ldr	r3, [r7, #12]
2000782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007830:	1c9a      	adds	r2, r3, #2
20007832:	68fb      	ldr	r3, [r7, #12]
20007834:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20007836:	68fb      	ldr	r3, [r7, #12]
20007838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000783a:	b29b      	uxth	r3, r3
2000783c:	3b01      	subs	r3, #1
2000783e:	b29a      	uxth	r2, r3
20007840:	68fb      	ldr	r3, [r7, #12]
20007842:	86da      	strh	r2, [r3, #54]	; 0x36
20007844:	e015      	b.n	20007872 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007846:	f7f9 f8ec 	bl	20000a22 <HAL_GetTick>
2000784a:	4602      	mov	r2, r0
2000784c:	69bb      	ldr	r3, [r7, #24]
2000784e:	1ad3      	subs	r3, r2, r3
20007850:	683a      	ldr	r2, [r7, #0]
20007852:	429a      	cmp	r2, r3
20007854:	d803      	bhi.n	2000785e <HAL_SPI_Transmit+0x168>
20007856:	683b      	ldr	r3, [r7, #0]
20007858:	f1b3 3fff 	cmp.w	r3, #4294967295
2000785c:	d102      	bne.n	20007864 <HAL_SPI_Transmit+0x16e>
2000785e:	683b      	ldr	r3, [r7, #0]
20007860:	2b00      	cmp	r3, #0
20007862:	d106      	bne.n	20007872 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
20007864:	2303      	movs	r3, #3
20007866:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
20007868:	68fb      	ldr	r3, [r7, #12]
2000786a:	2201      	movs	r2, #1
2000786c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
20007870:	e07b      	b.n	2000796a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
20007872:	68fb      	ldr	r3, [r7, #12]
20007874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007876:	b29b      	uxth	r3, r3
20007878:	2b00      	cmp	r3, #0
2000787a:	d1ca      	bne.n	20007812 <HAL_SPI_Transmit+0x11c>
2000787c:	e050      	b.n	20007920 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
2000787e:	68fb      	ldr	r3, [r7, #12]
20007880:	685b      	ldr	r3, [r3, #4]
20007882:	2b00      	cmp	r3, #0
20007884:	d002      	beq.n	2000788c <HAL_SPI_Transmit+0x196>
20007886:	8afb      	ldrh	r3, [r7, #22]
20007888:	2b01      	cmp	r3, #1
2000788a:	d144      	bne.n	20007916 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
2000788c:	68fb      	ldr	r3, [r7, #12]
2000788e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20007890:	68fb      	ldr	r3, [r7, #12]
20007892:	681b      	ldr	r3, [r3, #0]
20007894:	330c      	adds	r3, #12
20007896:	7812      	ldrb	r2, [r2, #0]
20007898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
2000789a:	68fb      	ldr	r3, [r7, #12]
2000789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000789e:	1c5a      	adds	r2, r3, #1
200078a0:	68fb      	ldr	r3, [r7, #12]
200078a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200078a4:	68fb      	ldr	r3, [r7, #12]
200078a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200078a8:	b29b      	uxth	r3, r3
200078aa:	3b01      	subs	r3, #1
200078ac:	b29a      	uxth	r2, r3
200078ae:	68fb      	ldr	r3, [r7, #12]
200078b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
200078b2:	e030      	b.n	20007916 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
200078b4:	68fb      	ldr	r3, [r7, #12]
200078b6:	681b      	ldr	r3, [r3, #0]
200078b8:	689b      	ldr	r3, [r3, #8]
200078ba:	f003 0302 	and.w	r3, r3, #2
200078be:	2b02      	cmp	r3, #2
200078c0:	d113      	bne.n	200078ea <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200078c2:	68fb      	ldr	r3, [r7, #12]
200078c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200078c6:	68fb      	ldr	r3, [r7, #12]
200078c8:	681b      	ldr	r3, [r3, #0]
200078ca:	330c      	adds	r3, #12
200078cc:	7812      	ldrb	r2, [r2, #0]
200078ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
200078d0:	68fb      	ldr	r3, [r7, #12]
200078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200078d4:	1c5a      	adds	r2, r3, #1
200078d6:	68fb      	ldr	r3, [r7, #12]
200078d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
200078da:	68fb      	ldr	r3, [r7, #12]
200078dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200078de:	b29b      	uxth	r3, r3
200078e0:	3b01      	subs	r3, #1
200078e2:	b29a      	uxth	r2, r3
200078e4:	68fb      	ldr	r3, [r7, #12]
200078e6:	86da      	strh	r2, [r3, #54]	; 0x36
200078e8:	e015      	b.n	20007916 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
200078ea:	f7f9 f89a 	bl	20000a22 <HAL_GetTick>
200078ee:	4602      	mov	r2, r0
200078f0:	69bb      	ldr	r3, [r7, #24]
200078f2:	1ad3      	subs	r3, r2, r3
200078f4:	683a      	ldr	r2, [r7, #0]
200078f6:	429a      	cmp	r2, r3
200078f8:	d803      	bhi.n	20007902 <HAL_SPI_Transmit+0x20c>
200078fa:	683b      	ldr	r3, [r7, #0]
200078fc:	f1b3 3fff 	cmp.w	r3, #4294967295
20007900:	d102      	bne.n	20007908 <HAL_SPI_Transmit+0x212>
20007902:	683b      	ldr	r3, [r7, #0]
20007904:	2b00      	cmp	r3, #0
20007906:	d106      	bne.n	20007916 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
20007908:	2303      	movs	r3, #3
2000790a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
2000790c:	68fb      	ldr	r3, [r7, #12]
2000790e:	2201      	movs	r2, #1
20007910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
20007914:	e029      	b.n	2000796a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
20007916:	68fb      	ldr	r3, [r7, #12]
20007918:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000791a:	b29b      	uxth	r3, r3
2000791c:	2b00      	cmp	r3, #0
2000791e:	d1c9      	bne.n	200078b4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20007920:	69ba      	ldr	r2, [r7, #24]
20007922:	6839      	ldr	r1, [r7, #0]
20007924:	68f8      	ldr	r0, [r7, #12]
20007926:	f001 ff33 	bl	20009790 <SPI_EndRxTxTransaction>
2000792a:	4603      	mov	r3, r0
2000792c:	2b00      	cmp	r3, #0
2000792e:	d002      	beq.n	20007936 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20007930:	68fb      	ldr	r3, [r7, #12]
20007932:	2220      	movs	r2, #32
20007934:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20007936:	68fb      	ldr	r3, [r7, #12]
20007938:	689b      	ldr	r3, [r3, #8]
2000793a:	2b00      	cmp	r3, #0
2000793c:	d10a      	bne.n	20007954 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000793e:	2300      	movs	r3, #0
20007940:	613b      	str	r3, [r7, #16]
20007942:	68fb      	ldr	r3, [r7, #12]
20007944:	681b      	ldr	r3, [r3, #0]
20007946:	68db      	ldr	r3, [r3, #12]
20007948:	613b      	str	r3, [r7, #16]
2000794a:	68fb      	ldr	r3, [r7, #12]
2000794c:	681b      	ldr	r3, [r3, #0]
2000794e:	689b      	ldr	r3, [r3, #8]
20007950:	613b      	str	r3, [r7, #16]
20007952:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20007954:	68fb      	ldr	r3, [r7, #12]
20007956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007958:	2b00      	cmp	r3, #0
2000795a:	d002      	beq.n	20007962 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
2000795c:	2301      	movs	r3, #1
2000795e:	77fb      	strb	r3, [r7, #31]
20007960:	e003      	b.n	2000796a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
20007962:	68fb      	ldr	r3, [r7, #12]
20007964:	2201      	movs	r2, #1
20007966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
2000796a:	68fb      	ldr	r3, [r7, #12]
2000796c:	2200      	movs	r2, #0
2000796e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007972:	7ffb      	ldrb	r3, [r7, #31]
}
20007974:	4618      	mov	r0, r3
20007976:	3720      	adds	r7, #32
20007978:	46bd      	mov	sp, r7
2000797a:	bd80      	pop	{r7, pc}

2000797c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000797c:	b580      	push	{r7, lr}
2000797e:	b088      	sub	sp, #32
20007980:	af02      	add	r7, sp, #8
20007982:	60f8      	str	r0, [r7, #12]
20007984:	60b9      	str	r1, [r7, #8]
20007986:	603b      	str	r3, [r7, #0]
20007988:	4613      	mov	r3, r2
2000798a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
2000798c:	2300      	movs	r3, #0
2000798e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
20007990:	68fb      	ldr	r3, [r7, #12]
20007992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007996:	b2db      	uxtb	r3, r3
20007998:	2b01      	cmp	r3, #1
2000799a:	d002      	beq.n	200079a2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
2000799c:	2302      	movs	r3, #2
2000799e:	75fb      	strb	r3, [r7, #23]
    goto error;
200079a0:	e0fb      	b.n	20007b9a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
200079a2:	68fb      	ldr	r3, [r7, #12]
200079a4:	685b      	ldr	r3, [r3, #4]
200079a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200079aa:	d112      	bne.n	200079d2 <HAL_SPI_Receive+0x56>
200079ac:	68fb      	ldr	r3, [r7, #12]
200079ae:	689b      	ldr	r3, [r3, #8]
200079b0:	2b00      	cmp	r3, #0
200079b2:	d10e      	bne.n	200079d2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
200079b4:	68fb      	ldr	r3, [r7, #12]
200079b6:	2204      	movs	r2, #4
200079b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
200079bc:	88fa      	ldrh	r2, [r7, #6]
200079be:	683b      	ldr	r3, [r7, #0]
200079c0:	9300      	str	r3, [sp, #0]
200079c2:	4613      	mov	r3, r2
200079c4:	68ba      	ldr	r2, [r7, #8]
200079c6:	68b9      	ldr	r1, [r7, #8]
200079c8:	68f8      	ldr	r0, [r7, #12]
200079ca:	f000 f8ef 	bl	20007bac <HAL_SPI_TransmitReceive>
200079ce:	4603      	mov	r3, r0
200079d0:	e0e8      	b.n	20007ba4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
200079d2:	68fb      	ldr	r3, [r7, #12]
200079d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200079d8:	2b01      	cmp	r3, #1
200079da:	d101      	bne.n	200079e0 <HAL_SPI_Receive+0x64>
200079dc:	2302      	movs	r3, #2
200079de:	e0e1      	b.n	20007ba4 <HAL_SPI_Receive+0x228>
200079e0:	68fb      	ldr	r3, [r7, #12]
200079e2:	2201      	movs	r2, #1
200079e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200079e8:	f7f9 f81b 	bl	20000a22 <HAL_GetTick>
200079ec:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
200079ee:	68bb      	ldr	r3, [r7, #8]
200079f0:	2b00      	cmp	r3, #0
200079f2:	d002      	beq.n	200079fa <HAL_SPI_Receive+0x7e>
200079f4:	88fb      	ldrh	r3, [r7, #6]
200079f6:	2b00      	cmp	r3, #0
200079f8:	d102      	bne.n	20007a00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
200079fa:	2301      	movs	r3, #1
200079fc:	75fb      	strb	r3, [r7, #23]
    goto error;
200079fe:	e0cc      	b.n	20007b9a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20007a00:	68fb      	ldr	r3, [r7, #12]
20007a02:	2204      	movs	r2, #4
20007a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007a08:	68fb      	ldr	r3, [r7, #12]
20007a0a:	2200      	movs	r2, #0
20007a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20007a0e:	68fb      	ldr	r3, [r7, #12]
20007a10:	68ba      	ldr	r2, [r7, #8]
20007a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20007a14:	68fb      	ldr	r3, [r7, #12]
20007a16:	88fa      	ldrh	r2, [r7, #6]
20007a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20007a1a:	68fb      	ldr	r3, [r7, #12]
20007a1c:	88fa      	ldrh	r2, [r7, #6]
20007a1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
20007a20:	68fb      	ldr	r3, [r7, #12]
20007a22:	2200      	movs	r2, #0
20007a24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
20007a26:	68fb      	ldr	r3, [r7, #12]
20007a28:	2200      	movs	r2, #0
20007a2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
20007a2c:	68fb      	ldr	r3, [r7, #12]
20007a2e:	2200      	movs	r2, #0
20007a30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
20007a32:	68fb      	ldr	r3, [r7, #12]
20007a34:	2200      	movs	r2, #0
20007a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20007a38:	68fb      	ldr	r3, [r7, #12]
20007a3a:	2200      	movs	r2, #0
20007a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20007a3e:	68fb      	ldr	r3, [r7, #12]
20007a40:	689b      	ldr	r3, [r3, #8]
20007a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007a46:	d10f      	bne.n	20007a68 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007a48:	68fb      	ldr	r3, [r7, #12]
20007a4a:	681b      	ldr	r3, [r3, #0]
20007a4c:	681a      	ldr	r2, [r3, #0]
20007a4e:	68fb      	ldr	r3, [r7, #12]
20007a50:	681b      	ldr	r3, [r3, #0]
20007a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20007a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
20007a58:	68fb      	ldr	r3, [r7, #12]
20007a5a:	681b      	ldr	r3, [r3, #0]
20007a5c:	681a      	ldr	r2, [r3, #0]
20007a5e:	68fb      	ldr	r3, [r7, #12]
20007a60:	681b      	ldr	r3, [r3, #0]
20007a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20007a66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007a68:	68fb      	ldr	r3, [r7, #12]
20007a6a:	681b      	ldr	r3, [r3, #0]
20007a6c:	681b      	ldr	r3, [r3, #0]
20007a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20007a72:	2b40      	cmp	r3, #64	; 0x40
20007a74:	d007      	beq.n	20007a86 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007a76:	68fb      	ldr	r3, [r7, #12]
20007a78:	681b      	ldr	r3, [r3, #0]
20007a7a:	681a      	ldr	r2, [r3, #0]
20007a7c:	68fb      	ldr	r3, [r7, #12]
20007a7e:	681b      	ldr	r3, [r3, #0]
20007a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007a84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
20007a86:	68fb      	ldr	r3, [r7, #12]
20007a88:	68db      	ldr	r3, [r3, #12]
20007a8a:	2b00      	cmp	r3, #0
20007a8c:	d16a      	bne.n	20007b64 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
20007a8e:	e032      	b.n	20007af6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20007a90:	68fb      	ldr	r3, [r7, #12]
20007a92:	681b      	ldr	r3, [r3, #0]
20007a94:	689b      	ldr	r3, [r3, #8]
20007a96:	f003 0301 	and.w	r3, r3, #1
20007a9a:	2b01      	cmp	r3, #1
20007a9c:	d115      	bne.n	20007aca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
20007a9e:	68fb      	ldr	r3, [r7, #12]
20007aa0:	681b      	ldr	r3, [r3, #0]
20007aa2:	f103 020c 	add.w	r2, r3, #12
20007aa6:	68fb      	ldr	r3, [r7, #12]
20007aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007aaa:	7812      	ldrb	r2, [r2, #0]
20007aac:	b2d2      	uxtb	r2, r2
20007aae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
20007ab0:	68fb      	ldr	r3, [r7, #12]
20007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007ab4:	1c5a      	adds	r2, r3, #1
20007ab6:	68fb      	ldr	r3, [r7, #12]
20007ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20007aba:	68fb      	ldr	r3, [r7, #12]
20007abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007abe:	b29b      	uxth	r3, r3
20007ac0:	3b01      	subs	r3, #1
20007ac2:	b29a      	uxth	r2, r3
20007ac4:	68fb      	ldr	r3, [r7, #12]
20007ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
20007ac8:	e015      	b.n	20007af6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007aca:	f7f8 ffaa 	bl	20000a22 <HAL_GetTick>
20007ace:	4602      	mov	r2, r0
20007ad0:	693b      	ldr	r3, [r7, #16]
20007ad2:	1ad3      	subs	r3, r2, r3
20007ad4:	683a      	ldr	r2, [r7, #0]
20007ad6:	429a      	cmp	r2, r3
20007ad8:	d803      	bhi.n	20007ae2 <HAL_SPI_Receive+0x166>
20007ada:	683b      	ldr	r3, [r7, #0]
20007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
20007ae0:	d102      	bne.n	20007ae8 <HAL_SPI_Receive+0x16c>
20007ae2:	683b      	ldr	r3, [r7, #0]
20007ae4:	2b00      	cmp	r3, #0
20007ae6:	d106      	bne.n	20007af6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
20007ae8:	2303      	movs	r3, #3
20007aea:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
20007aec:	68fb      	ldr	r3, [r7, #12]
20007aee:	2201      	movs	r2, #1
20007af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
20007af4:	e051      	b.n	20007b9a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
20007af6:	68fb      	ldr	r3, [r7, #12]
20007af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007afa:	b29b      	uxth	r3, r3
20007afc:	2b00      	cmp	r3, #0
20007afe:	d1c7      	bne.n	20007a90 <HAL_SPI_Receive+0x114>
20007b00:	e035      	b.n	20007b6e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20007b02:	68fb      	ldr	r3, [r7, #12]
20007b04:	681b      	ldr	r3, [r3, #0]
20007b06:	689b      	ldr	r3, [r3, #8]
20007b08:	f003 0301 	and.w	r3, r3, #1
20007b0c:	2b01      	cmp	r3, #1
20007b0e:	d113      	bne.n	20007b38 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20007b10:	68fb      	ldr	r3, [r7, #12]
20007b12:	681b      	ldr	r3, [r3, #0]
20007b14:	68da      	ldr	r2, [r3, #12]
20007b16:	68fb      	ldr	r3, [r7, #12]
20007b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007b1a:	b292      	uxth	r2, r2
20007b1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20007b1e:	68fb      	ldr	r3, [r7, #12]
20007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007b22:	1c9a      	adds	r2, r3, #2
20007b24:	68fb      	ldr	r3, [r7, #12]
20007b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20007b28:	68fb      	ldr	r3, [r7, #12]
20007b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007b2c:	b29b      	uxth	r3, r3
20007b2e:	3b01      	subs	r3, #1
20007b30:	b29a      	uxth	r2, r3
20007b32:	68fb      	ldr	r3, [r7, #12]
20007b34:	87da      	strh	r2, [r3, #62]	; 0x3e
20007b36:	e015      	b.n	20007b64 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007b38:	f7f8 ff73 	bl	20000a22 <HAL_GetTick>
20007b3c:	4602      	mov	r2, r0
20007b3e:	693b      	ldr	r3, [r7, #16]
20007b40:	1ad3      	subs	r3, r2, r3
20007b42:	683a      	ldr	r2, [r7, #0]
20007b44:	429a      	cmp	r2, r3
20007b46:	d803      	bhi.n	20007b50 <HAL_SPI_Receive+0x1d4>
20007b48:	683b      	ldr	r3, [r7, #0]
20007b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
20007b4e:	d102      	bne.n	20007b56 <HAL_SPI_Receive+0x1da>
20007b50:	683b      	ldr	r3, [r7, #0]
20007b52:	2b00      	cmp	r3, #0
20007b54:	d106      	bne.n	20007b64 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
20007b56:	2303      	movs	r3, #3
20007b58:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
20007b5a:	68fb      	ldr	r3, [r7, #12]
20007b5c:	2201      	movs	r2, #1
20007b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
20007b62:	e01a      	b.n	20007b9a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
20007b64:	68fb      	ldr	r3, [r7, #12]
20007b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007b68:	b29b      	uxth	r3, r3
20007b6a:	2b00      	cmp	r3, #0
20007b6c:	d1c9      	bne.n	20007b02 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20007b6e:	693a      	ldr	r2, [r7, #16]
20007b70:	6839      	ldr	r1, [r7, #0]
20007b72:	68f8      	ldr	r0, [r7, #12]
20007b74:	f001 fda6 	bl	200096c4 <SPI_EndRxTransaction>
20007b78:	4603      	mov	r3, r0
20007b7a:	2b00      	cmp	r3, #0
20007b7c:	d002      	beq.n	20007b84 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20007b7e:	68fb      	ldr	r3, [r7, #12]
20007b80:	2220      	movs	r2, #32
20007b82:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20007b84:	68fb      	ldr	r3, [r7, #12]
20007b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007b88:	2b00      	cmp	r3, #0
20007b8a:	d002      	beq.n	20007b92 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
20007b8c:	2301      	movs	r3, #1
20007b8e:	75fb      	strb	r3, [r7, #23]
20007b90:	e003      	b.n	20007b9a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
20007b92:	68fb      	ldr	r3, [r7, #12]
20007b94:	2201      	movs	r2, #1
20007b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
20007b9a:	68fb      	ldr	r3, [r7, #12]
20007b9c:	2200      	movs	r2, #0
20007b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007ba2:	7dfb      	ldrb	r3, [r7, #23]
}
20007ba4:	4618      	mov	r0, r3
20007ba6:	3718      	adds	r7, #24
20007ba8:	46bd      	mov	sp, r7
20007baa:	bd80      	pop	{r7, pc}

20007bac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
20007bac:	b580      	push	{r7, lr}
20007bae:	b08c      	sub	sp, #48	; 0x30
20007bb0:	af00      	add	r7, sp, #0
20007bb2:	60f8      	str	r0, [r7, #12]
20007bb4:	60b9      	str	r1, [r7, #8]
20007bb6:	607a      	str	r2, [r7, #4]
20007bb8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
20007bba:	2301      	movs	r3, #1
20007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
20007bbe:	2300      	movs	r3, #0
20007bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20007bc4:	68fb      	ldr	r3, [r7, #12]
20007bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007bca:	2b01      	cmp	r3, #1
20007bcc:	d101      	bne.n	20007bd2 <HAL_SPI_TransmitReceive+0x26>
20007bce:	2302      	movs	r3, #2
20007bd0:	e198      	b.n	20007f04 <HAL_SPI_TransmitReceive+0x358>
20007bd2:	68fb      	ldr	r3, [r7, #12]
20007bd4:	2201      	movs	r2, #1
20007bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20007bda:	f7f8 ff22 	bl	20000a22 <HAL_GetTick>
20007bde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
20007be0:	68fb      	ldr	r3, [r7, #12]
20007be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
20007bea:	68fb      	ldr	r3, [r7, #12]
20007bec:	685b      	ldr	r3, [r3, #4]
20007bee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
20007bf0:	887b      	ldrh	r3, [r7, #2]
20007bf2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20007bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20007bf8:	2b01      	cmp	r3, #1
20007bfa:	d00f      	beq.n	20007c1c <HAL_SPI_TransmitReceive+0x70>
20007bfc:	69fb      	ldr	r3, [r7, #28]
20007bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20007c02:	d107      	bne.n	20007c14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20007c04:	68fb      	ldr	r3, [r7, #12]
20007c06:	689b      	ldr	r3, [r3, #8]
20007c08:	2b00      	cmp	r3, #0
20007c0a:	d103      	bne.n	20007c14 <HAL_SPI_TransmitReceive+0x68>
20007c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20007c10:	2b04      	cmp	r3, #4
20007c12:	d003      	beq.n	20007c1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
20007c14:	2302      	movs	r3, #2
20007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20007c1a:	e16d      	b.n	20007ef8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20007c1c:	68bb      	ldr	r3, [r7, #8]
20007c1e:	2b00      	cmp	r3, #0
20007c20:	d005      	beq.n	20007c2e <HAL_SPI_TransmitReceive+0x82>
20007c22:	687b      	ldr	r3, [r7, #4]
20007c24:	2b00      	cmp	r3, #0
20007c26:	d002      	beq.n	20007c2e <HAL_SPI_TransmitReceive+0x82>
20007c28:	887b      	ldrh	r3, [r7, #2]
20007c2a:	2b00      	cmp	r3, #0
20007c2c:	d103      	bne.n	20007c36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
20007c2e:	2301      	movs	r3, #1
20007c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20007c34:	e160      	b.n	20007ef8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20007c36:	68fb      	ldr	r3, [r7, #12]
20007c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007c3c:	b2db      	uxtb	r3, r3
20007c3e:	2b04      	cmp	r3, #4
20007c40:	d003      	beq.n	20007c4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20007c42:	68fb      	ldr	r3, [r7, #12]
20007c44:	2205      	movs	r2, #5
20007c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007c4a:	68fb      	ldr	r3, [r7, #12]
20007c4c:	2200      	movs	r2, #0
20007c4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20007c50:	68fb      	ldr	r3, [r7, #12]
20007c52:	687a      	ldr	r2, [r7, #4]
20007c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
20007c56:	68fb      	ldr	r3, [r7, #12]
20007c58:	887a      	ldrh	r2, [r7, #2]
20007c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
20007c5c:	68fb      	ldr	r3, [r7, #12]
20007c5e:	887a      	ldrh	r2, [r7, #2]
20007c60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20007c62:	68fb      	ldr	r3, [r7, #12]
20007c64:	68ba      	ldr	r2, [r7, #8]
20007c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
20007c68:	68fb      	ldr	r3, [r7, #12]
20007c6a:	887a      	ldrh	r2, [r7, #2]
20007c6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
20007c6e:	68fb      	ldr	r3, [r7, #12]
20007c70:	887a      	ldrh	r2, [r7, #2]
20007c72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20007c74:	68fb      	ldr	r3, [r7, #12]
20007c76:	2200      	movs	r2, #0
20007c78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20007c7a:	68fb      	ldr	r3, [r7, #12]
20007c7c:	2200      	movs	r2, #0
20007c7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007c80:	68fb      	ldr	r3, [r7, #12]
20007c82:	681b      	ldr	r3, [r3, #0]
20007c84:	681b      	ldr	r3, [r3, #0]
20007c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
20007c8a:	2b40      	cmp	r3, #64	; 0x40
20007c8c:	d007      	beq.n	20007c9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007c8e:	68fb      	ldr	r3, [r7, #12]
20007c90:	681b      	ldr	r3, [r3, #0]
20007c92:	681a      	ldr	r2, [r3, #0]
20007c94:	68fb      	ldr	r3, [r7, #12]
20007c96:	681b      	ldr	r3, [r3, #0]
20007c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007c9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20007c9e:	68fb      	ldr	r3, [r7, #12]
20007ca0:	68db      	ldr	r3, [r3, #12]
20007ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20007ca6:	d17c      	bne.n	20007da2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20007ca8:	68fb      	ldr	r3, [r7, #12]
20007caa:	685b      	ldr	r3, [r3, #4]
20007cac:	2b00      	cmp	r3, #0
20007cae:	d002      	beq.n	20007cb6 <HAL_SPI_TransmitReceive+0x10a>
20007cb0:	8b7b      	ldrh	r3, [r7, #26]
20007cb2:	2b01      	cmp	r3, #1
20007cb4:	d16a      	bne.n	20007d8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20007cb6:	68fb      	ldr	r3, [r7, #12]
20007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007cba:	881a      	ldrh	r2, [r3, #0]
20007cbc:	68fb      	ldr	r3, [r7, #12]
20007cbe:	681b      	ldr	r3, [r3, #0]
20007cc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20007cc2:	68fb      	ldr	r3, [r7, #12]
20007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007cc6:	1c9a      	adds	r2, r3, #2
20007cc8:	68fb      	ldr	r3, [r7, #12]
20007cca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20007ccc:	68fb      	ldr	r3, [r7, #12]
20007cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007cd0:	b29b      	uxth	r3, r3
20007cd2:	3b01      	subs	r3, #1
20007cd4:	b29a      	uxth	r2, r3
20007cd6:	68fb      	ldr	r3, [r7, #12]
20007cd8:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007cda:	e057      	b.n	20007d8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
20007cdc:	68fb      	ldr	r3, [r7, #12]
20007cde:	681b      	ldr	r3, [r3, #0]
20007ce0:	689b      	ldr	r3, [r3, #8]
20007ce2:	f003 0302 	and.w	r3, r3, #2
20007ce6:	2b02      	cmp	r3, #2
20007ce8:	d11b      	bne.n	20007d22 <HAL_SPI_TransmitReceive+0x176>
20007cea:	68fb      	ldr	r3, [r7, #12]
20007cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007cee:	b29b      	uxth	r3, r3
20007cf0:	2b00      	cmp	r3, #0
20007cf2:	d016      	beq.n	20007d22 <HAL_SPI_TransmitReceive+0x176>
20007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20007cf6:	2b01      	cmp	r3, #1
20007cf8:	d113      	bne.n	20007d22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20007cfa:	68fb      	ldr	r3, [r7, #12]
20007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007cfe:	881a      	ldrh	r2, [r3, #0]
20007d00:	68fb      	ldr	r3, [r7, #12]
20007d02:	681b      	ldr	r3, [r3, #0]
20007d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20007d06:	68fb      	ldr	r3, [r7, #12]
20007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007d0a:	1c9a      	adds	r2, r3, #2
20007d0c:	68fb      	ldr	r3, [r7, #12]
20007d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20007d10:	68fb      	ldr	r3, [r7, #12]
20007d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007d14:	b29b      	uxth	r3, r3
20007d16:	3b01      	subs	r3, #1
20007d18:	b29a      	uxth	r2, r3
20007d1a:	68fb      	ldr	r3, [r7, #12]
20007d1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20007d1e:	2300      	movs	r3, #0
20007d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20007d22:	68fb      	ldr	r3, [r7, #12]
20007d24:	681b      	ldr	r3, [r3, #0]
20007d26:	689b      	ldr	r3, [r3, #8]
20007d28:	f003 0301 	and.w	r3, r3, #1
20007d2c:	2b01      	cmp	r3, #1
20007d2e:	d119      	bne.n	20007d64 <HAL_SPI_TransmitReceive+0x1b8>
20007d30:	68fb      	ldr	r3, [r7, #12]
20007d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007d34:	b29b      	uxth	r3, r3
20007d36:	2b00      	cmp	r3, #0
20007d38:	d014      	beq.n	20007d64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20007d3a:	68fb      	ldr	r3, [r7, #12]
20007d3c:	681b      	ldr	r3, [r3, #0]
20007d3e:	68da      	ldr	r2, [r3, #12]
20007d40:	68fb      	ldr	r3, [r7, #12]
20007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007d44:	b292      	uxth	r2, r2
20007d46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20007d48:	68fb      	ldr	r3, [r7, #12]
20007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007d4c:	1c9a      	adds	r2, r3, #2
20007d4e:	68fb      	ldr	r3, [r7, #12]
20007d50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20007d52:	68fb      	ldr	r3, [r7, #12]
20007d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007d56:	b29b      	uxth	r3, r3
20007d58:	3b01      	subs	r3, #1
20007d5a:	b29a      	uxth	r2, r3
20007d5c:	68fb      	ldr	r3, [r7, #12]
20007d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20007d60:	2301      	movs	r3, #1
20007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
20007d64:	f7f8 fe5d 	bl	20000a22 <HAL_GetTick>
20007d68:	4602      	mov	r2, r0
20007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20007d6c:	1ad3      	subs	r3, r2, r3
20007d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
20007d70:	429a      	cmp	r2, r3
20007d72:	d80b      	bhi.n	20007d8c <HAL_SPI_TransmitReceive+0x1e0>
20007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
20007d7a:	d007      	beq.n	20007d8c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
20007d7c:	2303      	movs	r3, #3
20007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
20007d82:	68fb      	ldr	r3, [r7, #12]
20007d84:	2201      	movs	r2, #1
20007d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
20007d8a:	e0b5      	b.n	20007ef8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007d8c:	68fb      	ldr	r3, [r7, #12]
20007d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007d90:	b29b      	uxth	r3, r3
20007d92:	2b00      	cmp	r3, #0
20007d94:	d1a2      	bne.n	20007cdc <HAL_SPI_TransmitReceive+0x130>
20007d96:	68fb      	ldr	r3, [r7, #12]
20007d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007d9a:	b29b      	uxth	r3, r3
20007d9c:	2b00      	cmp	r3, #0
20007d9e:	d19d      	bne.n	20007cdc <HAL_SPI_TransmitReceive+0x130>
20007da0:	e080      	b.n	20007ea4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20007da2:	68fb      	ldr	r3, [r7, #12]
20007da4:	685b      	ldr	r3, [r3, #4]
20007da6:	2b00      	cmp	r3, #0
20007da8:	d002      	beq.n	20007db0 <HAL_SPI_TransmitReceive+0x204>
20007daa:	8b7b      	ldrh	r3, [r7, #26]
20007dac:	2b01      	cmp	r3, #1
20007dae:	d16f      	bne.n	20007e90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20007db0:	68fb      	ldr	r3, [r7, #12]
20007db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20007db4:	68fb      	ldr	r3, [r7, #12]
20007db6:	681b      	ldr	r3, [r3, #0]
20007db8:	330c      	adds	r3, #12
20007dba:	7812      	ldrb	r2, [r2, #0]
20007dbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
20007dbe:	68fb      	ldr	r3, [r7, #12]
20007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007dc2:	1c5a      	adds	r2, r3, #1
20007dc4:	68fb      	ldr	r3, [r7, #12]
20007dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
20007dc8:	68fb      	ldr	r3, [r7, #12]
20007dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007dcc:	b29b      	uxth	r3, r3
20007dce:	3b01      	subs	r3, #1
20007dd0:	b29a      	uxth	r2, r3
20007dd2:	68fb      	ldr	r3, [r7, #12]
20007dd4:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007dd6:	e05b      	b.n	20007e90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
20007dd8:	68fb      	ldr	r3, [r7, #12]
20007dda:	681b      	ldr	r3, [r3, #0]
20007ddc:	689b      	ldr	r3, [r3, #8]
20007dde:	f003 0302 	and.w	r3, r3, #2
20007de2:	2b02      	cmp	r3, #2
20007de4:	d11c      	bne.n	20007e20 <HAL_SPI_TransmitReceive+0x274>
20007de6:	68fb      	ldr	r3, [r7, #12]
20007de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007dea:	b29b      	uxth	r3, r3
20007dec:	2b00      	cmp	r3, #0
20007dee:	d017      	beq.n	20007e20 <HAL_SPI_TransmitReceive+0x274>
20007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20007df2:	2b01      	cmp	r3, #1
20007df4:	d114      	bne.n	20007e20 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
20007df6:	68fb      	ldr	r3, [r7, #12]
20007df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20007dfa:	68fb      	ldr	r3, [r7, #12]
20007dfc:	681b      	ldr	r3, [r3, #0]
20007dfe:	330c      	adds	r3, #12
20007e00:	7812      	ldrb	r2, [r2, #0]
20007e02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
20007e04:	68fb      	ldr	r3, [r7, #12]
20007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007e08:	1c5a      	adds	r2, r3, #1
20007e0a:	68fb      	ldr	r3, [r7, #12]
20007e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20007e0e:	68fb      	ldr	r3, [r7, #12]
20007e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007e12:	b29b      	uxth	r3, r3
20007e14:	3b01      	subs	r3, #1
20007e16:	b29a      	uxth	r2, r3
20007e18:	68fb      	ldr	r3, [r7, #12]
20007e1a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20007e1c:	2300      	movs	r3, #0
20007e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20007e20:	68fb      	ldr	r3, [r7, #12]
20007e22:	681b      	ldr	r3, [r3, #0]
20007e24:	689b      	ldr	r3, [r3, #8]
20007e26:	f003 0301 	and.w	r3, r3, #1
20007e2a:	2b01      	cmp	r3, #1
20007e2c:	d119      	bne.n	20007e62 <HAL_SPI_TransmitReceive+0x2b6>
20007e2e:	68fb      	ldr	r3, [r7, #12]
20007e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007e32:	b29b      	uxth	r3, r3
20007e34:	2b00      	cmp	r3, #0
20007e36:	d014      	beq.n	20007e62 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
20007e38:	68fb      	ldr	r3, [r7, #12]
20007e3a:	681b      	ldr	r3, [r3, #0]
20007e3c:	68da      	ldr	r2, [r3, #12]
20007e3e:	68fb      	ldr	r3, [r7, #12]
20007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007e42:	b2d2      	uxtb	r2, r2
20007e44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
20007e46:	68fb      	ldr	r3, [r7, #12]
20007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007e4a:	1c5a      	adds	r2, r3, #1
20007e4c:	68fb      	ldr	r3, [r7, #12]
20007e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20007e50:	68fb      	ldr	r3, [r7, #12]
20007e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007e54:	b29b      	uxth	r3, r3
20007e56:	3b01      	subs	r3, #1
20007e58:	b29a      	uxth	r2, r3
20007e5a:	68fb      	ldr	r3, [r7, #12]
20007e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20007e5e:	2301      	movs	r3, #1
20007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
20007e62:	f7f8 fdde 	bl	20000a22 <HAL_GetTick>
20007e66:	4602      	mov	r2, r0
20007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20007e6a:	1ad3      	subs	r3, r2, r3
20007e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
20007e6e:	429a      	cmp	r2, r3
20007e70:	d803      	bhi.n	20007e7a <HAL_SPI_TransmitReceive+0x2ce>
20007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20007e74:	f1b3 3fff 	cmp.w	r3, #4294967295
20007e78:	d102      	bne.n	20007e80 <HAL_SPI_TransmitReceive+0x2d4>
20007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
20007e7c:	2b00      	cmp	r3, #0
20007e7e:	d107      	bne.n	20007e90 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
20007e80:	2303      	movs	r3, #3
20007e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
20007e86:	68fb      	ldr	r3, [r7, #12]
20007e88:	2201      	movs	r2, #1
20007e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
20007e8e:	e033      	b.n	20007ef8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20007e90:	68fb      	ldr	r3, [r7, #12]
20007e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007e94:	b29b      	uxth	r3, r3
20007e96:	2b00      	cmp	r3, #0
20007e98:	d19e      	bne.n	20007dd8 <HAL_SPI_TransmitReceive+0x22c>
20007e9a:	68fb      	ldr	r3, [r7, #12]
20007e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007e9e:	b29b      	uxth	r3, r3
20007ea0:	2b00      	cmp	r3, #0
20007ea2:	d199      	bne.n	20007dd8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20007ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20007ea6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
20007ea8:	68f8      	ldr	r0, [r7, #12]
20007eaa:	f001 fc71 	bl	20009790 <SPI_EndRxTxTransaction>
20007eae:	4603      	mov	r3, r0
20007eb0:	2b00      	cmp	r3, #0
20007eb2:	d006      	beq.n	20007ec2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
20007eb4:	2301      	movs	r3, #1
20007eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20007eba:	68fb      	ldr	r3, [r7, #12]
20007ebc:	2220      	movs	r2, #32
20007ebe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
20007ec0:	e01a      	b.n	20007ef8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20007ec2:	68fb      	ldr	r3, [r7, #12]
20007ec4:	689b      	ldr	r3, [r3, #8]
20007ec6:	2b00      	cmp	r3, #0
20007ec8:	d10a      	bne.n	20007ee0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20007eca:	2300      	movs	r3, #0
20007ecc:	617b      	str	r3, [r7, #20]
20007ece:	68fb      	ldr	r3, [r7, #12]
20007ed0:	681b      	ldr	r3, [r3, #0]
20007ed2:	68db      	ldr	r3, [r3, #12]
20007ed4:	617b      	str	r3, [r7, #20]
20007ed6:	68fb      	ldr	r3, [r7, #12]
20007ed8:	681b      	ldr	r3, [r3, #0]
20007eda:	689b      	ldr	r3, [r3, #8]
20007edc:	617b      	str	r3, [r7, #20]
20007ede:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20007ee0:	68fb      	ldr	r3, [r7, #12]
20007ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007ee4:	2b00      	cmp	r3, #0
20007ee6:	d003      	beq.n	20007ef0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
20007ee8:	2301      	movs	r3, #1
20007eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
20007eee:	e003      	b.n	20007ef8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
20007ef0:	68fb      	ldr	r3, [r7, #12]
20007ef2:	2201      	movs	r2, #1
20007ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
20007ef8:	68fb      	ldr	r3, [r7, #12]
20007efa:	2200      	movs	r2, #0
20007efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007f00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
20007f04:	4618      	mov	r0, r3
20007f06:	3730      	adds	r7, #48	; 0x30
20007f08:	46bd      	mov	sp, r7
20007f0a:	bd80      	pop	{r7, pc}

20007f0c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20007f0c:	b480      	push	{r7}
20007f0e:	b087      	sub	sp, #28
20007f10:	af00      	add	r7, sp, #0
20007f12:	60f8      	str	r0, [r7, #12]
20007f14:	60b9      	str	r1, [r7, #8]
20007f16:	4613      	mov	r3, r2
20007f18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20007f1a:	2300      	movs	r3, #0
20007f1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
20007f1e:	68bb      	ldr	r3, [r7, #8]
20007f20:	2b00      	cmp	r3, #0
20007f22:	d002      	beq.n	20007f2a <HAL_SPI_Transmit_IT+0x1e>
20007f24:	88fb      	ldrh	r3, [r7, #6]
20007f26:	2b00      	cmp	r3, #0
20007f28:	d102      	bne.n	20007f30 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
20007f2a:	2301      	movs	r3, #1
20007f2c:	75fb      	strb	r3, [r7, #23]
    goto error;
20007f2e:	e06a      	b.n	20008006 <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
20007f30:	68fb      	ldr	r3, [r7, #12]
20007f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007f36:	b2db      	uxtb	r3, r3
20007f38:	2b01      	cmp	r3, #1
20007f3a:	d002      	beq.n	20007f42 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
20007f3c:	2302      	movs	r3, #2
20007f3e:	75fb      	strb	r3, [r7, #23]
    goto error;
20007f40:	e061      	b.n	20008006 <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20007f42:	68fb      	ldr	r3, [r7, #12]
20007f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007f48:	2b01      	cmp	r3, #1
20007f4a:	d101      	bne.n	20007f50 <HAL_SPI_Transmit_IT+0x44>
20007f4c:	2302      	movs	r3, #2
20007f4e:	e05b      	b.n	20008008 <HAL_SPI_Transmit_IT+0xfc>
20007f50:	68fb      	ldr	r3, [r7, #12]
20007f52:	2201      	movs	r2, #1
20007f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20007f58:	68fb      	ldr	r3, [r7, #12]
20007f5a:	2203      	movs	r2, #3
20007f5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007f60:	68fb      	ldr	r3, [r7, #12]
20007f62:	2200      	movs	r2, #0
20007f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20007f66:	68fb      	ldr	r3, [r7, #12]
20007f68:	68ba      	ldr	r2, [r7, #8]
20007f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20007f6c:	68fb      	ldr	r3, [r7, #12]
20007f6e:	88fa      	ldrh	r2, [r7, #6]
20007f70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20007f72:	68fb      	ldr	r3, [r7, #12]
20007f74:	88fa      	ldrh	r2, [r7, #6]
20007f76:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20007f78:	68fb      	ldr	r3, [r7, #12]
20007f7a:	2200      	movs	r2, #0
20007f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20007f7e:	68fb      	ldr	r3, [r7, #12]
20007f80:	2200      	movs	r2, #0
20007f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20007f84:	68fb      	ldr	r3, [r7, #12]
20007f86:	2200      	movs	r2, #0
20007f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
20007f8a:	68fb      	ldr	r3, [r7, #12]
20007f8c:	2200      	movs	r2, #0
20007f8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20007f90:	68fb      	ldr	r3, [r7, #12]
20007f92:	68db      	ldr	r3, [r3, #12]
20007f94:	2b00      	cmp	r3, #0
20007f96:	d003      	beq.n	20007fa0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
20007f98:	68fb      	ldr	r3, [r7, #12]
20007f9a:	4a1e      	ldr	r2, [pc, #120]	; (20008014 <HAL_SPI_Transmit_IT+0x108>)
20007f9c:	645a      	str	r2, [r3, #68]	; 0x44
20007f9e:	e002      	b.n	20007fa6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
20007fa0:	68fb      	ldr	r3, [r7, #12]
20007fa2:	4a1d      	ldr	r2, [pc, #116]	; (20008018 <HAL_SPI_Transmit_IT+0x10c>)
20007fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20007fa6:	68fb      	ldr	r3, [r7, #12]
20007fa8:	689b      	ldr	r3, [r3, #8]
20007faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007fae:	d10f      	bne.n	20007fd0 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007fb0:	68fb      	ldr	r3, [r7, #12]
20007fb2:	681b      	ldr	r3, [r3, #0]
20007fb4:	681a      	ldr	r2, [r3, #0]
20007fb6:	68fb      	ldr	r3, [r7, #12]
20007fb8:	681b      	ldr	r3, [r3, #0]
20007fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20007fbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20007fc0:	68fb      	ldr	r3, [r7, #12]
20007fc2:	681b      	ldr	r3, [r3, #0]
20007fc4:	681a      	ldr	r2, [r3, #0]
20007fc6:	68fb      	ldr	r3, [r7, #12]
20007fc8:	681b      	ldr	r3, [r3, #0]
20007fca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20007fce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007fd0:	68fb      	ldr	r3, [r7, #12]
20007fd2:	681b      	ldr	r3, [r3, #0]
20007fd4:	681b      	ldr	r3, [r3, #0]
20007fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
20007fda:	2b40      	cmp	r3, #64	; 0x40
20007fdc:	d007      	beq.n	20007fee <HAL_SPI_Transmit_IT+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007fde:	68fb      	ldr	r3, [r7, #12]
20007fe0:	681b      	ldr	r3, [r3, #0]
20007fe2:	681a      	ldr	r2, [r3, #0]
20007fe4:	68fb      	ldr	r3, [r7, #12]
20007fe6:	681b      	ldr	r3, [r3, #0]
20007fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007fec:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20007fee:	68fb      	ldr	r3, [r7, #12]
20007ff0:	2200      	movs	r2, #0
20007ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
20007ff6:	68fb      	ldr	r3, [r7, #12]
20007ff8:	681b      	ldr	r3, [r3, #0]
20007ffa:	685a      	ldr	r2, [r3, #4]
20007ffc:	68fb      	ldr	r3, [r7, #12]
20007ffe:	681b      	ldr	r3, [r3, #0]
20008000:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
20008004:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
20008006:	7dfb      	ldrb	r3, [r7, #23]
}
20008008:	4618      	mov	r0, r3
2000800a:	371c      	adds	r7, #28
2000800c:	46bd      	mov	sp, r7
2000800e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008012:	4770      	bx	lr
20008014:	20009571 	.word	0x20009571
20008018:	2000952b 	.word	0x2000952b

2000801c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
2000801c:	b580      	push	{r7, lr}
2000801e:	b086      	sub	sp, #24
20008020:	af00      	add	r7, sp, #0
20008022:	60f8      	str	r0, [r7, #12]
20008024:	60b9      	str	r1, [r7, #8]
20008026:	4613      	mov	r3, r2
20008028:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
2000802a:	2300      	movs	r3, #0
2000802c:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
2000802e:	68fb      	ldr	r3, [r7, #12]
20008030:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008034:	b2db      	uxtb	r3, r3
20008036:	2b01      	cmp	r3, #1
20008038:	d002      	beq.n	20008040 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
2000803a:	2302      	movs	r3, #2
2000803c:	75fb      	strb	r3, [r7, #23]
    goto error;
2000803e:	e07f      	b.n	20008140 <HAL_SPI_Receive_IT+0x124>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20008040:	68fb      	ldr	r3, [r7, #12]
20008042:	689b      	ldr	r3, [r3, #8]
20008044:	2b00      	cmp	r3, #0
20008046:	d110      	bne.n	2000806a <HAL_SPI_Receive_IT+0x4e>
20008048:	68fb      	ldr	r3, [r7, #12]
2000804a:	685b      	ldr	r3, [r3, #4]
2000804c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20008050:	d10b      	bne.n	2000806a <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20008052:	68fb      	ldr	r3, [r7, #12]
20008054:	2204      	movs	r2, #4
20008056:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
2000805a:	88fb      	ldrh	r3, [r7, #6]
2000805c:	68ba      	ldr	r2, [r7, #8]
2000805e:	68b9      	ldr	r1, [r7, #8]
20008060:	68f8      	ldr	r0, [r7, #12]
20008062:	f000 f877 	bl	20008154 <HAL_SPI_TransmitReceive_IT>
20008066:	4603      	mov	r3, r0
20008068:	e06b      	b.n	20008142 <HAL_SPI_Receive_IT+0x126>
  }


  if ((pData == NULL) || (Size == 0U))
2000806a:	68bb      	ldr	r3, [r7, #8]
2000806c:	2b00      	cmp	r3, #0
2000806e:	d002      	beq.n	20008076 <HAL_SPI_Receive_IT+0x5a>
20008070:	88fb      	ldrh	r3, [r7, #6]
20008072:	2b00      	cmp	r3, #0
20008074:	d102      	bne.n	2000807c <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
20008076:	2301      	movs	r3, #1
20008078:	75fb      	strb	r3, [r7, #23]
    goto error;
2000807a:	e061      	b.n	20008140 <HAL_SPI_Receive_IT+0x124>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
2000807c:	68fb      	ldr	r3, [r7, #12]
2000807e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20008082:	2b01      	cmp	r3, #1
20008084:	d101      	bne.n	2000808a <HAL_SPI_Receive_IT+0x6e>
20008086:	2302      	movs	r3, #2
20008088:	e05b      	b.n	20008142 <HAL_SPI_Receive_IT+0x126>
2000808a:	68fb      	ldr	r3, [r7, #12]
2000808c:	2201      	movs	r2, #1
2000808e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20008092:	68fb      	ldr	r3, [r7, #12]
20008094:	2204      	movs	r2, #4
20008096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2000809a:	68fb      	ldr	r3, [r7, #12]
2000809c:	2200      	movs	r2, #0
2000809e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
200080a0:	68fb      	ldr	r3, [r7, #12]
200080a2:	68ba      	ldr	r2, [r7, #8]
200080a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
200080a6:	68fb      	ldr	r3, [r7, #12]
200080a8:	88fa      	ldrh	r2, [r7, #6]
200080aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
200080ac:	68fb      	ldr	r3, [r7, #12]
200080ae:	88fa      	ldrh	r2, [r7, #6]
200080b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
200080b2:	68fb      	ldr	r3, [r7, #12]
200080b4:	2200      	movs	r2, #0
200080b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
200080b8:	68fb      	ldr	r3, [r7, #12]
200080ba:	2200      	movs	r2, #0
200080bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
200080be:	68fb      	ldr	r3, [r7, #12]
200080c0:	2200      	movs	r2, #0
200080c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
200080c4:	68fb      	ldr	r3, [r7, #12]
200080c6:	2200      	movs	r2, #0
200080c8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
200080ca:	68fb      	ldr	r3, [r7, #12]
200080cc:	68db      	ldr	r3, [r3, #12]
200080ce:	2b00      	cmp	r3, #0
200080d0:	d003      	beq.n	200080da <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
200080d2:	68fb      	ldr	r3, [r7, #12]
200080d4:	4a1d      	ldr	r2, [pc, #116]	; (2000814c <HAL_SPI_Receive_IT+0x130>)
200080d6:	641a      	str	r2, [r3, #64]	; 0x40
200080d8:	e002      	b.n	200080e0 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
200080da:	68fb      	ldr	r3, [r7, #12]
200080dc:	4a1c      	ldr	r2, [pc, #112]	; (20008150 <HAL_SPI_Receive_IT+0x134>)
200080de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200080e0:	68fb      	ldr	r3, [r7, #12]
200080e2:	689b      	ldr	r3, [r3, #8]
200080e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200080e8:	d10f      	bne.n	2000810a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200080ea:	68fb      	ldr	r3, [r7, #12]
200080ec:	681b      	ldr	r3, [r3, #0]
200080ee:	681a      	ldr	r2, [r3, #0]
200080f0:	68fb      	ldr	r3, [r7, #12]
200080f2:	681b      	ldr	r3, [r3, #0]
200080f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200080f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
200080fa:	68fb      	ldr	r3, [r7, #12]
200080fc:	681b      	ldr	r3, [r3, #0]
200080fe:	681a      	ldr	r2, [r3, #0]
20008100:	68fb      	ldr	r3, [r7, #12]
20008102:	681b      	ldr	r3, [r3, #0]
20008104:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20008108:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000810a:	68fb      	ldr	r3, [r7, #12]
2000810c:	681b      	ldr	r3, [r3, #0]
2000810e:	681b      	ldr	r3, [r3, #0]
20008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008114:	2b40      	cmp	r3, #64	; 0x40
20008116:	d007      	beq.n	20008128 <HAL_SPI_Receive_IT+0x10c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008118:	68fb      	ldr	r3, [r7, #12]
2000811a:	681b      	ldr	r3, [r3, #0]
2000811c:	681a      	ldr	r2, [r3, #0]
2000811e:	68fb      	ldr	r3, [r7, #12]
20008120:	681b      	ldr	r3, [r3, #0]
20008122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20008126:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008128:	68fb      	ldr	r3, [r7, #12]
2000812a:	2200      	movs	r2, #0
2000812c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20008130:	68fb      	ldr	r3, [r7, #12]
20008132:	681b      	ldr	r3, [r3, #0]
20008134:	685a      	ldr	r2, [r3, #4]
20008136:	68fb      	ldr	r3, [r7, #12]
20008138:	681b      	ldr	r3, [r3, #0]
2000813a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
2000813e:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
20008140:	7dfb      	ldrb	r3, [r7, #23]
}
20008142:	4618      	mov	r0, r3
20008144:	3718      	adds	r7, #24
20008146:	46bd      	mov	sp, r7
20008148:	bd80      	pop	{r7, pc}
2000814a:	bf00      	nop
2000814c:	200094e5 	.word	0x200094e5
20008150:	2000949b 	.word	0x2000949b

20008154 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
20008154:	b480      	push	{r7}
20008156:	b087      	sub	sp, #28
20008158:	af00      	add	r7, sp, #0
2000815a:	60f8      	str	r0, [r7, #12]
2000815c:	60b9      	str	r1, [r7, #8]
2000815e:	607a      	str	r2, [r7, #4]
20008160:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
20008162:	2300      	movs	r3, #0
20008164:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
20008166:	68fb      	ldr	r3, [r7, #12]
20008168:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000816c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
2000816e:	68fb      	ldr	r3, [r7, #12]
20008170:	685b      	ldr	r3, [r3, #4]
20008172:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20008174:	7dbb      	ldrb	r3, [r7, #22]
20008176:	2b01      	cmp	r3, #1
20008178:	d00d      	beq.n	20008196 <HAL_SPI_TransmitReceive_IT+0x42>
2000817a:	693b      	ldr	r3, [r7, #16]
2000817c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20008180:	d106      	bne.n	20008190 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20008182:	68fb      	ldr	r3, [r7, #12]
20008184:	689b      	ldr	r3, [r3, #8]
20008186:	2b00      	cmp	r3, #0
20008188:	d102      	bne.n	20008190 <HAL_SPI_TransmitReceive_IT+0x3c>
2000818a:	7dbb      	ldrb	r3, [r7, #22]
2000818c:	2b04      	cmp	r3, #4
2000818e:	d002      	beq.n	20008196 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
20008190:	2302      	movs	r3, #2
20008192:	75fb      	strb	r3, [r7, #23]
    goto error;
20008194:	e061      	b.n	2000825a <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20008196:	68bb      	ldr	r3, [r7, #8]
20008198:	2b00      	cmp	r3, #0
2000819a:	d005      	beq.n	200081a8 <HAL_SPI_TransmitReceive_IT+0x54>
2000819c:	687b      	ldr	r3, [r7, #4]
2000819e:	2b00      	cmp	r3, #0
200081a0:	d002      	beq.n	200081a8 <HAL_SPI_TransmitReceive_IT+0x54>
200081a2:	887b      	ldrh	r3, [r7, #2]
200081a4:	2b00      	cmp	r3, #0
200081a6:	d102      	bne.n	200081ae <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
200081a8:	2301      	movs	r3, #1
200081aa:	75fb      	strb	r3, [r7, #23]
    goto error;
200081ac:	e055      	b.n	2000825a <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
200081ae:	68fb      	ldr	r3, [r7, #12]
200081b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200081b4:	2b01      	cmp	r3, #1
200081b6:	d101      	bne.n	200081bc <HAL_SPI_TransmitReceive_IT+0x68>
200081b8:	2302      	movs	r3, #2
200081ba:	e04f      	b.n	2000825c <HAL_SPI_TransmitReceive_IT+0x108>
200081bc:	68fb      	ldr	r3, [r7, #12]
200081be:	2201      	movs	r2, #1
200081c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
200081c4:	68fb      	ldr	r3, [r7, #12]
200081c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200081ca:	b2db      	uxtb	r3, r3
200081cc:	2b04      	cmp	r3, #4
200081ce:	d003      	beq.n	200081d8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
200081d0:	68fb      	ldr	r3, [r7, #12]
200081d2:	2205      	movs	r2, #5
200081d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200081d8:	68fb      	ldr	r3, [r7, #12]
200081da:	2200      	movs	r2, #0
200081dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
200081de:	68fb      	ldr	r3, [r7, #12]
200081e0:	68ba      	ldr	r2, [r7, #8]
200081e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
200081e4:	68fb      	ldr	r3, [r7, #12]
200081e6:	887a      	ldrh	r2, [r7, #2]
200081e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
200081ea:	68fb      	ldr	r3, [r7, #12]
200081ec:	887a      	ldrh	r2, [r7, #2]
200081ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
200081f0:	68fb      	ldr	r3, [r7, #12]
200081f2:	687a      	ldr	r2, [r7, #4]
200081f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
200081f6:	68fb      	ldr	r3, [r7, #12]
200081f8:	887a      	ldrh	r2, [r7, #2]
200081fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
200081fc:	68fb      	ldr	r3, [r7, #12]
200081fe:	887a      	ldrh	r2, [r7, #2]
20008200:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20008202:	68fb      	ldr	r3, [r7, #12]
20008204:	68db      	ldr	r3, [r3, #12]
20008206:	2b00      	cmp	r3, #0
20008208:	d006      	beq.n	20008218 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
2000820a:	68fb      	ldr	r3, [r7, #12]
2000820c:	4a16      	ldr	r2, [pc, #88]	; (20008268 <HAL_SPI_TransmitReceive_IT+0x114>)
2000820e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
20008210:	68fb      	ldr	r3, [r7, #12]
20008212:	4a16      	ldr	r2, [pc, #88]	; (2000826c <HAL_SPI_TransmitReceive_IT+0x118>)
20008214:	645a      	str	r2, [r3, #68]	; 0x44
20008216:	e005      	b.n	20008224 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
20008218:	68fb      	ldr	r3, [r7, #12]
2000821a:	4a15      	ldr	r2, [pc, #84]	; (20008270 <HAL_SPI_TransmitReceive_IT+0x11c>)
2000821c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
2000821e:	68fb      	ldr	r3, [r7, #12]
20008220:	4a14      	ldr	r2, [pc, #80]	; (20008274 <HAL_SPI_TransmitReceive_IT+0x120>)
20008222:	645a      	str	r2, [r3, #68]	; 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20008224:	68fb      	ldr	r3, [r7, #12]
20008226:	681b      	ldr	r3, [r3, #0]
20008228:	681b      	ldr	r3, [r3, #0]
2000822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000822e:	2b40      	cmp	r3, #64	; 0x40
20008230:	d007      	beq.n	20008242 <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008232:	68fb      	ldr	r3, [r7, #12]
20008234:	681b      	ldr	r3, [r3, #0]
20008236:	681a      	ldr	r2, [r3, #0]
20008238:	68fb      	ldr	r3, [r7, #12]
2000823a:	681b      	ldr	r3, [r3, #0]
2000823c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20008240:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008242:	68fb      	ldr	r3, [r7, #12]
20008244:	2200      	movs	r2, #0
20008246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
2000824a:	68fb      	ldr	r3, [r7, #12]
2000824c:	681b      	ldr	r3, [r3, #0]
2000824e:	685a      	ldr	r2, [r3, #4]
20008250:	68fb      	ldr	r3, [r7, #12]
20008252:	681b      	ldr	r3, [r3, #0]
20008254:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
20008258:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
2000825a:	7dfb      	ldrb	r3, [r7, #23]
}
2000825c:	4618      	mov	r0, r3
2000825e:	371c      	adds	r7, #28
20008260:	46bd      	mov	sp, r7
20008262:	f85d 7b04 	ldr.w	r7, [sp], #4
20008266:	4770      	bx	lr
20008268:	200093dd 	.word	0x200093dd
2000826c:	2000943d 	.word	0x2000943d
20008270:	20009319 	.word	0x20009319
20008274:	2000937d 	.word	0x2000937d

20008278 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20008278:	b580      	push	{r7, lr}
2000827a:	b086      	sub	sp, #24
2000827c:	af00      	add	r7, sp, #0
2000827e:	60f8      	str	r0, [r7, #12]
20008280:	60b9      	str	r1, [r7, #8]
20008282:	4613      	mov	r3, r2
20008284:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20008286:	2300      	movs	r3, #0
20008288:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
2000828a:	68fb      	ldr	r3, [r7, #12]
2000828c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20008290:	2b01      	cmp	r3, #1
20008292:	d101      	bne.n	20008298 <HAL_SPI_Transmit_DMA+0x20>
20008294:	2302      	movs	r3, #2
20008296:	e097      	b.n	200083c8 <HAL_SPI_Transmit_DMA+0x150>
20008298:	68fb      	ldr	r3, [r7, #12]
2000829a:	2201      	movs	r2, #1
2000829c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
200082a0:	68fb      	ldr	r3, [r7, #12]
200082a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200082a6:	b2db      	uxtb	r3, r3
200082a8:	2b01      	cmp	r3, #1
200082aa:	d002      	beq.n	200082b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
200082ac:	2302      	movs	r3, #2
200082ae:	75fb      	strb	r3, [r7, #23]
    goto error;
200082b0:	e085      	b.n	200083be <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
200082b2:	68bb      	ldr	r3, [r7, #8]
200082b4:	2b00      	cmp	r3, #0
200082b6:	d002      	beq.n	200082be <HAL_SPI_Transmit_DMA+0x46>
200082b8:	88fb      	ldrh	r3, [r7, #6]
200082ba:	2b00      	cmp	r3, #0
200082bc:	d102      	bne.n	200082c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
200082be:	2301      	movs	r3, #1
200082c0:	75fb      	strb	r3, [r7, #23]
    goto error;
200082c2:	e07c      	b.n	200083be <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
200082c4:	68fb      	ldr	r3, [r7, #12]
200082c6:	2203      	movs	r2, #3
200082c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200082cc:	68fb      	ldr	r3, [r7, #12]
200082ce:	2200      	movs	r2, #0
200082d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
200082d2:	68fb      	ldr	r3, [r7, #12]
200082d4:	68ba      	ldr	r2, [r7, #8]
200082d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
200082d8:	68fb      	ldr	r3, [r7, #12]
200082da:	88fa      	ldrh	r2, [r7, #6]
200082dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
200082de:	68fb      	ldr	r3, [r7, #12]
200082e0:	88fa      	ldrh	r2, [r7, #6]
200082e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
200082e4:	68fb      	ldr	r3, [r7, #12]
200082e6:	2200      	movs	r2, #0
200082e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
200082ea:	68fb      	ldr	r3, [r7, #12]
200082ec:	2200      	movs	r2, #0
200082ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
200082f0:	68fb      	ldr	r3, [r7, #12]
200082f2:	2200      	movs	r2, #0
200082f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
200082f6:	68fb      	ldr	r3, [r7, #12]
200082f8:	2200      	movs	r2, #0
200082fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
200082fc:	68fb      	ldr	r3, [r7, #12]
200082fe:	2200      	movs	r2, #0
20008300:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20008302:	68fb      	ldr	r3, [r7, #12]
20008304:	689b      	ldr	r3, [r3, #8]
20008306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000830a:	d10f      	bne.n	2000832c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
2000830c:	68fb      	ldr	r3, [r7, #12]
2000830e:	681b      	ldr	r3, [r3, #0]
20008310:	681a      	ldr	r2, [r3, #0]
20008312:	68fb      	ldr	r3, [r7, #12]
20008314:	681b      	ldr	r3, [r3, #0]
20008316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000831a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
2000831c:	68fb      	ldr	r3, [r7, #12]
2000831e:	681b      	ldr	r3, [r3, #0]
20008320:	681a      	ldr	r2, [r3, #0]
20008322:	68fb      	ldr	r3, [r7, #12]
20008324:	681b      	ldr	r3, [r3, #0]
20008326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
2000832a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
2000832c:	68fb      	ldr	r3, [r7, #12]
2000832e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008330:	4a27      	ldr	r2, [pc, #156]	; (200083d0 <HAL_SPI_Transmit_DMA+0x158>)
20008332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
20008334:	68fb      	ldr	r3, [r7, #12]
20008336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008338:	4a26      	ldr	r2, [pc, #152]	; (200083d4 <HAL_SPI_Transmit_DMA+0x15c>)
2000833a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
2000833c:	68fb      	ldr	r3, [r7, #12]
2000833e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008340:	4a25      	ldr	r2, [pc, #148]	; (200083d8 <HAL_SPI_Transmit_DMA+0x160>)
20008342:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
20008344:	68fb      	ldr	r3, [r7, #12]
20008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008348:	2200      	movs	r2, #0
2000834a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
2000834c:	68fb      	ldr	r3, [r7, #12]
2000834e:	6c98      	ldr	r0, [r3, #72]	; 0x48
20008350:	68fb      	ldr	r3, [r7, #12]
20008352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008354:	4619      	mov	r1, r3
20008356:	68fb      	ldr	r3, [r7, #12]
20008358:	681b      	ldr	r3, [r3, #0]
2000835a:	330c      	adds	r3, #12
2000835c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
2000835e:	68fb      	ldr	r3, [r7, #12]
20008360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008362:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20008364:	f7fa fadd 	bl	20002922 <HAL_DMA_Start_IT>
20008368:	4603      	mov	r3, r0
2000836a:	2b00      	cmp	r3, #0
2000836c:	d008      	beq.n	20008380 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2000836e:	68fb      	ldr	r3, [r7, #12]
20008370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008372:	f043 0210 	orr.w	r2, r3, #16
20008376:	68fb      	ldr	r3, [r7, #12]
20008378:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
2000837a:	2301      	movs	r3, #1
2000837c:	75fb      	strb	r3, [r7, #23]

    goto error;
2000837e:	e01e      	b.n	200083be <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20008380:	68fb      	ldr	r3, [r7, #12]
20008382:	681b      	ldr	r3, [r3, #0]
20008384:	681b      	ldr	r3, [r3, #0]
20008386:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000838a:	2b40      	cmp	r3, #64	; 0x40
2000838c:	d007      	beq.n	2000839e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000838e:	68fb      	ldr	r3, [r7, #12]
20008390:	681b      	ldr	r3, [r3, #0]
20008392:	681a      	ldr	r2, [r3, #0]
20008394:	68fb      	ldr	r3, [r7, #12]
20008396:	681b      	ldr	r3, [r3, #0]
20008398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000839c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
2000839e:	68fb      	ldr	r3, [r7, #12]
200083a0:	681b      	ldr	r3, [r3, #0]
200083a2:	685a      	ldr	r2, [r3, #4]
200083a4:	68fb      	ldr	r3, [r7, #12]
200083a6:	681b      	ldr	r3, [r3, #0]
200083a8:	f042 0220 	orr.w	r2, r2, #32
200083ac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
200083ae:	68fb      	ldr	r3, [r7, #12]
200083b0:	681b      	ldr	r3, [r3, #0]
200083b2:	685a      	ldr	r2, [r3, #4]
200083b4:	68fb      	ldr	r3, [r7, #12]
200083b6:	681b      	ldr	r3, [r3, #0]
200083b8:	f042 0202 	orr.w	r2, r2, #2
200083bc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200083be:	68fb      	ldr	r3, [r7, #12]
200083c0:	2200      	movs	r2, #0
200083c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200083c6:	7dfb      	ldrb	r3, [r7, #23]
}
200083c8:	4618      	mov	r0, r3
200083ca:	3718      	adds	r7, #24
200083cc:	46bd      	mov	sp, r7
200083ce:	bd80      	pop	{r7, pc}
200083d0:	200090c9 	.word	0x200090c9
200083d4:	20008ee9 	.word	0x20008ee9
200083d8:	2000911d 	.word	0x2000911d

200083dc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
200083dc:	b580      	push	{r7, lr}
200083de:	b086      	sub	sp, #24
200083e0:	af00      	add	r7, sp, #0
200083e2:	60f8      	str	r0, [r7, #12]
200083e4:	60b9      	str	r1, [r7, #8]
200083e6:	4613      	mov	r3, r2
200083e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
200083ea:	2300      	movs	r3, #0
200083ec:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
200083ee:	68fb      	ldr	r3, [r7, #12]
200083f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200083f4:	b2db      	uxtb	r3, r3
200083f6:	2b01      	cmp	r3, #1
200083f8:	d002      	beq.n	20008400 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
200083fa:	2302      	movs	r3, #2
200083fc:	75fb      	strb	r3, [r7, #23]
    goto error;
200083fe:	e0a2      	b.n	20008546 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20008400:	68fb      	ldr	r3, [r7, #12]
20008402:	689b      	ldr	r3, [r3, #8]
20008404:	2b00      	cmp	r3, #0
20008406:	d110      	bne.n	2000842a <HAL_SPI_Receive_DMA+0x4e>
20008408:	68fb      	ldr	r3, [r7, #12]
2000840a:	685b      	ldr	r3, [r3, #4]
2000840c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20008410:	d10b      	bne.n	2000842a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20008412:	68fb      	ldr	r3, [r7, #12]
20008414:	2204      	movs	r2, #4
20008416:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
2000841a:	88fb      	ldrh	r3, [r7, #6]
2000841c:	68ba      	ldr	r2, [r7, #8]
2000841e:	68b9      	ldr	r1, [r7, #8]
20008420:	68f8      	ldr	r0, [r7, #12]
20008422:	f000 f89f 	bl	20008564 <HAL_SPI_TransmitReceive_DMA>
20008426:	4603      	mov	r3, r0
20008428:	e092      	b.n	20008550 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
2000842a:	68fb      	ldr	r3, [r7, #12]
2000842c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20008430:	2b01      	cmp	r3, #1
20008432:	d101      	bne.n	20008438 <HAL_SPI_Receive_DMA+0x5c>
20008434:	2302      	movs	r3, #2
20008436:	e08b      	b.n	20008550 <HAL_SPI_Receive_DMA+0x174>
20008438:	68fb      	ldr	r3, [r7, #12]
2000843a:	2201      	movs	r2, #1
2000843c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
20008440:	68bb      	ldr	r3, [r7, #8]
20008442:	2b00      	cmp	r3, #0
20008444:	d002      	beq.n	2000844c <HAL_SPI_Receive_DMA+0x70>
20008446:	88fb      	ldrh	r3, [r7, #6]
20008448:	2b00      	cmp	r3, #0
2000844a:	d102      	bne.n	20008452 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
2000844c:	2301      	movs	r3, #1
2000844e:	75fb      	strb	r3, [r7, #23]
    goto error;
20008450:	e079      	b.n	20008546 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20008452:	68fb      	ldr	r3, [r7, #12]
20008454:	2204      	movs	r2, #4
20008456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2000845a:	68fb      	ldr	r3, [r7, #12]
2000845c:	2200      	movs	r2, #0
2000845e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20008460:	68fb      	ldr	r3, [r7, #12]
20008462:	68ba      	ldr	r2, [r7, #8]
20008464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20008466:	68fb      	ldr	r3, [r7, #12]
20008468:	88fa      	ldrh	r2, [r7, #6]
2000846a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
2000846c:	68fb      	ldr	r3, [r7, #12]
2000846e:	88fa      	ldrh	r2, [r7, #6]
20008470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20008472:	68fb      	ldr	r3, [r7, #12]
20008474:	2200      	movs	r2, #0
20008476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20008478:	68fb      	ldr	r3, [r7, #12]
2000847a:	2200      	movs	r2, #0
2000847c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
2000847e:	68fb      	ldr	r3, [r7, #12]
20008480:	2200      	movs	r2, #0
20008482:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
20008484:	68fb      	ldr	r3, [r7, #12]
20008486:	2200      	movs	r2, #0
20008488:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000848a:	68fb      	ldr	r3, [r7, #12]
2000848c:	689b      	ldr	r3, [r3, #8]
2000848e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20008492:	d10f      	bne.n	200084b4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20008494:	68fb      	ldr	r3, [r7, #12]
20008496:	681b      	ldr	r3, [r3, #0]
20008498:	681a      	ldr	r2, [r3, #0]
2000849a:	68fb      	ldr	r3, [r7, #12]
2000849c:	681b      	ldr	r3, [r3, #0]
2000849e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200084a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
200084a4:	68fb      	ldr	r3, [r7, #12]
200084a6:	681b      	ldr	r3, [r3, #0]
200084a8:	681a      	ldr	r2, [r3, #0]
200084aa:	68fb      	ldr	r3, [r7, #12]
200084ac:	681b      	ldr	r3, [r3, #0]
200084ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200084b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
200084b4:	68fb      	ldr	r3, [r7, #12]
200084b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200084b8:	4a27      	ldr	r2, [pc, #156]	; (20008558 <HAL_SPI_Receive_DMA+0x17c>)
200084ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
200084bc:	68fb      	ldr	r3, [r7, #12]
200084be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200084c0:	4a26      	ldr	r2, [pc, #152]	; (2000855c <HAL_SPI_Receive_DMA+0x180>)
200084c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
200084c4:	68fb      	ldr	r3, [r7, #12]
200084c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200084c8:	4a25      	ldr	r2, [pc, #148]	; (20008560 <HAL_SPI_Receive_DMA+0x184>)
200084ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
200084cc:	68fb      	ldr	r3, [r7, #12]
200084ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200084d0:	2200      	movs	r2, #0
200084d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
200084d4:	68fb      	ldr	r3, [r7, #12]
200084d6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
200084d8:	68fb      	ldr	r3, [r7, #12]
200084da:	681b      	ldr	r3, [r3, #0]
200084dc:	330c      	adds	r3, #12
200084de:	4619      	mov	r1, r3
200084e0:	68fb      	ldr	r3, [r7, #12]
200084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200084e4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
200084e6:	68fb      	ldr	r3, [r7, #12]
200084e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200084ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
200084ec:	f7fa fa19 	bl	20002922 <HAL_DMA_Start_IT>
200084f0:	4603      	mov	r3, r0
200084f2:	2b00      	cmp	r3, #0
200084f4:	d008      	beq.n	20008508 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
200084f6:	68fb      	ldr	r3, [r7, #12]
200084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200084fa:	f043 0210 	orr.w	r2, r3, #16
200084fe:	68fb      	ldr	r3, [r7, #12]
20008500:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20008502:	2301      	movs	r3, #1
20008504:	75fb      	strb	r3, [r7, #23]

    goto error;
20008506:	e01e      	b.n	20008546 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20008508:	68fb      	ldr	r3, [r7, #12]
2000850a:	681b      	ldr	r3, [r3, #0]
2000850c:	681b      	ldr	r3, [r3, #0]
2000850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008512:	2b40      	cmp	r3, #64	; 0x40
20008514:	d007      	beq.n	20008526 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008516:	68fb      	ldr	r3, [r7, #12]
20008518:	681b      	ldr	r3, [r3, #0]
2000851a:	681a      	ldr	r2, [r3, #0]
2000851c:	68fb      	ldr	r3, [r7, #12]
2000851e:	681b      	ldr	r3, [r3, #0]
20008520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20008524:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20008526:	68fb      	ldr	r3, [r7, #12]
20008528:	681b      	ldr	r3, [r3, #0]
2000852a:	685a      	ldr	r2, [r3, #4]
2000852c:	68fb      	ldr	r3, [r7, #12]
2000852e:	681b      	ldr	r3, [r3, #0]
20008530:	f042 0220 	orr.w	r2, r2, #32
20008534:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20008536:	68fb      	ldr	r3, [r7, #12]
20008538:	681b      	ldr	r3, [r3, #0]
2000853a:	685a      	ldr	r2, [r3, #4]
2000853c:	68fb      	ldr	r3, [r7, #12]
2000853e:	681b      	ldr	r3, [r3, #0]
20008540:	f042 0201 	orr.w	r2, r2, #1
20008544:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008546:	68fb      	ldr	r3, [r7, #12]
20008548:	2200      	movs	r2, #0
2000854a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2000854e:	7dfb      	ldrb	r3, [r7, #23]
}
20008550:	4618      	mov	r0, r3
20008552:	3718      	adds	r7, #24
20008554:	46bd      	mov	sp, r7
20008556:	bd80      	pop	{r7, pc}
20008558:	200090e5 	.word	0x200090e5
2000855c:	20008f91 	.word	0x20008f91
20008560:	2000911d 	.word	0x2000911d

20008564 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
20008564:	b580      	push	{r7, lr}
20008566:	b086      	sub	sp, #24
20008568:	af00      	add	r7, sp, #0
2000856a:	60f8      	str	r0, [r7, #12]
2000856c:	60b9      	str	r1, [r7, #8]
2000856e:	607a      	str	r2, [r7, #4]
20008570:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
20008572:	2300      	movs	r3, #0
20008574:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
20008576:	68fb      	ldr	r3, [r7, #12]
20008578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2000857c:	2b01      	cmp	r3, #1
2000857e:	d101      	bne.n	20008584 <HAL_SPI_TransmitReceive_DMA+0x20>
20008580:	2302      	movs	r3, #2
20008582:	e0db      	b.n	2000873c <HAL_SPI_TransmitReceive_DMA+0x1d8>
20008584:	68fb      	ldr	r3, [r7, #12]
20008586:	2201      	movs	r2, #1
20008588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
2000858c:	68fb      	ldr	r3, [r7, #12]
2000858e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008592:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
20008594:	68fb      	ldr	r3, [r7, #12]
20008596:	685b      	ldr	r3, [r3, #4]
20008598:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
2000859a:	7dbb      	ldrb	r3, [r7, #22]
2000859c:	2b01      	cmp	r3, #1
2000859e:	d00d      	beq.n	200085bc <HAL_SPI_TransmitReceive_DMA+0x58>
200085a0:	693b      	ldr	r3, [r7, #16]
200085a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200085a6:	d106      	bne.n	200085b6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
200085a8:	68fb      	ldr	r3, [r7, #12]
200085aa:	689b      	ldr	r3, [r3, #8]
200085ac:	2b00      	cmp	r3, #0
200085ae:	d102      	bne.n	200085b6 <HAL_SPI_TransmitReceive_DMA+0x52>
200085b0:	7dbb      	ldrb	r3, [r7, #22]
200085b2:	2b04      	cmp	r3, #4
200085b4:	d002      	beq.n	200085bc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
200085b6:	2302      	movs	r3, #2
200085b8:	75fb      	strb	r3, [r7, #23]
    goto error;
200085ba:	e0ba      	b.n	20008732 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
200085bc:	68bb      	ldr	r3, [r7, #8]
200085be:	2b00      	cmp	r3, #0
200085c0:	d005      	beq.n	200085ce <HAL_SPI_TransmitReceive_DMA+0x6a>
200085c2:	687b      	ldr	r3, [r7, #4]
200085c4:	2b00      	cmp	r3, #0
200085c6:	d002      	beq.n	200085ce <HAL_SPI_TransmitReceive_DMA+0x6a>
200085c8:	887b      	ldrh	r3, [r7, #2]
200085ca:	2b00      	cmp	r3, #0
200085cc:	d102      	bne.n	200085d4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
200085ce:	2301      	movs	r3, #1
200085d0:	75fb      	strb	r3, [r7, #23]
    goto error;
200085d2:	e0ae      	b.n	20008732 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
200085d4:	68fb      	ldr	r3, [r7, #12]
200085d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200085da:	b2db      	uxtb	r3, r3
200085dc:	2b04      	cmp	r3, #4
200085de:	d003      	beq.n	200085e8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
200085e0:	68fb      	ldr	r3, [r7, #12]
200085e2:	2205      	movs	r2, #5
200085e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200085e8:	68fb      	ldr	r3, [r7, #12]
200085ea:	2200      	movs	r2, #0
200085ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
200085ee:	68fb      	ldr	r3, [r7, #12]
200085f0:	68ba      	ldr	r2, [r7, #8]
200085f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
200085f4:	68fb      	ldr	r3, [r7, #12]
200085f6:	887a      	ldrh	r2, [r7, #2]
200085f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
200085fa:	68fb      	ldr	r3, [r7, #12]
200085fc:	887a      	ldrh	r2, [r7, #2]
200085fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20008600:	68fb      	ldr	r3, [r7, #12]
20008602:	687a      	ldr	r2, [r7, #4]
20008604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20008606:	68fb      	ldr	r3, [r7, #12]
20008608:	887a      	ldrh	r2, [r7, #2]
2000860a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
2000860c:	68fb      	ldr	r3, [r7, #12]
2000860e:	887a      	ldrh	r2, [r7, #2]
20008610:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20008612:	68fb      	ldr	r3, [r7, #12]
20008614:	2200      	movs	r2, #0
20008616:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20008618:	68fb      	ldr	r3, [r7, #12]
2000861a:	2200      	movs	r2, #0
2000861c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
2000861e:	68fb      	ldr	r3, [r7, #12]
20008620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008624:	b2db      	uxtb	r3, r3
20008626:	2b04      	cmp	r3, #4
20008628:	d108      	bne.n	2000863c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
2000862a:	68fb      	ldr	r3, [r7, #12]
2000862c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000862e:	4a45      	ldr	r2, [pc, #276]	; (20008744 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
20008630:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
20008632:	68fb      	ldr	r3, [r7, #12]
20008634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008636:	4a44      	ldr	r2, [pc, #272]	; (20008748 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
20008638:	63da      	str	r2, [r3, #60]	; 0x3c
2000863a:	e007      	b.n	2000864c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
2000863c:	68fb      	ldr	r3, [r7, #12]
2000863e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008640:	4a42      	ldr	r2, [pc, #264]	; (2000874c <HAL_SPI_TransmitReceive_DMA+0x1e8>)
20008642:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
20008644:	68fb      	ldr	r3, [r7, #12]
20008646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008648:	4a41      	ldr	r2, [pc, #260]	; (20008750 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
2000864a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
2000864c:	68fb      	ldr	r3, [r7, #12]
2000864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008650:	4a40      	ldr	r2, [pc, #256]	; (20008754 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
20008652:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
20008654:	68fb      	ldr	r3, [r7, #12]
20008656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008658:	2200      	movs	r2, #0
2000865a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
2000865c:	68fb      	ldr	r3, [r7, #12]
2000865e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
20008660:	68fb      	ldr	r3, [r7, #12]
20008662:	681b      	ldr	r3, [r3, #0]
20008664:	330c      	adds	r3, #12
20008666:	4619      	mov	r1, r3
20008668:	68fb      	ldr	r3, [r7, #12]
2000866a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000866c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
2000866e:	68fb      	ldr	r3, [r7, #12]
20008670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008672:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20008674:	f7fa f955 	bl	20002922 <HAL_DMA_Start_IT>
20008678:	4603      	mov	r3, r0
2000867a:	2b00      	cmp	r3, #0
2000867c:	d008      	beq.n	20008690 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2000867e:	68fb      	ldr	r3, [r7, #12]
20008680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008682:	f043 0210 	orr.w	r2, r3, #16
20008686:	68fb      	ldr	r3, [r7, #12]
20008688:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
2000868a:	2301      	movs	r3, #1
2000868c:	75fb      	strb	r3, [r7, #23]

    goto error;
2000868e:	e050      	b.n	20008732 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20008690:	68fb      	ldr	r3, [r7, #12]
20008692:	681b      	ldr	r3, [r3, #0]
20008694:	685a      	ldr	r2, [r3, #4]
20008696:	68fb      	ldr	r3, [r7, #12]
20008698:	681b      	ldr	r3, [r3, #0]
2000869a:	f042 0201 	orr.w	r2, r2, #1
2000869e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
200086a0:	68fb      	ldr	r3, [r7, #12]
200086a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200086a4:	2200      	movs	r2, #0
200086a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
200086a8:	68fb      	ldr	r3, [r7, #12]
200086aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200086ac:	2200      	movs	r2, #0
200086ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
200086b0:	68fb      	ldr	r3, [r7, #12]
200086b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200086b4:	2200      	movs	r2, #0
200086b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
200086b8:	68fb      	ldr	r3, [r7, #12]
200086ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200086bc:	2200      	movs	r2, #0
200086be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
200086c0:	68fb      	ldr	r3, [r7, #12]
200086c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
200086c4:	68fb      	ldr	r3, [r7, #12]
200086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200086c8:	4619      	mov	r1, r3
200086ca:	68fb      	ldr	r3, [r7, #12]
200086cc:	681b      	ldr	r3, [r3, #0]
200086ce:	330c      	adds	r3, #12
200086d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
200086d2:	68fb      	ldr	r3, [r7, #12]
200086d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200086d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
200086d8:	f7fa f923 	bl	20002922 <HAL_DMA_Start_IT>
200086dc:	4603      	mov	r3, r0
200086de:	2b00      	cmp	r3, #0
200086e0:	d008      	beq.n	200086f4 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
200086e2:	68fb      	ldr	r3, [r7, #12]
200086e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200086e6:	f043 0210 	orr.w	r2, r3, #16
200086ea:	68fb      	ldr	r3, [r7, #12]
200086ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
200086ee:	2301      	movs	r3, #1
200086f0:	75fb      	strb	r3, [r7, #23]

    goto error;
200086f2:	e01e      	b.n	20008732 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200086f4:	68fb      	ldr	r3, [r7, #12]
200086f6:	681b      	ldr	r3, [r3, #0]
200086f8:	681b      	ldr	r3, [r3, #0]
200086fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
200086fe:	2b40      	cmp	r3, #64	; 0x40
20008700:	d007      	beq.n	20008712 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008702:	68fb      	ldr	r3, [r7, #12]
20008704:	681b      	ldr	r3, [r3, #0]
20008706:	681a      	ldr	r2, [r3, #0]
20008708:	68fb      	ldr	r3, [r7, #12]
2000870a:	681b      	ldr	r3, [r3, #0]
2000870c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20008710:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20008712:	68fb      	ldr	r3, [r7, #12]
20008714:	681b      	ldr	r3, [r3, #0]
20008716:	685a      	ldr	r2, [r3, #4]
20008718:	68fb      	ldr	r3, [r7, #12]
2000871a:	681b      	ldr	r3, [r3, #0]
2000871c:	f042 0220 	orr.w	r2, r2, #32
20008720:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20008722:	68fb      	ldr	r3, [r7, #12]
20008724:	681b      	ldr	r3, [r3, #0]
20008726:	685a      	ldr	r2, [r3, #4]
20008728:	68fb      	ldr	r3, [r7, #12]
2000872a:	681b      	ldr	r3, [r3, #0]
2000872c:	f042 0202 	orr.w	r2, r2, #2
20008730:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008732:	68fb      	ldr	r3, [r7, #12]
20008734:	2200      	movs	r2, #0
20008736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2000873a:	7dfb      	ldrb	r3, [r7, #23]
}
2000873c:	4618      	mov	r0, r3
2000873e:	3718      	adds	r7, #24
20008740:	46bd      	mov	sp, r7
20008742:	bd80      	pop	{r7, pc}
20008744:	200090e5 	.word	0x200090e5
20008748:	20008f91 	.word	0x20008f91
2000874c:	20009101 	.word	0x20009101
20008750:	20009039 	.word	0x20009039
20008754:	2000911d 	.word	0x2000911d

20008758 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
20008758:	b580      	push	{r7, lr}
2000875a:	b088      	sub	sp, #32
2000875c:	af00      	add	r7, sp, #0
2000875e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
20008760:	2300      	movs	r3, #0
20008762:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20008764:	4b6e      	ldr	r3, [pc, #440]	; (20008920 <HAL_SPI_Abort+0x1c8>)
20008766:	681b      	ldr	r3, [r3, #0]
20008768:	4a6e      	ldr	r2, [pc, #440]	; (20008924 <HAL_SPI_Abort+0x1cc>)
2000876a:	fba2 2303 	umull	r2, r3, r2, r3
2000876e:	0a5b      	lsrs	r3, r3, #9
20008770:	2264      	movs	r2, #100	; 0x64
20008772:	fb02 f303 	mul.w	r3, r2, r3
20008776:	617b      	str	r3, [r7, #20]
  count = resetcount;
20008778:	697b      	ldr	r3, [r7, #20]
2000877a:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
2000877c:	687b      	ldr	r3, [r7, #4]
2000877e:	681b      	ldr	r3, [r3, #0]
20008780:	685a      	ldr	r2, [r3, #4]
20008782:	687b      	ldr	r3, [r7, #4]
20008784:	681b      	ldr	r3, [r3, #0]
20008786:	f022 0220 	bic.w	r2, r2, #32
2000878a:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
2000878c:	687b      	ldr	r3, [r7, #4]
2000878e:	681b      	ldr	r3, [r3, #0]
20008790:	685b      	ldr	r3, [r3, #4]
20008792:	f003 0380 	and.w	r3, r3, #128	; 0x80
20008796:	2b80      	cmp	r3, #128	; 0x80
20008798:	d117      	bne.n	200087ca <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
2000879a:	687b      	ldr	r3, [r7, #4]
2000879c:	4a62      	ldr	r2, [pc, #392]	; (20008928 <HAL_SPI_Abort+0x1d0>)
2000879e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200087a0:	69bb      	ldr	r3, [r7, #24]
200087a2:	2b00      	cmp	r3, #0
200087a4:	d106      	bne.n	200087b4 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200087a6:	687b      	ldr	r3, [r7, #4]
200087a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200087aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200087ae:	687b      	ldr	r3, [r7, #4]
200087b0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
200087b2:	e008      	b.n	200087c6 <HAL_SPI_Abort+0x6e>
      }
      count--;
200087b4:	69bb      	ldr	r3, [r7, #24]
200087b6:	3b01      	subs	r3, #1
200087b8:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
200087ba:	687b      	ldr	r3, [r7, #4]
200087bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200087c0:	b2db      	uxtb	r3, r3
200087c2:	2b07      	cmp	r3, #7
200087c4:	d1ec      	bne.n	200087a0 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
200087c6:	697b      	ldr	r3, [r7, #20]
200087c8:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
200087ca:	687b      	ldr	r3, [r7, #4]
200087cc:	681b      	ldr	r3, [r3, #0]
200087ce:	685b      	ldr	r3, [r3, #4]
200087d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
200087d4:	2b40      	cmp	r3, #64	; 0x40
200087d6:	d117      	bne.n	20008808 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
200087d8:	687b      	ldr	r3, [r7, #4]
200087da:	4a54      	ldr	r2, [pc, #336]	; (2000892c <HAL_SPI_Abort+0x1d4>)
200087dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200087de:	69bb      	ldr	r3, [r7, #24]
200087e0:	2b00      	cmp	r3, #0
200087e2:	d106      	bne.n	200087f2 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200087e4:	687b      	ldr	r3, [r7, #4]
200087e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200087e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200087ec:	687b      	ldr	r3, [r7, #4]
200087ee:	655a      	str	r2, [r3, #84]	; 0x54
        break;
200087f0:	e008      	b.n	20008804 <HAL_SPI_Abort+0xac>
      }
      count--;
200087f2:	69bb      	ldr	r3, [r7, #24]
200087f4:	3b01      	subs	r3, #1
200087f6:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
200087f8:	687b      	ldr	r3, [r7, #4]
200087fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200087fe:	b2db      	uxtb	r3, r3
20008800:	2b07      	cmp	r3, #7
20008802:	d1ec      	bne.n	200087de <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
20008804:	697b      	ldr	r3, [r7, #20]
20008806:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20008808:	687b      	ldr	r3, [r7, #4]
2000880a:	681b      	ldr	r3, [r3, #0]
2000880c:	685b      	ldr	r3, [r3, #4]
2000880e:	f003 0302 	and.w	r3, r3, #2
20008812:	2b02      	cmp	r3, #2
20008814:	d12e      	bne.n	20008874 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
20008816:	687b      	ldr	r3, [r7, #4]
20008818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000881a:	2b00      	cmp	r3, #0
2000881c:	d02a      	beq.n	20008874 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
2000881e:	687b      	ldr	r3, [r7, #4]
20008820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008822:	2200      	movs	r2, #0
20008824:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
20008826:	687b      	ldr	r3, [r7, #4]
20008828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000882a:	4618      	mov	r0, r3
2000882c:	f7fa f8d1 	bl	200029d2 <HAL_DMA_Abort>
20008830:	4603      	mov	r3, r0
20008832:	2b00      	cmp	r3, #0
20008834:	d002      	beq.n	2000883c <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20008836:	687b      	ldr	r3, [r7, #4]
20008838:	2240      	movs	r2, #64	; 0x40
2000883a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
2000883c:	687b      	ldr	r3, [r7, #4]
2000883e:	681b      	ldr	r3, [r3, #0]
20008840:	685a      	ldr	r2, [r3, #4]
20008842:	687b      	ldr	r3, [r7, #4]
20008844:	681b      	ldr	r3, [r3, #0]
20008846:	f022 0202 	bic.w	r2, r2, #2
2000884a:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
2000884c:	69bb      	ldr	r3, [r7, #24]
2000884e:	2b00      	cmp	r3, #0
20008850:	d106      	bne.n	20008860 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008852:	687b      	ldr	r3, [r7, #4]
20008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000885a:	687b      	ldr	r3, [r7, #4]
2000885c:	655a      	str	r2, [r3, #84]	; 0x54
          break;
2000885e:	e009      	b.n	20008874 <HAL_SPI_Abort+0x11c>
        }
        count--;
20008860:	69bb      	ldr	r3, [r7, #24]
20008862:	3b01      	subs	r3, #1
20008864:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20008866:	687b      	ldr	r3, [r7, #4]
20008868:	681b      	ldr	r3, [r3, #0]
2000886a:	689b      	ldr	r3, [r3, #8]
2000886c:	f003 0302 	and.w	r3, r3, #2
20008870:	2b00      	cmp	r3, #0
20008872:	d0eb      	beq.n	2000884c <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20008874:	687b      	ldr	r3, [r7, #4]
20008876:	681b      	ldr	r3, [r3, #0]
20008878:	685b      	ldr	r3, [r3, #4]
2000887a:	f003 0301 	and.w	r3, r3, #1
2000887e:	2b01      	cmp	r3, #1
20008880:	d122      	bne.n	200088c8 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
20008882:	687b      	ldr	r3, [r7, #4]
20008884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008886:	2b00      	cmp	r3, #0
20008888:	d01e      	beq.n	200088c8 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
2000888a:	687b      	ldr	r3, [r7, #4]
2000888c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000888e:	2200      	movs	r2, #0
20008890:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
20008892:	687b      	ldr	r3, [r7, #4]
20008894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008896:	4618      	mov	r0, r3
20008898:	f7fa f89b 	bl	200029d2 <HAL_DMA_Abort>
2000889c:	4603      	mov	r3, r0
2000889e:	2b00      	cmp	r3, #0
200088a0:	d002      	beq.n	200088a8 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
200088a2:	687b      	ldr	r3, [r7, #4]
200088a4:	2240      	movs	r2, #64	; 0x40
200088a6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
200088a8:	687b      	ldr	r3, [r7, #4]
200088aa:	681b      	ldr	r3, [r3, #0]
200088ac:	681a      	ldr	r2, [r3, #0]
200088ae:	687b      	ldr	r3, [r7, #4]
200088b0:	681b      	ldr	r3, [r3, #0]
200088b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200088b6:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
200088b8:	687b      	ldr	r3, [r7, #4]
200088ba:	681b      	ldr	r3, [r3, #0]
200088bc:	685a      	ldr	r2, [r3, #4]
200088be:	687b      	ldr	r3, [r7, #4]
200088c0:	681b      	ldr	r3, [r3, #0]
200088c2:	f022 0201 	bic.w	r2, r2, #1
200088c6:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
200088c8:	687b      	ldr	r3, [r7, #4]
200088ca:	2200      	movs	r2, #0
200088cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
200088ce:	687b      	ldr	r3, [r7, #4]
200088d0:	2200      	movs	r2, #0
200088d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
200088d4:	687b      	ldr	r3, [r7, #4]
200088d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200088d8:	2b40      	cmp	r3, #64	; 0x40
200088da:	d102      	bne.n	200088e2 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
200088dc:	2301      	movs	r3, #1
200088de:	77fb      	strb	r3, [r7, #31]
200088e0:	e002      	b.n	200088e8 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
200088e2:	687b      	ldr	r3, [r7, #4]
200088e4:	2200      	movs	r2, #0
200088e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
200088e8:	2300      	movs	r3, #0
200088ea:	613b      	str	r3, [r7, #16]
200088ec:	687b      	ldr	r3, [r7, #4]
200088ee:	681b      	ldr	r3, [r3, #0]
200088f0:	68db      	ldr	r3, [r3, #12]
200088f2:	613b      	str	r3, [r7, #16]
200088f4:	687b      	ldr	r3, [r7, #4]
200088f6:	681b      	ldr	r3, [r3, #0]
200088f8:	689b      	ldr	r3, [r3, #8]
200088fa:	613b      	str	r3, [r7, #16]
200088fc:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
200088fe:	2300      	movs	r3, #0
20008900:	60fb      	str	r3, [r7, #12]
20008902:	687b      	ldr	r3, [r7, #4]
20008904:	681b      	ldr	r3, [r3, #0]
20008906:	689b      	ldr	r3, [r3, #8]
20008908:	60fb      	str	r3, [r7, #12]
2000890a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
2000890c:	687b      	ldr	r3, [r7, #4]
2000890e:	2201      	movs	r2, #1
20008910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
20008914:	7ffb      	ldrb	r3, [r7, #31]
}
20008916:	4618      	mov	r0, r3
20008918:	3720      	adds	r7, #32
2000891a:	46bd      	mov	sp, r7
2000891c:	bd80      	pop	{r7, pc}
2000891e:	bf00      	nop
20008920:	200003b0 	.word	0x200003b0
20008924:	057619f1 	.word	0x057619f1
20008928:	20009af5 	.word	0x20009af5
2000892c:	20009a65 	.word	0x20009a65

20008930 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
20008930:	b580      	push	{r7, lr}
20008932:	b088      	sub	sp, #32
20008934:	af00      	add	r7, sp, #0
20008936:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
20008938:	2300      	movs	r3, #0
2000893a:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
2000893c:	2301      	movs	r3, #1
2000893e:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20008940:	4b72      	ldr	r3, [pc, #456]	; (20008b0c <HAL_SPI_Abort_IT+0x1dc>)
20008942:	681b      	ldr	r3, [r3, #0]
20008944:	4a72      	ldr	r2, [pc, #456]	; (20008b10 <HAL_SPI_Abort_IT+0x1e0>)
20008946:	fba2 2303 	umull	r2, r3, r2, r3
2000894a:	0a5b      	lsrs	r3, r3, #9
2000894c:	2264      	movs	r2, #100	; 0x64
2000894e:	fb02 f303 	mul.w	r3, r2, r3
20008952:	613b      	str	r3, [r7, #16]
  count = resetcount;
20008954:	693b      	ldr	r3, [r7, #16]
20008956:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
20008958:	687b      	ldr	r3, [r7, #4]
2000895a:	681b      	ldr	r3, [r3, #0]
2000895c:	685a      	ldr	r2, [r3, #4]
2000895e:	687b      	ldr	r3, [r7, #4]
20008960:	681b      	ldr	r3, [r3, #0]
20008962:	f022 0220 	bic.w	r2, r2, #32
20008966:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
20008968:	687b      	ldr	r3, [r7, #4]
2000896a:	681b      	ldr	r3, [r3, #0]
2000896c:	685b      	ldr	r3, [r3, #4]
2000896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
20008972:	2b80      	cmp	r3, #128	; 0x80
20008974:	d117      	bne.n	200089a6 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
20008976:	687b      	ldr	r3, [r7, #4]
20008978:	4a66      	ldr	r2, [pc, #408]	; (20008b14 <HAL_SPI_Abort_IT+0x1e4>)
2000897a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
2000897c:	697b      	ldr	r3, [r7, #20]
2000897e:	2b00      	cmp	r3, #0
20008980:	d106      	bne.n	20008990 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008982:	687b      	ldr	r3, [r7, #4]
20008984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000898a:	687b      	ldr	r3, [r7, #4]
2000898c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
2000898e:	e008      	b.n	200089a2 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
20008990:	697b      	ldr	r3, [r7, #20]
20008992:	3b01      	subs	r3, #1
20008994:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20008996:	687b      	ldr	r3, [r7, #4]
20008998:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000899c:	b2db      	uxtb	r3, r3
2000899e:	2b07      	cmp	r3, #7
200089a0:	d1ec      	bne.n	2000897c <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
200089a2:	693b      	ldr	r3, [r7, #16]
200089a4:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
200089a6:	687b      	ldr	r3, [r7, #4]
200089a8:	681b      	ldr	r3, [r3, #0]
200089aa:	685b      	ldr	r3, [r3, #4]
200089ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
200089b0:	2b40      	cmp	r3, #64	; 0x40
200089b2:	d117      	bne.n	200089e4 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
200089b4:	687b      	ldr	r3, [r7, #4]
200089b6:	4a58      	ldr	r2, [pc, #352]	; (20008b18 <HAL_SPI_Abort_IT+0x1e8>)
200089b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200089ba:	697b      	ldr	r3, [r7, #20]
200089bc:	2b00      	cmp	r3, #0
200089be:	d106      	bne.n	200089ce <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200089c0:	687b      	ldr	r3, [r7, #4]
200089c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200089c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200089c8:	687b      	ldr	r3, [r7, #4]
200089ca:	655a      	str	r2, [r3, #84]	; 0x54
        break;
200089cc:	e008      	b.n	200089e0 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
200089ce:	697b      	ldr	r3, [r7, #20]
200089d0:	3b01      	subs	r3, #1
200089d2:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
200089d4:	687b      	ldr	r3, [r7, #4]
200089d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200089da:	b2db      	uxtb	r3, r3
200089dc:	2b07      	cmp	r3, #7
200089de:	d1ec      	bne.n	200089ba <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
200089e0:	693b      	ldr	r3, [r7, #16]
200089e2:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
200089e4:	687b      	ldr	r3, [r7, #4]
200089e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200089e8:	2b00      	cmp	r3, #0
200089ea:	d00f      	beq.n	20008a0c <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
200089ec:	687b      	ldr	r3, [r7, #4]
200089ee:	681b      	ldr	r3, [r3, #0]
200089f0:	685b      	ldr	r3, [r3, #4]
200089f2:	f003 0302 	and.w	r3, r3, #2
200089f6:	2b02      	cmp	r3, #2
200089f8:	d104      	bne.n	20008a04 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
200089fa:	687b      	ldr	r3, [r7, #4]
200089fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200089fe:	4a47      	ldr	r2, [pc, #284]	; (20008b1c <HAL_SPI_Abort_IT+0x1ec>)
20008a00:	651a      	str	r2, [r3, #80]	; 0x50
20008a02:	e003      	b.n	20008a0c <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
20008a04:	687b      	ldr	r3, [r7, #4]
20008a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008a08:	2200      	movs	r2, #0
20008a0a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
20008a0c:	687b      	ldr	r3, [r7, #4]
20008a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008a10:	2b00      	cmp	r3, #0
20008a12:	d00f      	beq.n	20008a34 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20008a14:	687b      	ldr	r3, [r7, #4]
20008a16:	681b      	ldr	r3, [r3, #0]
20008a18:	685b      	ldr	r3, [r3, #4]
20008a1a:	f003 0301 	and.w	r3, r3, #1
20008a1e:	2b01      	cmp	r3, #1
20008a20:	d104      	bne.n	20008a2c <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
20008a22:	687b      	ldr	r3, [r7, #4]
20008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008a26:	4a3e      	ldr	r2, [pc, #248]	; (20008b20 <HAL_SPI_Abort_IT+0x1f0>)
20008a28:	651a      	str	r2, [r3, #80]	; 0x50
20008a2a:	e003      	b.n	20008a34 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
20008a2c:	687b      	ldr	r3, [r7, #4]
20008a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008a30:	2200      	movs	r2, #0
20008a32:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20008a34:	687b      	ldr	r3, [r7, #4]
20008a36:	681b      	ldr	r3, [r3, #0]
20008a38:	685b      	ldr	r3, [r3, #4]
20008a3a:	f003 0302 	and.w	r3, r3, #2
20008a3e:	2b02      	cmp	r3, #2
20008a40:	d115      	bne.n	20008a6e <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
20008a42:	687b      	ldr	r3, [r7, #4]
20008a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008a46:	2b00      	cmp	r3, #0
20008a48:	d011      	beq.n	20008a6e <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
20008a4a:	687b      	ldr	r3, [r7, #4]
20008a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008a4e:	4618      	mov	r0, r3
20008a50:	f7fa f82f 	bl	20002ab2 <HAL_DMA_Abort_IT>
20008a54:	4603      	mov	r3, r0
20008a56:	2b00      	cmp	r3, #0
20008a58:	d007      	beq.n	20008a6a <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
20008a5a:	687b      	ldr	r3, [r7, #4]
20008a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008a5e:	2200      	movs	r2, #0
20008a60:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20008a62:	687b      	ldr	r3, [r7, #4]
20008a64:	2240      	movs	r2, #64	; 0x40
20008a66:	655a      	str	r2, [r3, #84]	; 0x54
20008a68:	e001      	b.n	20008a6e <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
20008a6a:	2300      	movs	r3, #0
20008a6c:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20008a6e:	687b      	ldr	r3, [r7, #4]
20008a70:	681b      	ldr	r3, [r3, #0]
20008a72:	685b      	ldr	r3, [r3, #4]
20008a74:	f003 0301 	and.w	r3, r3, #1
20008a78:	2b01      	cmp	r3, #1
20008a7a:	d115      	bne.n	20008aa8 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
20008a7c:	687b      	ldr	r3, [r7, #4]
20008a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008a80:	2b00      	cmp	r3, #0
20008a82:	d011      	beq.n	20008aa8 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
20008a84:	687b      	ldr	r3, [r7, #4]
20008a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008a88:	4618      	mov	r0, r3
20008a8a:	f7fa f812 	bl	20002ab2 <HAL_DMA_Abort_IT>
20008a8e:	4603      	mov	r3, r0
20008a90:	2b00      	cmp	r3, #0
20008a92:	d007      	beq.n	20008aa4 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
20008a94:	687b      	ldr	r3, [r7, #4]
20008a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008a98:	2200      	movs	r2, #0
20008a9a:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20008a9c:	687b      	ldr	r3, [r7, #4]
20008a9e:	2240      	movs	r2, #64	; 0x40
20008aa0:	655a      	str	r2, [r3, #84]	; 0x54
20008aa2:	e001      	b.n	20008aa8 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
20008aa4:	2300      	movs	r3, #0
20008aa6:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
20008aa8:	69bb      	ldr	r3, [r7, #24]
20008aaa:	2b01      	cmp	r3, #1
20008aac:	d128      	bne.n	20008b00 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
20008aae:	687b      	ldr	r3, [r7, #4]
20008ab0:	2200      	movs	r2, #0
20008ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
20008ab4:	687b      	ldr	r3, [r7, #4]
20008ab6:	2200      	movs	r2, #0
20008ab8:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
20008aba:	687b      	ldr	r3, [r7, #4]
20008abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008abe:	2b40      	cmp	r3, #64	; 0x40
20008ac0:	d102      	bne.n	20008ac8 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
20008ac2:	2301      	movs	r3, #1
20008ac4:	77fb      	strb	r3, [r7, #31]
20008ac6:	e002      	b.n	20008ace <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008ac8:	687b      	ldr	r3, [r7, #4]
20008aca:	2200      	movs	r2, #0
20008acc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008ace:	2300      	movs	r3, #0
20008ad0:	60fb      	str	r3, [r7, #12]
20008ad2:	687b      	ldr	r3, [r7, #4]
20008ad4:	681b      	ldr	r3, [r3, #0]
20008ad6:	68db      	ldr	r3, [r3, #12]
20008ad8:	60fb      	str	r3, [r7, #12]
20008ada:	687b      	ldr	r3, [r7, #4]
20008adc:	681b      	ldr	r3, [r3, #0]
20008ade:	689b      	ldr	r3, [r3, #8]
20008ae0:	60fb      	str	r3, [r7, #12]
20008ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
20008ae4:	2300      	movs	r3, #0
20008ae6:	60bb      	str	r3, [r7, #8]
20008ae8:	687b      	ldr	r3, [r7, #4]
20008aea:	681b      	ldr	r3, [r3, #0]
20008aec:	689b      	ldr	r3, [r3, #8]
20008aee:	60bb      	str	r3, [r7, #8]
20008af0:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
20008af2:	687b      	ldr	r3, [r7, #4]
20008af4:	2201      	movs	r2, #1
20008af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
20008afa:	6878      	ldr	r0, [r7, #4]
20008afc:	f000 f9d0 	bl	20008ea0 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
20008b00:	7ffb      	ldrb	r3, [r7, #31]
}
20008b02:	4618      	mov	r0, r3
20008b04:	3720      	adds	r7, #32
20008b06:	46bd      	mov	sp, r7
20008b08:	bd80      	pop	{r7, pc}
20008b0a:	bf00      	nop
20008b0c:	200003b0 	.word	0x200003b0
20008b10:	057619f1 	.word	0x057619f1
20008b14:	20009af5 	.word	0x20009af5
20008b18:	20009a65 	.word	0x20009a65
20008b1c:	20009185 	.word	0x20009185
20008b20:	20009259 	.word	0x20009259

20008b24 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
20008b24:	b480      	push	{r7}
20008b26:	b083      	sub	sp, #12
20008b28:	af00      	add	r7, sp, #0
20008b2a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
20008b2c:	687b      	ldr	r3, [r7, #4]
20008b2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20008b32:	2b01      	cmp	r3, #1
20008b34:	d101      	bne.n	20008b3a <HAL_SPI_DMAPause+0x16>
20008b36:	2302      	movs	r3, #2
20008b38:	e010      	b.n	20008b5c <HAL_SPI_DMAPause+0x38>
20008b3a:	687b      	ldr	r3, [r7, #4]
20008b3c:	2201      	movs	r2, #1
20008b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008b42:	687b      	ldr	r3, [r7, #4]
20008b44:	681b      	ldr	r3, [r3, #0]
20008b46:	685a      	ldr	r2, [r3, #4]
20008b48:	687b      	ldr	r3, [r7, #4]
20008b4a:	681b      	ldr	r3, [r3, #0]
20008b4c:	f022 0203 	bic.w	r2, r2, #3
20008b50:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008b52:	687b      	ldr	r3, [r7, #4]
20008b54:	2200      	movs	r2, #0
20008b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
20008b5a:	2300      	movs	r3, #0
}
20008b5c:	4618      	mov	r0, r3
20008b5e:	370c      	adds	r7, #12
20008b60:	46bd      	mov	sp, r7
20008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
20008b66:	4770      	bx	lr

20008b68 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
20008b68:	b480      	push	{r7}
20008b6a:	b083      	sub	sp, #12
20008b6c:	af00      	add	r7, sp, #0
20008b6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
20008b70:	687b      	ldr	r3, [r7, #4]
20008b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20008b76:	2b01      	cmp	r3, #1
20008b78:	d101      	bne.n	20008b7e <HAL_SPI_DMAResume+0x16>
20008b7a:	2302      	movs	r3, #2
20008b7c:	e010      	b.n	20008ba0 <HAL_SPI_DMAResume+0x38>
20008b7e:	687b      	ldr	r3, [r7, #4]
20008b80:	2201      	movs	r2, #1
20008b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008b86:	687b      	ldr	r3, [r7, #4]
20008b88:	681b      	ldr	r3, [r3, #0]
20008b8a:	685a      	ldr	r2, [r3, #4]
20008b8c:	687b      	ldr	r3, [r7, #4]
20008b8e:	681b      	ldr	r3, [r3, #0]
20008b90:	f042 0203 	orr.w	r2, r2, #3
20008b94:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008b96:	687b      	ldr	r3, [r7, #4]
20008b98:	2200      	movs	r2, #0
20008b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
20008b9e:	2300      	movs	r3, #0
}
20008ba0:	4618      	mov	r0, r3
20008ba2:	370c      	adds	r7, #12
20008ba4:	46bd      	mov	sp, r7
20008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
20008baa:	4770      	bx	lr

20008bac <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
20008bac:	b580      	push	{r7, lr}
20008bae:	b084      	sub	sp, #16
20008bb0:	af00      	add	r7, sp, #0
20008bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
20008bb4:	2300      	movs	r3, #0
20008bb6:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
20008bb8:	687b      	ldr	r3, [r7, #4]
20008bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008bbc:	2b00      	cmp	r3, #0
20008bbe:	d00f      	beq.n	20008be0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
20008bc0:	687b      	ldr	r3, [r7, #4]
20008bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008bc4:	4618      	mov	r0, r3
20008bc6:	f7f9 ff04 	bl	200029d2 <HAL_DMA_Abort>
20008bca:	4603      	mov	r3, r0
20008bcc:	2b00      	cmp	r3, #0
20008bce:	d007      	beq.n	20008be0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008bd0:	687b      	ldr	r3, [r7, #4]
20008bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008bd4:	f043 0210 	orr.w	r2, r3, #16
20008bd8:	687b      	ldr	r3, [r7, #4]
20008bda:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
20008bdc:	2301      	movs	r3, #1
20008bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
20008be0:	687b      	ldr	r3, [r7, #4]
20008be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008be4:	2b00      	cmp	r3, #0
20008be6:	d00f      	beq.n	20008c08 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
20008be8:	687b      	ldr	r3, [r7, #4]
20008bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008bec:	4618      	mov	r0, r3
20008bee:	f7f9 fef0 	bl	200029d2 <HAL_DMA_Abort>
20008bf2:	4603      	mov	r3, r0
20008bf4:	2b00      	cmp	r3, #0
20008bf6:	d007      	beq.n	20008c08 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008bf8:	687b      	ldr	r3, [r7, #4]
20008bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008bfc:	f043 0210 	orr.w	r2, r3, #16
20008c00:	687b      	ldr	r3, [r7, #4]
20008c02:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
20008c04:	2301      	movs	r3, #1
20008c06:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008c08:	687b      	ldr	r3, [r7, #4]
20008c0a:	681b      	ldr	r3, [r3, #0]
20008c0c:	685a      	ldr	r2, [r3, #4]
20008c0e:	687b      	ldr	r3, [r7, #4]
20008c10:	681b      	ldr	r3, [r3, #0]
20008c12:	f022 0203 	bic.w	r2, r2, #3
20008c16:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
20008c18:	687b      	ldr	r3, [r7, #4]
20008c1a:	2201      	movs	r2, #1
20008c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
20008c20:	7bfb      	ldrb	r3, [r7, #15]
}
20008c22:	4618      	mov	r0, r3
20008c24:	3710      	adds	r7, #16
20008c26:	46bd      	mov	sp, r7
20008c28:	bd80      	pop	{r7, pc}
	...

20008c2c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
20008c2c:	b580      	push	{r7, lr}
20008c2e:	b088      	sub	sp, #32
20008c30:	af00      	add	r7, sp, #0
20008c32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
20008c34:	687b      	ldr	r3, [r7, #4]
20008c36:	681b      	ldr	r3, [r3, #0]
20008c38:	685b      	ldr	r3, [r3, #4]
20008c3a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
20008c3c:	687b      	ldr	r3, [r7, #4]
20008c3e:	681b      	ldr	r3, [r3, #0]
20008c40:	689b      	ldr	r3, [r3, #8]
20008c42:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20008c44:	69bb      	ldr	r3, [r7, #24]
20008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008c4a:	2b00      	cmp	r3, #0
20008c4c:	d10e      	bne.n	20008c6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
20008c4e:	69bb      	ldr	r3, [r7, #24]
20008c50:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20008c54:	2b00      	cmp	r3, #0
20008c56:	d009      	beq.n	20008c6c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
20008c58:	69fb      	ldr	r3, [r7, #28]
20008c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008c5e:	2b00      	cmp	r3, #0
20008c60:	d004      	beq.n	20008c6c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
20008c62:	687b      	ldr	r3, [r7, #4]
20008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20008c66:	6878      	ldr	r0, [r7, #4]
20008c68:	4798      	blx	r3
    return;
20008c6a:	e0ce      	b.n	20008e0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
20008c6c:	69bb      	ldr	r3, [r7, #24]
20008c6e:	f003 0302 	and.w	r3, r3, #2
20008c72:	2b00      	cmp	r3, #0
20008c74:	d009      	beq.n	20008c8a <HAL_SPI_IRQHandler+0x5e>
20008c76:	69fb      	ldr	r3, [r7, #28]
20008c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
20008c7c:	2b00      	cmp	r3, #0
20008c7e:	d004      	beq.n	20008c8a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
20008c80:	687b      	ldr	r3, [r7, #4]
20008c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20008c84:	6878      	ldr	r0, [r7, #4]
20008c86:	4798      	blx	r3
    return;
20008c88:	e0bf      	b.n	20008e0a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
20008c8a:	69bb      	ldr	r3, [r7, #24]
20008c8c:	f003 0320 	and.w	r3, r3, #32
20008c90:	2b00      	cmp	r3, #0
20008c92:	d10a      	bne.n	20008caa <HAL_SPI_IRQHandler+0x7e>
20008c94:	69bb      	ldr	r3, [r7, #24]
20008c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008c9a:	2b00      	cmp	r3, #0
20008c9c:	d105      	bne.n	20008caa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
20008c9e:	69bb      	ldr	r3, [r7, #24]
20008ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
20008ca4:	2b00      	cmp	r3, #0
20008ca6:	f000 80b0 	beq.w	20008e0a <HAL_SPI_IRQHandler+0x1de>
20008caa:	69fb      	ldr	r3, [r7, #28]
20008cac:	f003 0320 	and.w	r3, r3, #32
20008cb0:	2b00      	cmp	r3, #0
20008cb2:	f000 80aa 	beq.w	20008e0a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
20008cb6:	69bb      	ldr	r3, [r7, #24]
20008cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008cbc:	2b00      	cmp	r3, #0
20008cbe:	d023      	beq.n	20008d08 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
20008cc0:	687b      	ldr	r3, [r7, #4]
20008cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008cc6:	b2db      	uxtb	r3, r3
20008cc8:	2b03      	cmp	r3, #3
20008cca:	d011      	beq.n	20008cf0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
20008ccc:	687b      	ldr	r3, [r7, #4]
20008cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008cd0:	f043 0204 	orr.w	r2, r3, #4
20008cd4:	687b      	ldr	r3, [r7, #4]
20008cd6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008cd8:	2300      	movs	r3, #0
20008cda:	617b      	str	r3, [r7, #20]
20008cdc:	687b      	ldr	r3, [r7, #4]
20008cde:	681b      	ldr	r3, [r3, #0]
20008ce0:	68db      	ldr	r3, [r3, #12]
20008ce2:	617b      	str	r3, [r7, #20]
20008ce4:	687b      	ldr	r3, [r7, #4]
20008ce6:	681b      	ldr	r3, [r3, #0]
20008ce8:	689b      	ldr	r3, [r3, #8]
20008cea:	617b      	str	r3, [r7, #20]
20008cec:	697b      	ldr	r3, [r7, #20]
20008cee:	e00b      	b.n	20008d08 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008cf0:	2300      	movs	r3, #0
20008cf2:	613b      	str	r3, [r7, #16]
20008cf4:	687b      	ldr	r3, [r7, #4]
20008cf6:	681b      	ldr	r3, [r3, #0]
20008cf8:	68db      	ldr	r3, [r3, #12]
20008cfa:	613b      	str	r3, [r7, #16]
20008cfc:	687b      	ldr	r3, [r7, #4]
20008cfe:	681b      	ldr	r3, [r3, #0]
20008d00:	689b      	ldr	r3, [r3, #8]
20008d02:	613b      	str	r3, [r7, #16]
20008d04:	693b      	ldr	r3, [r7, #16]
        return;
20008d06:	e080      	b.n	20008e0a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
20008d08:	69bb      	ldr	r3, [r7, #24]
20008d0a:	f003 0320 	and.w	r3, r3, #32
20008d0e:	2b00      	cmp	r3, #0
20008d10:	d014      	beq.n	20008d3c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
20008d12:	687b      	ldr	r3, [r7, #4]
20008d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008d16:	f043 0201 	orr.w	r2, r3, #1
20008d1a:	687b      	ldr	r3, [r7, #4]
20008d1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
20008d1e:	2300      	movs	r3, #0
20008d20:	60fb      	str	r3, [r7, #12]
20008d22:	687b      	ldr	r3, [r7, #4]
20008d24:	681b      	ldr	r3, [r3, #0]
20008d26:	689b      	ldr	r3, [r3, #8]
20008d28:	60fb      	str	r3, [r7, #12]
20008d2a:	687b      	ldr	r3, [r7, #4]
20008d2c:	681b      	ldr	r3, [r3, #0]
20008d2e:	681a      	ldr	r2, [r3, #0]
20008d30:	687b      	ldr	r3, [r7, #4]
20008d32:	681b      	ldr	r3, [r3, #0]
20008d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20008d38:	601a      	str	r2, [r3, #0]
20008d3a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
20008d3c:	69bb      	ldr	r3, [r7, #24]
20008d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
20008d42:	2b00      	cmp	r3, #0
20008d44:	d00c      	beq.n	20008d60 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
20008d46:	687b      	ldr	r3, [r7, #4]
20008d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008d4a:	f043 0208 	orr.w	r2, r3, #8
20008d4e:	687b      	ldr	r3, [r7, #4]
20008d50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
20008d52:	2300      	movs	r3, #0
20008d54:	60bb      	str	r3, [r7, #8]
20008d56:	687b      	ldr	r3, [r7, #4]
20008d58:	681b      	ldr	r3, [r3, #0]
20008d5a:	689b      	ldr	r3, [r3, #8]
20008d5c:	60bb      	str	r3, [r7, #8]
20008d5e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20008d60:	687b      	ldr	r3, [r7, #4]
20008d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008d64:	2b00      	cmp	r3, #0
20008d66:	d04f      	beq.n	20008e08 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
20008d68:	687b      	ldr	r3, [r7, #4]
20008d6a:	681b      	ldr	r3, [r3, #0]
20008d6c:	685a      	ldr	r2, [r3, #4]
20008d6e:	687b      	ldr	r3, [r7, #4]
20008d70:	681b      	ldr	r3, [r3, #0]
20008d72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20008d76:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
20008d78:	687b      	ldr	r3, [r7, #4]
20008d7a:	2201      	movs	r2, #1
20008d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
20008d80:	69fb      	ldr	r3, [r7, #28]
20008d82:	f003 0302 	and.w	r3, r3, #2
20008d86:	2b00      	cmp	r3, #0
20008d88:	d104      	bne.n	20008d94 <HAL_SPI_IRQHandler+0x168>
20008d8a:	69fb      	ldr	r3, [r7, #28]
20008d8c:	f003 0301 	and.w	r3, r3, #1
20008d90:	2b00      	cmp	r3, #0
20008d92:	d034      	beq.n	20008dfe <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
20008d94:	687b      	ldr	r3, [r7, #4]
20008d96:	681b      	ldr	r3, [r3, #0]
20008d98:	685a      	ldr	r2, [r3, #4]
20008d9a:	687b      	ldr	r3, [r7, #4]
20008d9c:	681b      	ldr	r3, [r3, #0]
20008d9e:	f022 0203 	bic.w	r2, r2, #3
20008da2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
20008da4:	687b      	ldr	r3, [r7, #4]
20008da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008da8:	2b00      	cmp	r3, #0
20008daa:	d011      	beq.n	20008dd0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
20008dac:	687b      	ldr	r3, [r7, #4]
20008dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008db0:	4a17      	ldr	r2, [pc, #92]	; (20008e10 <HAL_SPI_IRQHandler+0x1e4>)
20008db2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
20008db4:	687b      	ldr	r3, [r7, #4]
20008db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008db8:	4618      	mov	r0, r3
20008dba:	f7f9 fe7a 	bl	20002ab2 <HAL_DMA_Abort_IT>
20008dbe:	4603      	mov	r3, r0
20008dc0:	2b00      	cmp	r3, #0
20008dc2:	d005      	beq.n	20008dd0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008dc4:	687b      	ldr	r3, [r7, #4]
20008dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008dc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20008dcc:	687b      	ldr	r3, [r7, #4]
20008dce:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
20008dd0:	687b      	ldr	r3, [r7, #4]
20008dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008dd4:	2b00      	cmp	r3, #0
20008dd6:	d016      	beq.n	20008e06 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
20008dd8:	687b      	ldr	r3, [r7, #4]
20008dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008ddc:	4a0c      	ldr	r2, [pc, #48]	; (20008e10 <HAL_SPI_IRQHandler+0x1e4>)
20008dde:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
20008de0:	687b      	ldr	r3, [r7, #4]
20008de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008de4:	4618      	mov	r0, r3
20008de6:	f7f9 fe64 	bl	20002ab2 <HAL_DMA_Abort_IT>
20008dea:	4603      	mov	r3, r0
20008dec:	2b00      	cmp	r3, #0
20008dee:	d00a      	beq.n	20008e06 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008df0:	687b      	ldr	r3, [r7, #4]
20008df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008df4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20008df8:	687b      	ldr	r3, [r7, #4]
20008dfa:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
20008dfc:	e003      	b.n	20008e06 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
20008dfe:	6878      	ldr	r0, [r7, #4]
20008e00:	f000 f844 	bl	20008e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
20008e04:	e000      	b.n	20008e08 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
20008e06:	bf00      	nop
    return;
20008e08:	bf00      	nop
  }
}
20008e0a:	3720      	adds	r7, #32
20008e0c:	46bd      	mov	sp, r7
20008e0e:	bd80      	pop	{r7, pc}
20008e10:	2000915d 	.word	0x2000915d

20008e14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e14:	b480      	push	{r7}
20008e16:	b083      	sub	sp, #12
20008e18:	af00      	add	r7, sp, #0
20008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
20008e1c:	bf00      	nop
20008e1e:	370c      	adds	r7, #12
20008e20:	46bd      	mov	sp, r7
20008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e26:	4770      	bx	lr

20008e28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e28:	b480      	push	{r7}
20008e2a:	b083      	sub	sp, #12
20008e2c:	af00      	add	r7, sp, #0
20008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
20008e30:	bf00      	nop
20008e32:	370c      	adds	r7, #12
20008e34:	46bd      	mov	sp, r7
20008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e3a:	4770      	bx	lr

20008e3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e3c:	b480      	push	{r7}
20008e3e:	b083      	sub	sp, #12
20008e40:	af00      	add	r7, sp, #0
20008e42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
20008e44:	bf00      	nop
20008e46:	370c      	adds	r7, #12
20008e48:	46bd      	mov	sp, r7
20008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e4e:	4770      	bx	lr

20008e50 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e50:	b480      	push	{r7}
20008e52:	b083      	sub	sp, #12
20008e54:	af00      	add	r7, sp, #0
20008e56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
20008e58:	bf00      	nop
20008e5a:	370c      	adds	r7, #12
20008e5c:	46bd      	mov	sp, r7
20008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e62:	4770      	bx	lr

20008e64 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e64:	b480      	push	{r7}
20008e66:	b083      	sub	sp, #12
20008e68:	af00      	add	r7, sp, #0
20008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
20008e6c:	bf00      	nop
20008e6e:	370c      	adds	r7, #12
20008e70:	46bd      	mov	sp, r7
20008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e76:	4770      	bx	lr

20008e78 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
20008e78:	b480      	push	{r7}
20008e7a:	b083      	sub	sp, #12
20008e7c:	af00      	add	r7, sp, #0
20008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
20008e80:	bf00      	nop
20008e82:	370c      	adds	r7, #12
20008e84:	46bd      	mov	sp, r7
20008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e8a:	4770      	bx	lr

20008e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
20008e8c:	b480      	push	{r7}
20008e8e:	b083      	sub	sp, #12
20008e90:	af00      	add	r7, sp, #0
20008e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
20008e94:	bf00      	nop
20008e96:	370c      	adds	r7, #12
20008e98:	46bd      	mov	sp, r7
20008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
20008e9e:	4770      	bx	lr

20008ea0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
20008ea0:	b480      	push	{r7}
20008ea2:	b083      	sub	sp, #12
20008ea4:	af00      	add	r7, sp, #0
20008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
20008ea8:	bf00      	nop
20008eaa:	370c      	adds	r7, #12
20008eac:	46bd      	mov	sp, r7
20008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
20008eb2:	4770      	bx	lr

20008eb4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
20008eb4:	b480      	push	{r7}
20008eb6:	b083      	sub	sp, #12
20008eb8:	af00      	add	r7, sp, #0
20008eba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
20008ebc:	687b      	ldr	r3, [r7, #4]
20008ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008ec2:	b2db      	uxtb	r3, r3
}
20008ec4:	4618      	mov	r0, r3
20008ec6:	370c      	adds	r7, #12
20008ec8:	46bd      	mov	sp, r7
20008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
20008ece:	4770      	bx	lr

20008ed0 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
20008ed0:	b480      	push	{r7}
20008ed2:	b083      	sub	sp, #12
20008ed4:	af00      	add	r7, sp, #0
20008ed6:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
20008ed8:	687b      	ldr	r3, [r7, #4]
20008eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
20008edc:	4618      	mov	r0, r3
20008ede:	370c      	adds	r7, #12
20008ee0:	46bd      	mov	sp, r7
20008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
20008ee6:	4770      	bx	lr

20008ee8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
20008ee8:	b580      	push	{r7, lr}
20008eea:	b086      	sub	sp, #24
20008eec:	af00      	add	r7, sp, #0
20008eee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008ef0:	687b      	ldr	r3, [r7, #4]
20008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008ef4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20008ef6:	f7f7 fd94 	bl	20000a22 <HAL_GetTick>
20008efa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
20008efc:	687b      	ldr	r3, [r7, #4]
20008efe:	681b      	ldr	r3, [r3, #0]
20008f00:	681b      	ldr	r3, [r3, #0]
20008f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
20008f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
20008f0a:	d03b      	beq.n	20008f84 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
20008f0c:	697b      	ldr	r3, [r7, #20]
20008f0e:	681b      	ldr	r3, [r3, #0]
20008f10:	685a      	ldr	r2, [r3, #4]
20008f12:	697b      	ldr	r3, [r7, #20]
20008f14:	681b      	ldr	r3, [r3, #0]
20008f16:	f022 0220 	bic.w	r2, r2, #32
20008f1a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20008f1c:	697b      	ldr	r3, [r7, #20]
20008f1e:	681b      	ldr	r3, [r3, #0]
20008f20:	685a      	ldr	r2, [r3, #4]
20008f22:	697b      	ldr	r3, [r7, #20]
20008f24:	681b      	ldr	r3, [r3, #0]
20008f26:	f022 0202 	bic.w	r2, r2, #2
20008f2a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20008f2c:	693a      	ldr	r2, [r7, #16]
20008f2e:	2164      	movs	r1, #100	; 0x64
20008f30:	6978      	ldr	r0, [r7, #20]
20008f32:	f000 fc2d 	bl	20009790 <SPI_EndRxTxTransaction>
20008f36:	4603      	mov	r3, r0
20008f38:	2b00      	cmp	r3, #0
20008f3a:	d005      	beq.n	20008f48 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20008f3c:	697b      	ldr	r3, [r7, #20]
20008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008f40:	f043 0220 	orr.w	r2, r3, #32
20008f44:	697b      	ldr	r3, [r7, #20]
20008f46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20008f48:	697b      	ldr	r3, [r7, #20]
20008f4a:	689b      	ldr	r3, [r3, #8]
20008f4c:	2b00      	cmp	r3, #0
20008f4e:	d10a      	bne.n	20008f66 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008f50:	2300      	movs	r3, #0
20008f52:	60fb      	str	r3, [r7, #12]
20008f54:	697b      	ldr	r3, [r7, #20]
20008f56:	681b      	ldr	r3, [r3, #0]
20008f58:	68db      	ldr	r3, [r3, #12]
20008f5a:	60fb      	str	r3, [r7, #12]
20008f5c:	697b      	ldr	r3, [r7, #20]
20008f5e:	681b      	ldr	r3, [r3, #0]
20008f60:	689b      	ldr	r3, [r3, #8]
20008f62:	60fb      	str	r3, [r7, #12]
20008f64:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
20008f66:	697b      	ldr	r3, [r7, #20]
20008f68:	2200      	movs	r2, #0
20008f6a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
20008f6c:	697b      	ldr	r3, [r7, #20]
20008f6e:	2201      	movs	r2, #1
20008f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20008f74:	697b      	ldr	r3, [r7, #20]
20008f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008f78:	2b00      	cmp	r3, #0
20008f7a:	d003      	beq.n	20008f84 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
20008f7c:	6978      	ldr	r0, [r7, #20]
20008f7e:	f7ff ff85 	bl	20008e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
20008f82:	e002      	b.n	20008f8a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
20008f84:	6978      	ldr	r0, [r7, #20]
20008f86:	f7ff ff45 	bl	20008e14 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008f8a:	3718      	adds	r7, #24
20008f8c:	46bd      	mov	sp, r7
20008f8e:	bd80      	pop	{r7, pc}

20008f90 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
20008f90:	b580      	push	{r7, lr}
20008f92:	b084      	sub	sp, #16
20008f94:	af00      	add	r7, sp, #0
20008f96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008f98:	687b      	ldr	r3, [r7, #4]
20008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008f9c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20008f9e:	f7f7 fd40 	bl	20000a22 <HAL_GetTick>
20008fa2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
20008fa4:	687b      	ldr	r3, [r7, #4]
20008fa6:	681b      	ldr	r3, [r3, #0]
20008fa8:	681b      	ldr	r3, [r3, #0]
20008faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
20008fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
20008fb2:	d03b      	beq.n	2000902c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
20008fb4:	68fb      	ldr	r3, [r7, #12]
20008fb6:	681b      	ldr	r3, [r3, #0]
20008fb8:	685a      	ldr	r2, [r3, #4]
20008fba:	68fb      	ldr	r3, [r7, #12]
20008fbc:	681b      	ldr	r3, [r3, #0]
20008fbe:	f022 0220 	bic.w	r2, r2, #32
20008fc2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20008fc4:	68fb      	ldr	r3, [r7, #12]
20008fc6:	689b      	ldr	r3, [r3, #8]
20008fc8:	2b00      	cmp	r3, #0
20008fca:	d10d      	bne.n	20008fe8 <SPI_DMAReceiveCplt+0x58>
20008fcc:	68fb      	ldr	r3, [r7, #12]
20008fce:	685b      	ldr	r3, [r3, #4]
20008fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20008fd4:	d108      	bne.n	20008fe8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008fd6:	68fb      	ldr	r3, [r7, #12]
20008fd8:	681b      	ldr	r3, [r3, #0]
20008fda:	685a      	ldr	r2, [r3, #4]
20008fdc:	68fb      	ldr	r3, [r7, #12]
20008fde:	681b      	ldr	r3, [r3, #0]
20008fe0:	f022 0203 	bic.w	r2, r2, #3
20008fe4:	605a      	str	r2, [r3, #4]
20008fe6:	e007      	b.n	20008ff8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20008fe8:	68fb      	ldr	r3, [r7, #12]
20008fea:	681b      	ldr	r3, [r3, #0]
20008fec:	685a      	ldr	r2, [r3, #4]
20008fee:	68fb      	ldr	r3, [r7, #12]
20008ff0:	681b      	ldr	r3, [r3, #0]
20008ff2:	f022 0201 	bic.w	r2, r2, #1
20008ff6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20008ff8:	68ba      	ldr	r2, [r7, #8]
20008ffa:	2164      	movs	r1, #100	; 0x64
20008ffc:	68f8      	ldr	r0, [r7, #12]
20008ffe:	f000 fb61 	bl	200096c4 <SPI_EndRxTransaction>
20009002:	4603      	mov	r3, r0
20009004:	2b00      	cmp	r3, #0
20009006:	d002      	beq.n	2000900e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20009008:	68fb      	ldr	r3, [r7, #12]
2000900a:	2220      	movs	r2, #32
2000900c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
2000900e:	68fb      	ldr	r3, [r7, #12]
20009010:	2200      	movs	r2, #0
20009012:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
20009014:	68fb      	ldr	r3, [r7, #12]
20009016:	2201      	movs	r2, #1
20009018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
2000901c:	68fb      	ldr	r3, [r7, #12]
2000901e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009020:	2b00      	cmp	r3, #0
20009022:	d003      	beq.n	2000902c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
20009024:	68f8      	ldr	r0, [r7, #12]
20009026:	f7ff ff31 	bl	20008e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
2000902a:	e002      	b.n	20009032 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
2000902c:	68f8      	ldr	r0, [r7, #12]
2000902e:	f7ff fefb 	bl	20008e28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009032:	3710      	adds	r7, #16
20009034:	46bd      	mov	sp, r7
20009036:	bd80      	pop	{r7, pc}

20009038 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
20009038:	b580      	push	{r7, lr}
2000903a:	b084      	sub	sp, #16
2000903c:	af00      	add	r7, sp, #0
2000903e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009040:	687b      	ldr	r3, [r7, #4]
20009042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009044:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20009046:	f7f7 fcec 	bl	20000a22 <HAL_GetTick>
2000904a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
2000904c:	687b      	ldr	r3, [r7, #4]
2000904e:	681b      	ldr	r3, [r3, #0]
20009050:	681b      	ldr	r3, [r3, #0]
20009052:	f403 7380 	and.w	r3, r3, #256	; 0x100
20009056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2000905a:	d02f      	beq.n	200090bc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000905c:	68fb      	ldr	r3, [r7, #12]
2000905e:	681b      	ldr	r3, [r3, #0]
20009060:	685a      	ldr	r2, [r3, #4]
20009062:	68fb      	ldr	r3, [r7, #12]
20009064:	681b      	ldr	r3, [r3, #0]
20009066:	f022 0220 	bic.w	r2, r2, #32
2000906a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2000906c:	68ba      	ldr	r2, [r7, #8]
2000906e:	2164      	movs	r1, #100	; 0x64
20009070:	68f8      	ldr	r0, [r7, #12]
20009072:	f000 fb8d 	bl	20009790 <SPI_EndRxTxTransaction>
20009076:	4603      	mov	r3, r0
20009078:	2b00      	cmp	r3, #0
2000907a:	d005      	beq.n	20009088 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000907c:	68fb      	ldr	r3, [r7, #12]
2000907e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009080:	f043 0220 	orr.w	r2, r3, #32
20009084:	68fb      	ldr	r3, [r7, #12]
20009086:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20009088:	68fb      	ldr	r3, [r7, #12]
2000908a:	681b      	ldr	r3, [r3, #0]
2000908c:	685a      	ldr	r2, [r3, #4]
2000908e:	68fb      	ldr	r3, [r7, #12]
20009090:	681b      	ldr	r3, [r3, #0]
20009092:	f022 0203 	bic.w	r2, r2, #3
20009096:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
20009098:	68fb      	ldr	r3, [r7, #12]
2000909a:	2200      	movs	r2, #0
2000909c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
2000909e:	68fb      	ldr	r3, [r7, #12]
200090a0:	2200      	movs	r2, #0
200090a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
200090a4:	68fb      	ldr	r3, [r7, #12]
200090a6:	2201      	movs	r2, #1
200090a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200090ac:	68fb      	ldr	r3, [r7, #12]
200090ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200090b0:	2b00      	cmp	r3, #0
200090b2:	d003      	beq.n	200090bc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
200090b4:	68f8      	ldr	r0, [r7, #12]
200090b6:	f7ff fee9 	bl	20008e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
200090ba:	e002      	b.n	200090c2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
200090bc:	68f8      	ldr	r0, [r7, #12]
200090be:	f7ff febd 	bl	20008e3c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200090c2:	3710      	adds	r7, #16
200090c4:	46bd      	mov	sp, r7
200090c6:	bd80      	pop	{r7, pc}

200090c8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
200090c8:	b580      	push	{r7, lr}
200090ca:	b084      	sub	sp, #16
200090cc:	af00      	add	r7, sp, #0
200090ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200090d0:	687b      	ldr	r3, [r7, #4]
200090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200090d4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
200090d6:	68f8      	ldr	r0, [r7, #12]
200090d8:	f7ff feba 	bl	20008e50 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200090dc:	bf00      	nop
200090de:	3710      	adds	r7, #16
200090e0:	46bd      	mov	sp, r7
200090e2:	bd80      	pop	{r7, pc}

200090e4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
200090e4:	b580      	push	{r7, lr}
200090e6:	b084      	sub	sp, #16
200090e8:	af00      	add	r7, sp, #0
200090ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200090ec:	687b      	ldr	r3, [r7, #4]
200090ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200090f0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
200090f2:	68f8      	ldr	r0, [r7, #12]
200090f4:	f7ff feb6 	bl	20008e64 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200090f8:	bf00      	nop
200090fa:	3710      	adds	r7, #16
200090fc:	46bd      	mov	sp, r7
200090fe:	bd80      	pop	{r7, pc}

20009100 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
20009100:	b580      	push	{r7, lr}
20009102:	b084      	sub	sp, #16
20009104:	af00      	add	r7, sp, #0
20009106:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009108:	687b      	ldr	r3, [r7, #4]
2000910a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000910c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
2000910e:	68f8      	ldr	r0, [r7, #12]
20009110:	f7ff feb2 	bl	20008e78 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009114:	bf00      	nop
20009116:	3710      	adds	r7, #16
20009118:	46bd      	mov	sp, r7
2000911a:	bd80      	pop	{r7, pc}

2000911c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
2000911c:	b580      	push	{r7, lr}
2000911e:	b084      	sub	sp, #16
20009120:	af00      	add	r7, sp, #0
20009122:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009124:	687b      	ldr	r3, [r7, #4]
20009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009128:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000912a:	68fb      	ldr	r3, [r7, #12]
2000912c:	681b      	ldr	r3, [r3, #0]
2000912e:	685a      	ldr	r2, [r3, #4]
20009130:	68fb      	ldr	r3, [r7, #12]
20009132:	681b      	ldr	r3, [r3, #0]
20009134:	f022 0203 	bic.w	r2, r2, #3
20009138:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2000913a:	68fb      	ldr	r3, [r7, #12]
2000913c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000913e:	f043 0210 	orr.w	r2, r3, #16
20009142:	68fb      	ldr	r3, [r7, #12]
20009144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
20009146:	68fb      	ldr	r3, [r7, #12]
20009148:	2201      	movs	r2, #1
2000914a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
2000914e:	68f8      	ldr	r0, [r7, #12]
20009150:	f7ff fe9c 	bl	20008e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009154:	bf00      	nop
20009156:	3710      	adds	r7, #16
20009158:	46bd      	mov	sp, r7
2000915a:	bd80      	pop	{r7, pc}

2000915c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
2000915c:	b580      	push	{r7, lr}
2000915e:	b084      	sub	sp, #16
20009160:	af00      	add	r7, sp, #0
20009162:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009164:	687b      	ldr	r3, [r7, #4]
20009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009168:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
2000916a:	68fb      	ldr	r3, [r7, #12]
2000916c:	2200      	movs	r2, #0
2000916e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20009170:	68fb      	ldr	r3, [r7, #12]
20009172:	2200      	movs	r2, #0
20009174:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
20009176:	68f8      	ldr	r0, [r7, #12]
20009178:	f7ff fe88 	bl	20008e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000917c:	bf00      	nop
2000917e:	3710      	adds	r7, #16
20009180:	46bd      	mov	sp, r7
20009182:	bd80      	pop	{r7, pc}

20009184 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
20009184:	b580      	push	{r7, lr}
20009186:	b086      	sub	sp, #24
20009188:	af00      	add	r7, sp, #0
2000918a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
2000918c:	687b      	ldr	r3, [r7, #4]
2000918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009190:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
20009192:	697b      	ldr	r3, [r7, #20]
20009194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20009196:	2200      	movs	r2, #0
20009198:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
2000919a:	4b2d      	ldr	r3, [pc, #180]	; (20009250 <SPI_DMATxAbortCallback+0xcc>)
2000919c:	681b      	ldr	r3, [r3, #0]
2000919e:	4a2d      	ldr	r2, [pc, #180]	; (20009254 <SPI_DMATxAbortCallback+0xd0>)
200091a0:	fba2 2303 	umull	r2, r3, r2, r3
200091a4:	0a5b      	lsrs	r3, r3, #9
200091a6:	2264      	movs	r2, #100	; 0x64
200091a8:	fb02 f303 	mul.w	r3, r2, r3
200091ac:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
200091ae:	697b      	ldr	r3, [r7, #20]
200091b0:	681b      	ldr	r3, [r3, #0]
200091b2:	685a      	ldr	r2, [r3, #4]
200091b4:	697b      	ldr	r3, [r7, #20]
200091b6:	681b      	ldr	r3, [r3, #0]
200091b8:	f022 0202 	bic.w	r2, r2, #2
200091bc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
200091be:	693b      	ldr	r3, [r7, #16]
200091c0:	2b00      	cmp	r3, #0
200091c2:	d106      	bne.n	200091d2 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200091c4:	697b      	ldr	r3, [r7, #20]
200091c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200091c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200091cc:	697b      	ldr	r3, [r7, #20]
200091ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
200091d0:	e009      	b.n	200091e6 <SPI_DMATxAbortCallback+0x62>
    }
    count--;
200091d2:	693b      	ldr	r3, [r7, #16]
200091d4:	3b01      	subs	r3, #1
200091d6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
200091d8:	697b      	ldr	r3, [r7, #20]
200091da:	681b      	ldr	r3, [r3, #0]
200091dc:	689b      	ldr	r3, [r3, #8]
200091de:	f003 0302 	and.w	r3, r3, #2
200091e2:	2b00      	cmp	r3, #0
200091e4:	d0eb      	beq.n	200091be <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
200091e6:	697b      	ldr	r3, [r7, #20]
200091e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200091ea:	2b00      	cmp	r3, #0
200091ec:	d004      	beq.n	200091f8 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
200091ee:	697b      	ldr	r3, [r7, #20]
200091f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200091f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200091f4:	2b00      	cmp	r3, #0
200091f6:	d126      	bne.n	20009246 <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
200091f8:	697b      	ldr	r3, [r7, #20]
200091fa:	2200      	movs	r2, #0
200091fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
200091fe:	697b      	ldr	r3, [r7, #20]
20009200:	2200      	movs	r2, #0
20009202:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
20009204:	697b      	ldr	r3, [r7, #20]
20009206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009208:	2b40      	cmp	r3, #64	; 0x40
2000920a:	d002      	beq.n	20009212 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000920c:	697b      	ldr	r3, [r7, #20]
2000920e:	2200      	movs	r2, #0
20009210:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009212:	2300      	movs	r3, #0
20009214:	60fb      	str	r3, [r7, #12]
20009216:	697b      	ldr	r3, [r7, #20]
20009218:	681b      	ldr	r3, [r3, #0]
2000921a:	68db      	ldr	r3, [r3, #12]
2000921c:	60fb      	str	r3, [r7, #12]
2000921e:	697b      	ldr	r3, [r7, #20]
20009220:	681b      	ldr	r3, [r3, #0]
20009222:	689b      	ldr	r3, [r3, #8]
20009224:	60fb      	str	r3, [r7, #12]
20009226:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
20009228:	2300      	movs	r3, #0
2000922a:	60bb      	str	r3, [r7, #8]
2000922c:	697b      	ldr	r3, [r7, #20]
2000922e:	681b      	ldr	r3, [r3, #0]
20009230:	689b      	ldr	r3, [r3, #8]
20009232:	60bb      	str	r3, [r7, #8]
20009234:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
20009236:	697b      	ldr	r3, [r7, #20]
20009238:	2201      	movs	r2, #1
2000923a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
2000923e:	6978      	ldr	r0, [r7, #20]
20009240:	f7ff fe2e 	bl	20008ea0 <HAL_SPI_AbortCpltCallback>
20009244:	e000      	b.n	20009248 <SPI_DMATxAbortCallback+0xc4>
      return;
20009246:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009248:	3718      	adds	r7, #24
2000924a:	46bd      	mov	sp, r7
2000924c:	bd80      	pop	{r7, pc}
2000924e:	bf00      	nop
20009250:	200003b0 	.word	0x200003b0
20009254:	057619f1 	.word	0x057619f1

20009258 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
20009258:	b580      	push	{r7, lr}
2000925a:	b086      	sub	sp, #24
2000925c:	af00      	add	r7, sp, #0
2000925e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20009260:	687b      	ldr	r3, [r7, #4]
20009262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009264:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20009266:	697b      	ldr	r3, [r7, #20]
20009268:	681b      	ldr	r3, [r3, #0]
2000926a:	681a      	ldr	r2, [r3, #0]
2000926c:	697b      	ldr	r3, [r7, #20]
2000926e:	681b      	ldr	r3, [r3, #0]
20009270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009274:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
20009276:	697b      	ldr	r3, [r7, #20]
20009278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000927a:	2200      	movs	r2, #0
2000927c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
2000927e:	697b      	ldr	r3, [r7, #20]
20009280:	681b      	ldr	r3, [r3, #0]
20009282:	685a      	ldr	r2, [r3, #4]
20009284:	697b      	ldr	r3, [r7, #20]
20009286:	681b      	ldr	r3, [r3, #0]
20009288:	f022 0201 	bic.w	r2, r2, #1
2000928c:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
2000928e:	f7f7 fbc8 	bl	20000a22 <HAL_GetTick>
20009292:	4603      	mov	r3, r0
20009294:	461a      	mov	r2, r3
20009296:	2164      	movs	r1, #100	; 0x64
20009298:	6978      	ldr	r0, [r7, #20]
2000929a:	f000 fa79 	bl	20009790 <SPI_EndRxTxTransaction>
2000929e:	4603      	mov	r3, r0
200092a0:	2b00      	cmp	r3, #0
200092a2:	d005      	beq.n	200092b0 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200092a4:	697b      	ldr	r3, [r7, #20]
200092a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200092a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200092ac:	697b      	ldr	r3, [r7, #20]
200092ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
200092b0:	697b      	ldr	r3, [r7, #20]
200092b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200092b4:	2b00      	cmp	r3, #0
200092b6:	d004      	beq.n	200092c2 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
200092b8:	697b      	ldr	r3, [r7, #20]
200092ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200092bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
200092be:	2b00      	cmp	r3, #0
200092c0:	d126      	bne.n	20009310 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
200092c2:	697b      	ldr	r3, [r7, #20]
200092c4:	2200      	movs	r2, #0
200092c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
200092c8:	697b      	ldr	r3, [r7, #20]
200092ca:	2200      	movs	r2, #0
200092cc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
200092ce:	697b      	ldr	r3, [r7, #20]
200092d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200092d2:	2b40      	cmp	r3, #64	; 0x40
200092d4:	d002      	beq.n	200092dc <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
200092d6:	697b      	ldr	r3, [r7, #20]
200092d8:	2200      	movs	r2, #0
200092da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
200092dc:	2300      	movs	r3, #0
200092de:	613b      	str	r3, [r7, #16]
200092e0:	697b      	ldr	r3, [r7, #20]
200092e2:	681b      	ldr	r3, [r3, #0]
200092e4:	68db      	ldr	r3, [r3, #12]
200092e6:	613b      	str	r3, [r7, #16]
200092e8:	697b      	ldr	r3, [r7, #20]
200092ea:	681b      	ldr	r3, [r3, #0]
200092ec:	689b      	ldr	r3, [r3, #8]
200092ee:	613b      	str	r3, [r7, #16]
200092f0:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
200092f2:	2300      	movs	r3, #0
200092f4:	60fb      	str	r3, [r7, #12]
200092f6:	697b      	ldr	r3, [r7, #20]
200092f8:	681b      	ldr	r3, [r3, #0]
200092fa:	689b      	ldr	r3, [r3, #8]
200092fc:	60fb      	str	r3, [r7, #12]
200092fe:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
20009300:	697b      	ldr	r3, [r7, #20]
20009302:	2201      	movs	r2, #1
20009304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
20009308:	6978      	ldr	r0, [r7, #20]
2000930a:	f7ff fdc9 	bl	20008ea0 <HAL_SPI_AbortCpltCallback>
2000930e:	e000      	b.n	20009312 <SPI_DMARxAbortCallback+0xba>
      return;
20009310:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20009312:	3718      	adds	r7, #24
20009314:	46bd      	mov	sp, r7
20009316:	bd80      	pop	{r7, pc}

20009318 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20009318:	b580      	push	{r7, lr}
2000931a:	b082      	sub	sp, #8
2000931c:	af00      	add	r7, sp, #0
2000931e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
20009320:	687b      	ldr	r3, [r7, #4]
20009322:	681b      	ldr	r3, [r3, #0]
20009324:	f103 020c 	add.w	r2, r3, #12
20009328:	687b      	ldr	r3, [r7, #4]
2000932a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000932c:	7812      	ldrb	r2, [r2, #0]
2000932e:	b2d2      	uxtb	r2, r2
20009330:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
20009332:	687b      	ldr	r3, [r7, #4]
20009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20009336:	1c5a      	adds	r2, r3, #1
20009338:	687b      	ldr	r3, [r7, #4]
2000933a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
2000933c:	687b      	ldr	r3, [r7, #4]
2000933e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009340:	b29b      	uxth	r3, r3
20009342:	3b01      	subs	r3, #1
20009344:	b29a      	uxth	r2, r3
20009346:	687b      	ldr	r3, [r7, #4]
20009348:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
2000934a:	687b      	ldr	r3, [r7, #4]
2000934c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000934e:	b29b      	uxth	r3, r3
20009350:	2b00      	cmp	r3, #0
20009352:	d10f      	bne.n	20009374 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20009354:	687b      	ldr	r3, [r7, #4]
20009356:	681b      	ldr	r3, [r3, #0]
20009358:	685a      	ldr	r2, [r3, #4]
2000935a:	687b      	ldr	r3, [r7, #4]
2000935c:	681b      	ldr	r3, [r3, #0]
2000935e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
20009362:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
20009364:	687b      	ldr	r3, [r7, #4]
20009366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009368:	b29b      	uxth	r3, r3
2000936a:	2b00      	cmp	r3, #0
2000936c:	d102      	bne.n	20009374 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
2000936e:	6878      	ldr	r0, [r7, #4]
20009370:	f000 fa62 	bl	20009838 <SPI_CloseRxTx_ISR>
    }
  }
}
20009374:	bf00      	nop
20009376:	3708      	adds	r7, #8
20009378:	46bd      	mov	sp, r7
2000937a:	bd80      	pop	{r7, pc}

2000937c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
2000937c:	b580      	push	{r7, lr}
2000937e:	b082      	sub	sp, #8
20009380:	af00      	add	r7, sp, #0
20009382:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
20009384:	687b      	ldr	r3, [r7, #4]
20009386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20009388:	687b      	ldr	r3, [r7, #4]
2000938a:	681b      	ldr	r3, [r3, #0]
2000938c:	330c      	adds	r3, #12
2000938e:	7812      	ldrb	r2, [r2, #0]
20009390:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
20009392:	687b      	ldr	r3, [r7, #4]
20009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009396:	1c5a      	adds	r2, r3, #1
20009398:	687b      	ldr	r3, [r7, #4]
2000939a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000939c:	687b      	ldr	r3, [r7, #4]
2000939e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200093a0:	b29b      	uxth	r3, r3
200093a2:	3b01      	subs	r3, #1
200093a4:	b29a      	uxth	r2, r3
200093a6:	687b      	ldr	r3, [r7, #4]
200093a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
200093aa:	687b      	ldr	r3, [r7, #4]
200093ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200093ae:	b29b      	uxth	r3, r3
200093b0:	2b00      	cmp	r3, #0
200093b2:	d10f      	bne.n	200093d4 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
200093b4:	687b      	ldr	r3, [r7, #4]
200093b6:	681b      	ldr	r3, [r3, #0]
200093b8:	685a      	ldr	r2, [r3, #4]
200093ba:	687b      	ldr	r3, [r7, #4]
200093bc:	681b      	ldr	r3, [r3, #0]
200093be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200093c2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
200093c4:	687b      	ldr	r3, [r7, #4]
200093c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200093c8:	b29b      	uxth	r3, r3
200093ca:	2b00      	cmp	r3, #0
200093cc:	d102      	bne.n	200093d4 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
200093ce:	6878      	ldr	r0, [r7, #4]
200093d0:	f000 fa32 	bl	20009838 <SPI_CloseRxTx_ISR>
    }
  }
}
200093d4:	bf00      	nop
200093d6:	3708      	adds	r7, #8
200093d8:	46bd      	mov	sp, r7
200093da:	bd80      	pop	{r7, pc}

200093dc <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
200093dc:	b580      	push	{r7, lr}
200093de:	b082      	sub	sp, #8
200093e0:	af00      	add	r7, sp, #0
200093e2:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
200093e4:	687b      	ldr	r3, [r7, #4]
200093e6:	681b      	ldr	r3, [r3, #0]
200093e8:	68da      	ldr	r2, [r3, #12]
200093ea:	687b      	ldr	r3, [r7, #4]
200093ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200093ee:	b292      	uxth	r2, r2
200093f0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
200093f2:	687b      	ldr	r3, [r7, #4]
200093f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200093f6:	1c9a      	adds	r2, r3, #2
200093f8:	687b      	ldr	r3, [r7, #4]
200093fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
200093fc:	687b      	ldr	r3, [r7, #4]
200093fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009400:	b29b      	uxth	r3, r3
20009402:	3b01      	subs	r3, #1
20009404:	b29a      	uxth	r2, r3
20009406:	687b      	ldr	r3, [r7, #4]
20009408:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
2000940a:	687b      	ldr	r3, [r7, #4]
2000940c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000940e:	b29b      	uxth	r3, r3
20009410:	2b00      	cmp	r3, #0
20009412:	d10f      	bne.n	20009434 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
20009414:	687b      	ldr	r3, [r7, #4]
20009416:	681b      	ldr	r3, [r3, #0]
20009418:	685a      	ldr	r2, [r3, #4]
2000941a:	687b      	ldr	r3, [r7, #4]
2000941c:	681b      	ldr	r3, [r3, #0]
2000941e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009422:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
20009424:	687b      	ldr	r3, [r7, #4]
20009426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009428:	b29b      	uxth	r3, r3
2000942a:	2b00      	cmp	r3, #0
2000942c:	d102      	bne.n	20009434 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
2000942e:	6878      	ldr	r0, [r7, #4]
20009430:	f000 fa02 	bl	20009838 <SPI_CloseRxTx_ISR>
    }
  }
}
20009434:	bf00      	nop
20009436:	3708      	adds	r7, #8
20009438:	46bd      	mov	sp, r7
2000943a:	bd80      	pop	{r7, pc}

2000943c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
2000943c:	b580      	push	{r7, lr}
2000943e:	b082      	sub	sp, #8
20009440:	af00      	add	r7, sp, #0
20009442:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20009444:	687b      	ldr	r3, [r7, #4]
20009446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009448:	881a      	ldrh	r2, [r3, #0]
2000944a:	687b      	ldr	r3, [r7, #4]
2000944c:	681b      	ldr	r3, [r3, #0]
2000944e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
20009450:	687b      	ldr	r3, [r7, #4]
20009452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009454:	1c9a      	adds	r2, r3, #2
20009456:	687b      	ldr	r3, [r7, #4]
20009458:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000945a:	687b      	ldr	r3, [r7, #4]
2000945c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000945e:	b29b      	uxth	r3, r3
20009460:	3b01      	subs	r3, #1
20009462:	b29a      	uxth	r2, r3
20009464:	687b      	ldr	r3, [r7, #4]
20009466:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
20009468:	687b      	ldr	r3, [r7, #4]
2000946a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000946c:	b29b      	uxth	r3, r3
2000946e:	2b00      	cmp	r3, #0
20009470:	d10f      	bne.n	20009492 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
20009472:	687b      	ldr	r3, [r7, #4]
20009474:	681b      	ldr	r3, [r3, #0]
20009476:	685a      	ldr	r2, [r3, #4]
20009478:	687b      	ldr	r3, [r7, #4]
2000947a:	681b      	ldr	r3, [r3, #0]
2000947c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20009480:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
20009482:	687b      	ldr	r3, [r7, #4]
20009484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009486:	b29b      	uxth	r3, r3
20009488:	2b00      	cmp	r3, #0
2000948a:	d102      	bne.n	20009492 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
2000948c:	6878      	ldr	r0, [r7, #4]
2000948e:	f000 f9d3 	bl	20009838 <SPI_CloseRxTx_ISR>
    }
  }
}
20009492:	bf00      	nop
20009494:	3708      	adds	r7, #8
20009496:	46bd      	mov	sp, r7
20009498:	bd80      	pop	{r7, pc}

2000949a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
2000949a:	b580      	push	{r7, lr}
2000949c:	b082      	sub	sp, #8
2000949e:	af00      	add	r7, sp, #0
200094a0:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
200094a2:	687b      	ldr	r3, [r7, #4]
200094a4:	681b      	ldr	r3, [r3, #0]
200094a6:	f103 020c 	add.w	r2, r3, #12
200094aa:	687b      	ldr	r3, [r7, #4]
200094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200094ae:	7812      	ldrb	r2, [r2, #0]
200094b0:	b2d2      	uxtb	r2, r2
200094b2:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
200094b4:	687b      	ldr	r3, [r7, #4]
200094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200094b8:	1c5a      	adds	r2, r3, #1
200094ba:	687b      	ldr	r3, [r7, #4]
200094bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
200094be:	687b      	ldr	r3, [r7, #4]
200094c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200094c2:	b29b      	uxth	r3, r3
200094c4:	3b01      	subs	r3, #1
200094c6:	b29a      	uxth	r2, r3
200094c8:	687b      	ldr	r3, [r7, #4]
200094ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
200094cc:	687b      	ldr	r3, [r7, #4]
200094ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200094d0:	b29b      	uxth	r3, r3
200094d2:	2b00      	cmp	r3, #0
200094d4:	d102      	bne.n	200094dc <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
200094d6:	6878      	ldr	r0, [r7, #4]
200094d8:	f000 fa22 	bl	20009920 <SPI_CloseRx_ISR>
  }
}
200094dc:	bf00      	nop
200094de:	3708      	adds	r7, #8
200094e0:	46bd      	mov	sp, r7
200094e2:	bd80      	pop	{r7, pc}

200094e4 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
200094e4:	b580      	push	{r7, lr}
200094e6:	b082      	sub	sp, #8
200094e8:	af00      	add	r7, sp, #0
200094ea:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
200094ec:	687b      	ldr	r3, [r7, #4]
200094ee:	681b      	ldr	r3, [r3, #0]
200094f0:	68da      	ldr	r2, [r3, #12]
200094f2:	687b      	ldr	r3, [r7, #4]
200094f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200094f6:	b292      	uxth	r2, r2
200094f8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
200094fa:	687b      	ldr	r3, [r7, #4]
200094fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200094fe:	1c9a      	adds	r2, r3, #2
20009500:	687b      	ldr	r3, [r7, #4]
20009502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
20009504:	687b      	ldr	r3, [r7, #4]
20009506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009508:	b29b      	uxth	r3, r3
2000950a:	3b01      	subs	r3, #1
2000950c:	b29a      	uxth	r2, r3
2000950e:	687b      	ldr	r3, [r7, #4]
20009510:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
20009512:	687b      	ldr	r3, [r7, #4]
20009514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20009516:	b29b      	uxth	r3, r3
20009518:	2b00      	cmp	r3, #0
2000951a:	d102      	bne.n	20009522 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
2000951c:	6878      	ldr	r0, [r7, #4]
2000951e:	f000 f9ff 	bl	20009920 <SPI_CloseRx_ISR>
  }
}
20009522:	bf00      	nop
20009524:	3708      	adds	r7, #8
20009526:	46bd      	mov	sp, r7
20009528:	bd80      	pop	{r7, pc}

2000952a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
2000952a:	b580      	push	{r7, lr}
2000952c:	b082      	sub	sp, #8
2000952e:	af00      	add	r7, sp, #0
20009530:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
20009532:	687b      	ldr	r3, [r7, #4]
20009534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20009536:	687b      	ldr	r3, [r7, #4]
20009538:	681b      	ldr	r3, [r3, #0]
2000953a:	330c      	adds	r3, #12
2000953c:	7812      	ldrb	r2, [r2, #0]
2000953e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
20009540:	687b      	ldr	r3, [r7, #4]
20009542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009544:	1c5a      	adds	r2, r3, #1
20009546:	687b      	ldr	r3, [r7, #4]
20009548:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000954a:	687b      	ldr	r3, [r7, #4]
2000954c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000954e:	b29b      	uxth	r3, r3
20009550:	3b01      	subs	r3, #1
20009552:	b29a      	uxth	r2, r3
20009554:	687b      	ldr	r3, [r7, #4]
20009556:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
20009558:	687b      	ldr	r3, [r7, #4]
2000955a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000955c:	b29b      	uxth	r3, r3
2000955e:	2b00      	cmp	r3, #0
20009560:	d102      	bne.n	20009568 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
20009562:	6878      	ldr	r0, [r7, #4]
20009564:	f000 fa1c 	bl	200099a0 <SPI_CloseTx_ISR>
  }
}
20009568:	bf00      	nop
2000956a:	3708      	adds	r7, #8
2000956c:	46bd      	mov	sp, r7
2000956e:	bd80      	pop	{r7, pc}

20009570 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20009570:	b580      	push	{r7, lr}
20009572:	b082      	sub	sp, #8
20009574:	af00      	add	r7, sp, #0
20009576:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20009578:	687b      	ldr	r3, [r7, #4]
2000957a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000957c:	881a      	ldrh	r2, [r3, #0]
2000957e:	687b      	ldr	r3, [r7, #4]
20009580:	681b      	ldr	r3, [r3, #0]
20009582:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
20009584:	687b      	ldr	r3, [r7, #4]
20009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20009588:	1c9a      	adds	r2, r3, #2
2000958a:	687b      	ldr	r3, [r7, #4]
2000958c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
2000958e:	687b      	ldr	r3, [r7, #4]
20009590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20009592:	b29b      	uxth	r3, r3
20009594:	3b01      	subs	r3, #1
20009596:	b29a      	uxth	r2, r3
20009598:	687b      	ldr	r3, [r7, #4]
2000959a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
2000959c:	687b      	ldr	r3, [r7, #4]
2000959e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200095a0:	b29b      	uxth	r3, r3
200095a2:	2b00      	cmp	r3, #0
200095a4:	d102      	bne.n	200095ac <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
200095a6:	6878      	ldr	r0, [r7, #4]
200095a8:	f000 f9fa 	bl	200099a0 <SPI_CloseTx_ISR>
  }
}
200095ac:	bf00      	nop
200095ae:	3708      	adds	r7, #8
200095b0:	46bd      	mov	sp, r7
200095b2:	bd80      	pop	{r7, pc}

200095b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
200095b4:	b580      	push	{r7, lr}
200095b6:	b088      	sub	sp, #32
200095b8:	af00      	add	r7, sp, #0
200095ba:	60f8      	str	r0, [r7, #12]
200095bc:	60b9      	str	r1, [r7, #8]
200095be:	603b      	str	r3, [r7, #0]
200095c0:	4613      	mov	r3, r2
200095c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
200095c4:	f7f7 fa2d 	bl	20000a22 <HAL_GetTick>
200095c8:	4602      	mov	r2, r0
200095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
200095cc:	1a9b      	subs	r3, r3, r2
200095ce:	683a      	ldr	r2, [r7, #0]
200095d0:	4413      	add	r3, r2
200095d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
200095d4:	f7f7 fa25 	bl	20000a22 <HAL_GetTick>
200095d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
200095da:	4b39      	ldr	r3, [pc, #228]	; (200096c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
200095dc:	681b      	ldr	r3, [r3, #0]
200095de:	015b      	lsls	r3, r3, #5
200095e0:	0d1b      	lsrs	r3, r3, #20
200095e2:	69fa      	ldr	r2, [r7, #28]
200095e4:	fb02 f303 	mul.w	r3, r2, r3
200095e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
200095ea:	e054      	b.n	20009696 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
200095ec:	683b      	ldr	r3, [r7, #0]
200095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
200095f2:	d050      	beq.n	20009696 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
200095f4:	f7f7 fa15 	bl	20000a22 <HAL_GetTick>
200095f8:	4602      	mov	r2, r0
200095fa:	69bb      	ldr	r3, [r7, #24]
200095fc:	1ad3      	subs	r3, r2, r3
200095fe:	69fa      	ldr	r2, [r7, #28]
20009600:	429a      	cmp	r2, r3
20009602:	d902      	bls.n	2000960a <SPI_WaitFlagStateUntilTimeout+0x56>
20009604:	69fb      	ldr	r3, [r7, #28]
20009606:	2b00      	cmp	r3, #0
20009608:	d13d      	bne.n	20009686 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
2000960a:	68fb      	ldr	r3, [r7, #12]
2000960c:	681b      	ldr	r3, [r3, #0]
2000960e:	685a      	ldr	r2, [r3, #4]
20009610:	68fb      	ldr	r3, [r7, #12]
20009612:	681b      	ldr	r3, [r3, #0]
20009614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20009618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000961a:	68fb      	ldr	r3, [r7, #12]
2000961c:	685b      	ldr	r3, [r3, #4]
2000961e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20009622:	d111      	bne.n	20009648 <SPI_WaitFlagStateUntilTimeout+0x94>
20009624:	68fb      	ldr	r3, [r7, #12]
20009626:	689b      	ldr	r3, [r3, #8]
20009628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000962c:	d004      	beq.n	20009638 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
2000962e:	68fb      	ldr	r3, [r7, #12]
20009630:	689b      	ldr	r3, [r3, #8]
20009632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20009636:	d107      	bne.n	20009648 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
20009638:	68fb      	ldr	r3, [r7, #12]
2000963a:	681b      	ldr	r3, [r3, #0]
2000963c:	681a      	ldr	r2, [r3, #0]
2000963e:	68fb      	ldr	r3, [r7, #12]
20009640:	681b      	ldr	r3, [r3, #0]
20009642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
20009648:	68fb      	ldr	r3, [r7, #12]
2000964a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000964c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
20009650:	d10f      	bne.n	20009672 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
20009652:	68fb      	ldr	r3, [r7, #12]
20009654:	681b      	ldr	r3, [r3, #0]
20009656:	681a      	ldr	r2, [r3, #0]
20009658:	68fb      	ldr	r3, [r7, #12]
2000965a:	681b      	ldr	r3, [r3, #0]
2000965c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20009660:	601a      	str	r2, [r3, #0]
20009662:	68fb      	ldr	r3, [r7, #12]
20009664:	681b      	ldr	r3, [r3, #0]
20009666:	681a      	ldr	r2, [r3, #0]
20009668:	68fb      	ldr	r3, [r7, #12]
2000966a:	681b      	ldr	r3, [r3, #0]
2000966c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20009670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
20009672:	68fb      	ldr	r3, [r7, #12]
20009674:	2201      	movs	r2, #1
20009676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
2000967a:	68fb      	ldr	r3, [r7, #12]
2000967c:	2200      	movs	r2, #0
2000967e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
20009682:	2303      	movs	r3, #3
20009684:	e017      	b.n	200096b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
20009686:	697b      	ldr	r3, [r7, #20]
20009688:	2b00      	cmp	r3, #0
2000968a:	d101      	bne.n	20009690 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
2000968c:	2300      	movs	r3, #0
2000968e:	61fb      	str	r3, [r7, #28]
      }
      count--;
20009690:	697b      	ldr	r3, [r7, #20]
20009692:	3b01      	subs	r3, #1
20009694:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
20009696:	68fb      	ldr	r3, [r7, #12]
20009698:	681b      	ldr	r3, [r3, #0]
2000969a:	689a      	ldr	r2, [r3, #8]
2000969c:	68bb      	ldr	r3, [r7, #8]
2000969e:	4013      	ands	r3, r2
200096a0:	68ba      	ldr	r2, [r7, #8]
200096a2:	429a      	cmp	r2, r3
200096a4:	bf0c      	ite	eq
200096a6:	2301      	moveq	r3, #1
200096a8:	2300      	movne	r3, #0
200096aa:	b2db      	uxtb	r3, r3
200096ac:	461a      	mov	r2, r3
200096ae:	79fb      	ldrb	r3, [r7, #7]
200096b0:	429a      	cmp	r2, r3
200096b2:	d19b      	bne.n	200095ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
200096b4:	2300      	movs	r3, #0
}
200096b6:	4618      	mov	r0, r3
200096b8:	3720      	adds	r7, #32
200096ba:	46bd      	mov	sp, r7
200096bc:	bd80      	pop	{r7, pc}
200096be:	bf00      	nop
200096c0:	200003b0 	.word	0x200003b0

200096c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
200096c4:	b580      	push	{r7, lr}
200096c6:	b086      	sub	sp, #24
200096c8:	af02      	add	r7, sp, #8
200096ca:	60f8      	str	r0, [r7, #12]
200096cc:	60b9      	str	r1, [r7, #8]
200096ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
200096d0:	68fb      	ldr	r3, [r7, #12]
200096d2:	685b      	ldr	r3, [r3, #4]
200096d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200096d8:	d111      	bne.n	200096fe <SPI_EndRxTransaction+0x3a>
200096da:	68fb      	ldr	r3, [r7, #12]
200096dc:	689b      	ldr	r3, [r3, #8]
200096de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200096e2:	d004      	beq.n	200096ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
200096e4:	68fb      	ldr	r3, [r7, #12]
200096e6:	689b      	ldr	r3, [r3, #8]
200096e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
200096ec:	d107      	bne.n	200096fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
200096ee:	68fb      	ldr	r3, [r7, #12]
200096f0:	681b      	ldr	r3, [r3, #0]
200096f2:	681a      	ldr	r2, [r3, #0]
200096f4:	68fb      	ldr	r3, [r7, #12]
200096f6:	681b      	ldr	r3, [r3, #0]
200096f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200096fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
200096fe:	68fb      	ldr	r3, [r7, #12]
20009700:	685b      	ldr	r3, [r3, #4]
20009702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20009706:	d12a      	bne.n	2000975e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
20009708:	68fb      	ldr	r3, [r7, #12]
2000970a:	689b      	ldr	r3, [r3, #8]
2000970c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20009710:	d012      	beq.n	20009738 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
20009712:	687b      	ldr	r3, [r7, #4]
20009714:	9300      	str	r3, [sp, #0]
20009716:	68bb      	ldr	r3, [r7, #8]
20009718:	2200      	movs	r2, #0
2000971a:	2180      	movs	r1, #128	; 0x80
2000971c:	68f8      	ldr	r0, [r7, #12]
2000971e:	f7ff ff49 	bl	200095b4 <SPI_WaitFlagStateUntilTimeout>
20009722:	4603      	mov	r3, r0
20009724:	2b00      	cmp	r3, #0
20009726:	d02d      	beq.n	20009784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009728:	68fb      	ldr	r3, [r7, #12]
2000972a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000972c:	f043 0220 	orr.w	r2, r3, #32
20009730:	68fb      	ldr	r3, [r7, #12]
20009732:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
20009734:	2303      	movs	r3, #3
20009736:	e026      	b.n	20009786 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
20009738:	687b      	ldr	r3, [r7, #4]
2000973a:	9300      	str	r3, [sp, #0]
2000973c:	68bb      	ldr	r3, [r7, #8]
2000973e:	2200      	movs	r2, #0
20009740:	2101      	movs	r1, #1
20009742:	68f8      	ldr	r0, [r7, #12]
20009744:	f7ff ff36 	bl	200095b4 <SPI_WaitFlagStateUntilTimeout>
20009748:	4603      	mov	r3, r0
2000974a:	2b00      	cmp	r3, #0
2000974c:	d01a      	beq.n	20009784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000974e:	68fb      	ldr	r3, [r7, #12]
20009750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009752:	f043 0220 	orr.w	r2, r3, #32
20009756:	68fb      	ldr	r3, [r7, #12]
20009758:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
2000975a:	2303      	movs	r3, #3
2000975c:	e013      	b.n	20009786 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
2000975e:	687b      	ldr	r3, [r7, #4]
20009760:	9300      	str	r3, [sp, #0]
20009762:	68bb      	ldr	r3, [r7, #8]
20009764:	2200      	movs	r2, #0
20009766:	2101      	movs	r1, #1
20009768:	68f8      	ldr	r0, [r7, #12]
2000976a:	f7ff ff23 	bl	200095b4 <SPI_WaitFlagStateUntilTimeout>
2000976e:	4603      	mov	r3, r0
20009770:	2b00      	cmp	r3, #0
20009772:	d007      	beq.n	20009784 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009774:	68fb      	ldr	r3, [r7, #12]
20009776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009778:	f043 0220 	orr.w	r2, r3, #32
2000977c:	68fb      	ldr	r3, [r7, #12]
2000977e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
20009780:	2303      	movs	r3, #3
20009782:	e000      	b.n	20009786 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
20009784:	2300      	movs	r3, #0
}
20009786:	4618      	mov	r0, r3
20009788:	3710      	adds	r7, #16
2000978a:	46bd      	mov	sp, r7
2000978c:	bd80      	pop	{r7, pc}
	...

20009790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
20009790:	b580      	push	{r7, lr}
20009792:	b088      	sub	sp, #32
20009794:	af02      	add	r7, sp, #8
20009796:	60f8      	str	r0, [r7, #12]
20009798:	60b9      	str	r1, [r7, #8]
2000979a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
2000979c:	687b      	ldr	r3, [r7, #4]
2000979e:	9300      	str	r3, [sp, #0]
200097a0:	68bb      	ldr	r3, [r7, #8]
200097a2:	2201      	movs	r2, #1
200097a4:	2102      	movs	r1, #2
200097a6:	68f8      	ldr	r0, [r7, #12]
200097a8:	f7ff ff04 	bl	200095b4 <SPI_WaitFlagStateUntilTimeout>
200097ac:	4603      	mov	r3, r0
200097ae:	2b00      	cmp	r3, #0
200097b0:	d007      	beq.n	200097c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200097b2:	68fb      	ldr	r3, [r7, #12]
200097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200097b6:	f043 0220 	orr.w	r2, r3, #32
200097ba:	68fb      	ldr	r3, [r7, #12]
200097bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
200097be:	2303      	movs	r3, #3
200097c0:	e032      	b.n	20009828 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
200097c2:	4b1b      	ldr	r3, [pc, #108]	; (20009830 <SPI_EndRxTxTransaction+0xa0>)
200097c4:	681b      	ldr	r3, [r3, #0]
200097c6:	4a1b      	ldr	r2, [pc, #108]	; (20009834 <SPI_EndRxTxTransaction+0xa4>)
200097c8:	fba2 2303 	umull	r2, r3, r2, r3
200097cc:	0d5b      	lsrs	r3, r3, #21
200097ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
200097d2:	fb02 f303 	mul.w	r3, r2, r3
200097d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
200097d8:	68fb      	ldr	r3, [r7, #12]
200097da:	685b      	ldr	r3, [r3, #4]
200097dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200097e0:	d112      	bne.n	20009808 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
200097e2:	687b      	ldr	r3, [r7, #4]
200097e4:	9300      	str	r3, [sp, #0]
200097e6:	68bb      	ldr	r3, [r7, #8]
200097e8:	2200      	movs	r2, #0
200097ea:	2180      	movs	r1, #128	; 0x80
200097ec:	68f8      	ldr	r0, [r7, #12]
200097ee:	f7ff fee1 	bl	200095b4 <SPI_WaitFlagStateUntilTimeout>
200097f2:	4603      	mov	r3, r0
200097f4:	2b00      	cmp	r3, #0
200097f6:	d016      	beq.n	20009826 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200097f8:	68fb      	ldr	r3, [r7, #12]
200097fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200097fc:	f043 0220 	orr.w	r2, r3, #32
20009800:	68fb      	ldr	r3, [r7, #12]
20009802:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
20009804:	2303      	movs	r3, #3
20009806:	e00f      	b.n	20009828 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
20009808:	697b      	ldr	r3, [r7, #20]
2000980a:	2b00      	cmp	r3, #0
2000980c:	d00a      	beq.n	20009824 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
2000980e:	697b      	ldr	r3, [r7, #20]
20009810:	3b01      	subs	r3, #1
20009812:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
20009814:	68fb      	ldr	r3, [r7, #12]
20009816:	681b      	ldr	r3, [r3, #0]
20009818:	689b      	ldr	r3, [r3, #8]
2000981a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000981e:	2b80      	cmp	r3, #128	; 0x80
20009820:	d0f2      	beq.n	20009808 <SPI_EndRxTxTransaction+0x78>
20009822:	e000      	b.n	20009826 <SPI_EndRxTxTransaction+0x96>
        break;
20009824:	bf00      	nop
  }

  return HAL_OK;
20009826:	2300      	movs	r3, #0
}
20009828:	4618      	mov	r0, r3
2000982a:	3718      	adds	r7, #24
2000982c:	46bd      	mov	sp, r7
2000982e:	bd80      	pop	{r7, pc}
20009830:	200003b0 	.word	0x200003b0
20009834:	165e9f81 	.word	0x165e9f81

20009838 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
20009838:	b580      	push	{r7, lr}
2000983a:	b086      	sub	sp, #24
2000983c:	af00      	add	r7, sp, #0
2000983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20009840:	4b35      	ldr	r3, [pc, #212]	; (20009918 <SPI_CloseRxTx_ISR+0xe0>)
20009842:	681b      	ldr	r3, [r3, #0]
20009844:	4a35      	ldr	r2, [pc, #212]	; (2000991c <SPI_CloseRxTx_ISR+0xe4>)
20009846:	fba2 2303 	umull	r2, r3, r2, r3
2000984a:	0a5b      	lsrs	r3, r3, #9
2000984c:	2264      	movs	r2, #100	; 0x64
2000984e:	fb02 f303 	mul.w	r3, r2, r3
20009852:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
20009854:	f7f7 f8e5 	bl	20000a22 <HAL_GetTick>
20009858:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000985a:	687b      	ldr	r3, [r7, #4]
2000985c:	681b      	ldr	r3, [r3, #0]
2000985e:	685a      	ldr	r2, [r3, #4]
20009860:	687b      	ldr	r3, [r7, #4]
20009862:	681b      	ldr	r3, [r3, #0]
20009864:	f022 0220 	bic.w	r2, r2, #32
20009868:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
2000986a:	693b      	ldr	r3, [r7, #16]
2000986c:	2b00      	cmp	r3, #0
2000986e:	d106      	bne.n	2000987e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009870:	687b      	ldr	r3, [r7, #4]
20009872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009874:	f043 0220 	orr.w	r2, r3, #32
20009878:	687b      	ldr	r3, [r7, #4]
2000987a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
2000987c:	e009      	b.n	20009892 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
2000987e:	693b      	ldr	r3, [r7, #16]
20009880:	3b01      	subs	r3, #1
20009882:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20009884:	687b      	ldr	r3, [r7, #4]
20009886:	681b      	ldr	r3, [r3, #0]
20009888:	689b      	ldr	r3, [r3, #8]
2000988a:	f003 0302 	and.w	r3, r3, #2
2000988e:	2b00      	cmp	r3, #0
20009890:	d0eb      	beq.n	2000986a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20009892:	697a      	ldr	r2, [r7, #20]
20009894:	2164      	movs	r1, #100	; 0x64
20009896:	6878      	ldr	r0, [r7, #4]
20009898:	f7ff ff7a 	bl	20009790 <SPI_EndRxTxTransaction>
2000989c:	4603      	mov	r3, r0
2000989e:	2b00      	cmp	r3, #0
200098a0:	d005      	beq.n	200098ae <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200098a2:	687b      	ldr	r3, [r7, #4]
200098a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200098a6:	f043 0220 	orr.w	r2, r3, #32
200098aa:	687b      	ldr	r3, [r7, #4]
200098ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200098ae:	687b      	ldr	r3, [r7, #4]
200098b0:	689b      	ldr	r3, [r3, #8]
200098b2:	2b00      	cmp	r3, #0
200098b4:	d10a      	bne.n	200098cc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200098b6:	2300      	movs	r3, #0
200098b8:	60fb      	str	r3, [r7, #12]
200098ba:	687b      	ldr	r3, [r7, #4]
200098bc:	681b      	ldr	r3, [r3, #0]
200098be:	68db      	ldr	r3, [r3, #12]
200098c0:	60fb      	str	r3, [r7, #12]
200098c2:	687b      	ldr	r3, [r7, #4]
200098c4:	681b      	ldr	r3, [r3, #0]
200098c6:	689b      	ldr	r3, [r3, #8]
200098c8:	60fb      	str	r3, [r7, #12]
200098ca:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
200098cc:	687b      	ldr	r3, [r7, #4]
200098ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200098d0:	2b00      	cmp	r3, #0
200098d2:	d115      	bne.n	20009900 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
200098d4:	687b      	ldr	r3, [r7, #4]
200098d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200098da:	b2db      	uxtb	r3, r3
200098dc:	2b04      	cmp	r3, #4
200098de:	d107      	bne.n	200098f0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
200098e0:	687b      	ldr	r3, [r7, #4]
200098e2:	2201      	movs	r2, #1
200098e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
200098e8:	6878      	ldr	r0, [r7, #4]
200098ea:	f7ff fa9d 	bl	20008e28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
200098ee:	e00e      	b.n	2000990e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
200098f0:	687b      	ldr	r3, [r7, #4]
200098f2:	2201      	movs	r2, #1
200098f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
200098f8:	6878      	ldr	r0, [r7, #4]
200098fa:	f7ff fa9f 	bl	20008e3c <HAL_SPI_TxRxCpltCallback>
}
200098fe:	e006      	b.n	2000990e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
20009900:	687b      	ldr	r3, [r7, #4]
20009902:	2201      	movs	r2, #1
20009904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
20009908:	6878      	ldr	r0, [r7, #4]
2000990a:	f7ff fabf 	bl	20008e8c <HAL_SPI_ErrorCallback>
}
2000990e:	bf00      	nop
20009910:	3718      	adds	r7, #24
20009912:	46bd      	mov	sp, r7
20009914:	bd80      	pop	{r7, pc}
20009916:	bf00      	nop
20009918:	200003b0 	.word	0x200003b0
2000991c:	057619f1 	.word	0x057619f1

20009920 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
20009920:	b580      	push	{r7, lr}
20009922:	b084      	sub	sp, #16
20009924:	af00      	add	r7, sp, #0
20009926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20009928:	687b      	ldr	r3, [r7, #4]
2000992a:	681b      	ldr	r3, [r3, #0]
2000992c:	685a      	ldr	r2, [r3, #4]
2000992e:	687b      	ldr	r3, [r7, #4]
20009930:	681b      	ldr	r3, [r3, #0]
20009932:	f022 0260 	bic.w	r2, r2, #96	; 0x60
20009936:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
20009938:	f7f7 f873 	bl	20000a22 <HAL_GetTick>
2000993c:	4603      	mov	r3, r0
2000993e:	461a      	mov	r2, r3
20009940:	2164      	movs	r1, #100	; 0x64
20009942:	6878      	ldr	r0, [r7, #4]
20009944:	f7ff febe 	bl	200096c4 <SPI_EndRxTransaction>
20009948:	4603      	mov	r3, r0
2000994a:	2b00      	cmp	r3, #0
2000994c:	d005      	beq.n	2000995a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000994e:	687b      	ldr	r3, [r7, #4]
20009950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009952:	f043 0220 	orr.w	r2, r3, #32
20009956:	687b      	ldr	r3, [r7, #4]
20009958:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000995a:	687b      	ldr	r3, [r7, #4]
2000995c:	689b      	ldr	r3, [r3, #8]
2000995e:	2b00      	cmp	r3, #0
20009960:	d10a      	bne.n	20009978 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009962:	2300      	movs	r3, #0
20009964:	60fb      	str	r3, [r7, #12]
20009966:	687b      	ldr	r3, [r7, #4]
20009968:	681b      	ldr	r3, [r3, #0]
2000996a:	68db      	ldr	r3, [r3, #12]
2000996c:	60fb      	str	r3, [r7, #12]
2000996e:	687b      	ldr	r3, [r7, #4]
20009970:	681b      	ldr	r3, [r3, #0]
20009972:	689b      	ldr	r3, [r3, #8]
20009974:	60fb      	str	r3, [r7, #12]
20009976:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
20009978:	687b      	ldr	r3, [r7, #4]
2000997a:	2201      	movs	r2, #1
2000997c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
20009980:	687b      	ldr	r3, [r7, #4]
20009982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009984:	2b00      	cmp	r3, #0
20009986:	d103      	bne.n	20009990 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
20009988:	6878      	ldr	r0, [r7, #4]
2000998a:	f7ff fa4d 	bl	20008e28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
2000998e:	e002      	b.n	20009996 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
20009990:	6878      	ldr	r0, [r7, #4]
20009992:	f7ff fa7b 	bl	20008e8c <HAL_SPI_ErrorCallback>
}
20009996:	bf00      	nop
20009998:	3710      	adds	r7, #16
2000999a:	46bd      	mov	sp, r7
2000999c:	bd80      	pop	{r7, pc}
	...

200099a0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
200099a0:	b580      	push	{r7, lr}
200099a2:	b086      	sub	sp, #24
200099a4:	af00      	add	r7, sp, #0
200099a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200099a8:	4b2c      	ldr	r3, [pc, #176]	; (20009a5c <SPI_CloseTx_ISR+0xbc>)
200099aa:	681b      	ldr	r3, [r3, #0]
200099ac:	4a2c      	ldr	r2, [pc, #176]	; (20009a60 <SPI_CloseTx_ISR+0xc0>)
200099ae:	fba2 2303 	umull	r2, r3, r2, r3
200099b2:	0a5b      	lsrs	r3, r3, #9
200099b4:	2264      	movs	r2, #100	; 0x64
200099b6:	fb02 f303 	mul.w	r3, r2, r3
200099ba:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200099bc:	f7f7 f831 	bl	20000a22 <HAL_GetTick>
200099c0:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
200099c2:	693b      	ldr	r3, [r7, #16]
200099c4:	2b00      	cmp	r3, #0
200099c6:	d106      	bne.n	200099d6 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200099c8:	687b      	ldr	r3, [r7, #4]
200099ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200099cc:	f043 0220 	orr.w	r2, r3, #32
200099d0:	687b      	ldr	r3, [r7, #4]
200099d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
200099d4:	e009      	b.n	200099ea <SPI_CloseTx_ISR+0x4a>
    }
    count--;
200099d6:	693b      	ldr	r3, [r7, #16]
200099d8:	3b01      	subs	r3, #1
200099da:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
200099dc:	687b      	ldr	r3, [r7, #4]
200099de:	681b      	ldr	r3, [r3, #0]
200099e0:	689b      	ldr	r3, [r3, #8]
200099e2:	f003 0302 	and.w	r3, r3, #2
200099e6:	2b00      	cmp	r3, #0
200099e8:	d0eb      	beq.n	200099c2 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
200099ea:	687b      	ldr	r3, [r7, #4]
200099ec:	681b      	ldr	r3, [r3, #0]
200099ee:	685a      	ldr	r2, [r3, #4]
200099f0:	687b      	ldr	r3, [r7, #4]
200099f2:	681b      	ldr	r3, [r3, #0]
200099f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
200099f8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
200099fa:	697a      	ldr	r2, [r7, #20]
200099fc:	2164      	movs	r1, #100	; 0x64
200099fe:	6878      	ldr	r0, [r7, #4]
20009a00:	f7ff fec6 	bl	20009790 <SPI_EndRxTxTransaction>
20009a04:	4603      	mov	r3, r0
20009a06:	2b00      	cmp	r3, #0
20009a08:	d005      	beq.n	20009a16 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009a0a:	687b      	ldr	r3, [r7, #4]
20009a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009a0e:	f043 0220 	orr.w	r2, r3, #32
20009a12:	687b      	ldr	r3, [r7, #4]
20009a14:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20009a16:	687b      	ldr	r3, [r7, #4]
20009a18:	689b      	ldr	r3, [r3, #8]
20009a1a:	2b00      	cmp	r3, #0
20009a1c:	d10a      	bne.n	20009a34 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009a1e:	2300      	movs	r3, #0
20009a20:	60fb      	str	r3, [r7, #12]
20009a22:	687b      	ldr	r3, [r7, #4]
20009a24:	681b      	ldr	r3, [r3, #0]
20009a26:	68db      	ldr	r3, [r3, #12]
20009a28:	60fb      	str	r3, [r7, #12]
20009a2a:	687b      	ldr	r3, [r7, #4]
20009a2c:	681b      	ldr	r3, [r3, #0]
20009a2e:	689b      	ldr	r3, [r3, #8]
20009a30:	60fb      	str	r3, [r7, #12]
20009a32:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
20009a34:	687b      	ldr	r3, [r7, #4]
20009a36:	2201      	movs	r2, #1
20009a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20009a3c:	687b      	ldr	r3, [r7, #4]
20009a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009a40:	2b00      	cmp	r3, #0
20009a42:	d003      	beq.n	20009a4c <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
20009a44:	6878      	ldr	r0, [r7, #4]
20009a46:	f7ff fa21 	bl	20008e8c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
20009a4a:	e002      	b.n	20009a52 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
20009a4c:	6878      	ldr	r0, [r7, #4]
20009a4e:	f7ff f9e1 	bl	20008e14 <HAL_SPI_TxCpltCallback>
}
20009a52:	bf00      	nop
20009a54:	3718      	adds	r7, #24
20009a56:	46bd      	mov	sp, r7
20009a58:	bd80      	pop	{r7, pc}
20009a5a:	bf00      	nop
20009a5c:	200003b0 	.word	0x200003b0
20009a60:	057619f1 	.word	0x057619f1

20009a64 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
20009a64:	b480      	push	{r7}
20009a66:	b085      	sub	sp, #20
20009a68:	af00      	add	r7, sp, #0
20009a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
20009a6c:	2300      	movs	r3, #0
20009a6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20009a70:	4b1e      	ldr	r3, [pc, #120]	; (20009aec <SPI_AbortRx_ISR+0x88>)
20009a72:	681b      	ldr	r3, [r3, #0]
20009a74:	4a1e      	ldr	r2, [pc, #120]	; (20009af0 <SPI_AbortRx_ISR+0x8c>)
20009a76:	fba2 2303 	umull	r2, r3, r2, r3
20009a7a:	0a5b      	lsrs	r3, r3, #9
20009a7c:	2264      	movs	r2, #100	; 0x64
20009a7e:	fb02 f303 	mul.w	r3, r2, r3
20009a82:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20009a84:	68bb      	ldr	r3, [r7, #8]
20009a86:	2b00      	cmp	r3, #0
20009a88:	d106      	bne.n	20009a98 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20009a8a:	687b      	ldr	r3, [r7, #4]
20009a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20009a92:	687b      	ldr	r3, [r7, #4]
20009a94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
20009a96:	e009      	b.n	20009aac <SPI_AbortRx_ISR+0x48>
    }
    count--;
20009a98:	68bb      	ldr	r3, [r7, #8]
20009a9a:	3b01      	subs	r3, #1
20009a9c:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20009a9e:	687b      	ldr	r3, [r7, #4]
20009aa0:	681b      	ldr	r3, [r3, #0]
20009aa2:	689b      	ldr	r3, [r3, #8]
20009aa4:	f003 0302 	and.w	r3, r3, #2
20009aa8:	2b00      	cmp	r3, #0
20009aaa:	d0eb      	beq.n	20009a84 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20009aac:	687b      	ldr	r3, [r7, #4]
20009aae:	681b      	ldr	r3, [r3, #0]
20009ab0:	681a      	ldr	r2, [r3, #0]
20009ab2:	687b      	ldr	r3, [r7, #4]
20009ab4:	681b      	ldr	r3, [r3, #0]
20009ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009aba:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
20009abc:	687b      	ldr	r3, [r7, #4]
20009abe:	681b      	ldr	r3, [r3, #0]
20009ac0:	685a      	ldr	r2, [r3, #4]
20009ac2:	687b      	ldr	r3, [r7, #4]
20009ac4:	681b      	ldr	r3, [r3, #0]
20009ac6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20009aca:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
20009acc:	687b      	ldr	r3, [r7, #4]
20009ace:	681b      	ldr	r3, [r3, #0]
20009ad0:	68db      	ldr	r3, [r3, #12]
20009ad2:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
20009ad4:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
20009ad6:	687b      	ldr	r3, [r7, #4]
20009ad8:	2207      	movs	r2, #7
20009ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
20009ade:	bf00      	nop
20009ae0:	3714      	adds	r7, #20
20009ae2:	46bd      	mov	sp, r7
20009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
20009ae8:	4770      	bx	lr
20009aea:	bf00      	nop
20009aec:	200003b0 	.word	0x200003b0
20009af0:	057619f1 	.word	0x057619f1

20009af4 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
20009af4:	b480      	push	{r7}
20009af6:	b083      	sub	sp, #12
20009af8:	af00      	add	r7, sp, #0
20009afa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
20009afc:	687b      	ldr	r3, [r7, #4]
20009afe:	681b      	ldr	r3, [r3, #0]
20009b00:	685a      	ldr	r2, [r3, #4]
20009b02:	687b      	ldr	r3, [r7, #4]
20009b04:	681b      	ldr	r3, [r3, #0]
20009b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20009b0a:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20009b0c:	687b      	ldr	r3, [r7, #4]
20009b0e:	681b      	ldr	r3, [r3, #0]
20009b10:	681a      	ldr	r2, [r3, #0]
20009b12:	687b      	ldr	r3, [r7, #4]
20009b14:	681b      	ldr	r3, [r3, #0]
20009b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009b1a:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
20009b1c:	687b      	ldr	r3, [r7, #4]
20009b1e:	2207      	movs	r2, #7
20009b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
20009b24:	bf00      	nop
20009b26:	370c      	adds	r7, #12
20009b28:	46bd      	mov	sp, r7
20009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
20009b2e:	4770      	bx	lr

20009b30 <exit>:
20009b30:	b508      	push	{r3, lr}
20009b32:	4b06      	ldr	r3, [pc, #24]	; (20009b4c <exit+0x1c>)
20009b34:	4604      	mov	r4, r0
20009b36:	b113      	cbz	r3, 20009b3e <exit+0xe>
20009b38:	2100      	movs	r1, #0
20009b3a:	f3af 8000 	nop.w
20009b3e:	4b04      	ldr	r3, [pc, #16]	; (20009b50 <exit+0x20>)
20009b40:	681b      	ldr	r3, [r3, #0]
20009b42:	b103      	cbz	r3, 20009b46 <exit+0x16>
20009b44:	4798      	blx	r3
20009b46:	4620      	mov	r0, r4
20009b48:	f7f7 fb51 	bl	200011ee <_exit>
20009b4c:	00000000 	.word	0x00000000
20009b50:	200005f0 	.word	0x200005f0

20009b54 <std>:
20009b54:	2300      	movs	r3, #0
20009b56:	b510      	push	{r4, lr}
20009b58:	4604      	mov	r4, r0
20009b5a:	e9c0 3300 	strd	r3, r3, [r0]
20009b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
20009b62:	6083      	str	r3, [r0, #8]
20009b64:	8181      	strh	r1, [r0, #12]
20009b66:	6643      	str	r3, [r0, #100]	; 0x64
20009b68:	81c2      	strh	r2, [r0, #14]
20009b6a:	6183      	str	r3, [r0, #24]
20009b6c:	4619      	mov	r1, r3
20009b6e:	2208      	movs	r2, #8
20009b70:	305c      	adds	r0, #92	; 0x5c
20009b72:	f000 f97e 	bl	20009e72 <memset>
20009b76:	4b0d      	ldr	r3, [pc, #52]	; (20009bac <std+0x58>)
20009b78:	6263      	str	r3, [r4, #36]	; 0x24
20009b7a:	4b0d      	ldr	r3, [pc, #52]	; (20009bb0 <std+0x5c>)
20009b7c:	62a3      	str	r3, [r4, #40]	; 0x28
20009b7e:	4b0d      	ldr	r3, [pc, #52]	; (20009bb4 <std+0x60>)
20009b80:	62e3      	str	r3, [r4, #44]	; 0x2c
20009b82:	4b0d      	ldr	r3, [pc, #52]	; (20009bb8 <std+0x64>)
20009b84:	6323      	str	r3, [r4, #48]	; 0x30
20009b86:	4b0d      	ldr	r3, [pc, #52]	; (20009bbc <std+0x68>)
20009b88:	6224      	str	r4, [r4, #32]
20009b8a:	429c      	cmp	r4, r3
20009b8c:	d006      	beq.n	20009b9c <std+0x48>
20009b8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
20009b92:	4294      	cmp	r4, r2
20009b94:	d002      	beq.n	20009b9c <std+0x48>
20009b96:	33d0      	adds	r3, #208	; 0xd0
20009b98:	429c      	cmp	r4, r3
20009b9a:	d105      	bne.n	20009ba8 <std+0x54>
20009b9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
20009ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009ba4:	f000 ba35 	b.w	2000a012 <__retarget_lock_init_recursive>
20009ba8:	bd10      	pop	{r4, pc}
20009baa:	bf00      	nop
20009bac:	20009de9 	.word	0x20009de9
20009bb0:	20009e0f 	.word	0x20009e0f
20009bb4:	20009e47 	.word	0x20009e47
20009bb8:	20009e6b 	.word	0x20009e6b
20009bbc:	200004b8 	.word	0x200004b8

20009bc0 <stdio_exit_handler>:
20009bc0:	4a02      	ldr	r2, [pc, #8]	; (20009bcc <stdio_exit_handler+0xc>)
20009bc2:	4903      	ldr	r1, [pc, #12]	; (20009bd0 <stdio_exit_handler+0x10>)
20009bc4:	4803      	ldr	r0, [pc, #12]	; (20009bd4 <stdio_exit_handler+0x14>)
20009bc6:	f000 b8f1 	b.w	20009dac <_fwalk_sglue>
20009bca:	bf00      	nop
20009bcc:	200003bc 	.word	0x200003bc
20009bd0:	2000a325 	.word	0x2000a325
20009bd4:	200003c8 	.word	0x200003c8

20009bd8 <cleanup_stdio>:
20009bd8:	6841      	ldr	r1, [r0, #4]
20009bda:	4b0c      	ldr	r3, [pc, #48]	; (20009c0c <cleanup_stdio+0x34>)
20009bdc:	4299      	cmp	r1, r3
20009bde:	b510      	push	{r4, lr}
20009be0:	4604      	mov	r4, r0
20009be2:	d001      	beq.n	20009be8 <cleanup_stdio+0x10>
20009be4:	f000 fb9e 	bl	2000a324 <_fflush_r>
20009be8:	68a1      	ldr	r1, [r4, #8]
20009bea:	4b09      	ldr	r3, [pc, #36]	; (20009c10 <cleanup_stdio+0x38>)
20009bec:	4299      	cmp	r1, r3
20009bee:	d002      	beq.n	20009bf6 <cleanup_stdio+0x1e>
20009bf0:	4620      	mov	r0, r4
20009bf2:	f000 fb97 	bl	2000a324 <_fflush_r>
20009bf6:	68e1      	ldr	r1, [r4, #12]
20009bf8:	4b06      	ldr	r3, [pc, #24]	; (20009c14 <cleanup_stdio+0x3c>)
20009bfa:	4299      	cmp	r1, r3
20009bfc:	d004      	beq.n	20009c08 <cleanup_stdio+0x30>
20009bfe:	4620      	mov	r0, r4
20009c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009c04:	f000 bb8e 	b.w	2000a324 <_fflush_r>
20009c08:	bd10      	pop	{r4, pc}
20009c0a:	bf00      	nop
20009c0c:	200004b8 	.word	0x200004b8
20009c10:	20000520 	.word	0x20000520
20009c14:	20000588 	.word	0x20000588

20009c18 <__fp_lock>:
20009c18:	b508      	push	{r3, lr}
20009c1a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
20009c1c:	07da      	lsls	r2, r3, #31
20009c1e:	d405      	bmi.n	20009c2c <__fp_lock+0x14>
20009c20:	898b      	ldrh	r3, [r1, #12]
20009c22:	059b      	lsls	r3, r3, #22
20009c24:	d402      	bmi.n	20009c2c <__fp_lock+0x14>
20009c26:	6d88      	ldr	r0, [r1, #88]	; 0x58
20009c28:	f000 f9f7 	bl	2000a01a <__retarget_lock_acquire_recursive>
20009c2c:	2000      	movs	r0, #0
20009c2e:	bd08      	pop	{r3, pc}

20009c30 <__fp_unlock>:
20009c30:	b508      	push	{r3, lr}
20009c32:	6e4b      	ldr	r3, [r1, #100]	; 0x64
20009c34:	07da      	lsls	r2, r3, #31
20009c36:	d405      	bmi.n	20009c44 <__fp_unlock+0x14>
20009c38:	898b      	ldrh	r3, [r1, #12]
20009c3a:	059b      	lsls	r3, r3, #22
20009c3c:	d402      	bmi.n	20009c44 <__fp_unlock+0x14>
20009c3e:	6d88      	ldr	r0, [r1, #88]	; 0x58
20009c40:	f000 f9f1 	bl	2000a026 <__retarget_lock_release_recursive>
20009c44:	2000      	movs	r0, #0
20009c46:	bd08      	pop	{r3, pc}

20009c48 <global_stdio_init.part.0>:
20009c48:	b510      	push	{r4, lr}
20009c4a:	4b0b      	ldr	r3, [pc, #44]	; (20009c78 <global_stdio_init.part.0+0x30>)
20009c4c:	4c0b      	ldr	r4, [pc, #44]	; (20009c7c <global_stdio_init.part.0+0x34>)
20009c4e:	4a0c      	ldr	r2, [pc, #48]	; (20009c80 <global_stdio_init.part.0+0x38>)
20009c50:	601a      	str	r2, [r3, #0]
20009c52:	4620      	mov	r0, r4
20009c54:	2200      	movs	r2, #0
20009c56:	2104      	movs	r1, #4
20009c58:	f7ff ff7c 	bl	20009b54 <std>
20009c5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
20009c60:	2201      	movs	r2, #1
20009c62:	2109      	movs	r1, #9
20009c64:	f7ff ff76 	bl	20009b54 <std>
20009c68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
20009c6c:	2202      	movs	r2, #2
20009c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009c72:	2112      	movs	r1, #18
20009c74:	f7ff bf6e 	b.w	20009b54 <std>
20009c78:	200005f0 	.word	0x200005f0
20009c7c:	200004b8 	.word	0x200004b8
20009c80:	20009bc1 	.word	0x20009bc1

20009c84 <__sfp_lock_acquire>:
20009c84:	4801      	ldr	r0, [pc, #4]	; (20009c8c <__sfp_lock_acquire+0x8>)
20009c86:	f000 b9c8 	b.w	2000a01a <__retarget_lock_acquire_recursive>
20009c8a:	bf00      	nop
20009c8c:	200005fe 	.word	0x200005fe

20009c90 <__sfp_lock_release>:
20009c90:	4801      	ldr	r0, [pc, #4]	; (20009c98 <__sfp_lock_release+0x8>)
20009c92:	f000 b9c8 	b.w	2000a026 <__retarget_lock_release_recursive>
20009c96:	bf00      	nop
20009c98:	200005fe 	.word	0x200005fe

20009c9c <__sfp>:
20009c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20009ca0:	4607      	mov	r7, r0
20009ca2:	f7ff ffef 	bl	20009c84 <__sfp_lock_acquire>
20009ca6:	4b24      	ldr	r3, [pc, #144]	; (20009d38 <__sfp+0x9c>)
20009ca8:	681b      	ldr	r3, [r3, #0]
20009caa:	b90b      	cbnz	r3, 20009cb0 <__sfp+0x14>
20009cac:	f7ff ffcc 	bl	20009c48 <global_stdio_init.part.0>
20009cb0:	4e22      	ldr	r6, [pc, #136]	; (20009d3c <__sfp+0xa0>)
20009cb2:	f04f 0804 	mov.w	r8, #4
20009cb6:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
20009cba:	3b01      	subs	r3, #1
20009cbc:	d50f      	bpl.n	20009cde <__sfp+0x42>
20009cbe:	6835      	ldr	r5, [r6, #0]
20009cc0:	2d00      	cmp	r5, #0
20009cc2:	d137      	bne.n	20009d34 <__sfp+0x98>
20009cc4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
20009cc8:	4638      	mov	r0, r7
20009cca:	f000 fa19 	bl	2000a100 <_malloc_r>
20009cce:	4604      	mov	r4, r0
20009cd0:	bb30      	cbnz	r0, 20009d20 <__sfp+0x84>
20009cd2:	6030      	str	r0, [r6, #0]
20009cd4:	f7ff ffdc 	bl	20009c90 <__sfp_lock_release>
20009cd8:	230c      	movs	r3, #12
20009cda:	603b      	str	r3, [r7, #0]
20009cdc:	e01b      	b.n	20009d16 <__sfp+0x7a>
20009cde:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
20009ce2:	b9dd      	cbnz	r5, 20009d1c <__sfp+0x80>
20009ce4:	4b16      	ldr	r3, [pc, #88]	; (20009d40 <__sfp+0xa4>)
20009ce6:	60e3      	str	r3, [r4, #12]
20009ce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
20009cec:	6665      	str	r5, [r4, #100]	; 0x64
20009cee:	f000 f990 	bl	2000a012 <__retarget_lock_init_recursive>
20009cf2:	f7ff ffcd 	bl	20009c90 <__sfp_lock_release>
20009cf6:	e9c4 5501 	strd	r5, r5, [r4, #4]
20009cfa:	e9c4 5504 	strd	r5, r5, [r4, #16]
20009cfe:	6025      	str	r5, [r4, #0]
20009d00:	61a5      	str	r5, [r4, #24]
20009d02:	2208      	movs	r2, #8
20009d04:	4629      	mov	r1, r5
20009d06:	f104 005c 	add.w	r0, r4, #92	; 0x5c
20009d0a:	f000 f8b2 	bl	20009e72 <memset>
20009d0e:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
20009d12:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
20009d16:	4620      	mov	r0, r4
20009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20009d1c:	3468      	adds	r4, #104	; 0x68
20009d1e:	e7cc      	b.n	20009cba <__sfp+0x1e>
20009d20:	e9c0 5800 	strd	r5, r8, [r0]
20009d24:	300c      	adds	r0, #12
20009d26:	60a0      	str	r0, [r4, #8]
20009d28:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
20009d2c:	4629      	mov	r1, r5
20009d2e:	f000 f8a0 	bl	20009e72 <memset>
20009d32:	6034      	str	r4, [r6, #0]
20009d34:	6836      	ldr	r6, [r6, #0]
20009d36:	e7be      	b.n	20009cb6 <__sfp+0x1a>
20009d38:	200005f0 	.word	0x200005f0
20009d3c:	200003bc 	.word	0x200003bc
20009d40:	ffff0001 	.word	0xffff0001

20009d44 <__sinit>:
20009d44:	b510      	push	{r4, lr}
20009d46:	4604      	mov	r4, r0
20009d48:	f7ff ff9c 	bl	20009c84 <__sfp_lock_acquire>
20009d4c:	6a23      	ldr	r3, [r4, #32]
20009d4e:	b11b      	cbz	r3, 20009d58 <__sinit+0x14>
20009d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20009d54:	f7ff bf9c 	b.w	20009c90 <__sfp_lock_release>
20009d58:	4b04      	ldr	r3, [pc, #16]	; (20009d6c <__sinit+0x28>)
20009d5a:	6223      	str	r3, [r4, #32]
20009d5c:	4b04      	ldr	r3, [pc, #16]	; (20009d70 <__sinit+0x2c>)
20009d5e:	681b      	ldr	r3, [r3, #0]
20009d60:	2b00      	cmp	r3, #0
20009d62:	d1f5      	bne.n	20009d50 <__sinit+0xc>
20009d64:	f7ff ff70 	bl	20009c48 <global_stdio_init.part.0>
20009d68:	e7f2      	b.n	20009d50 <__sinit+0xc>
20009d6a:	bf00      	nop
20009d6c:	20009bd9 	.word	0x20009bd9
20009d70:	200005f0 	.word	0x200005f0

20009d74 <__fp_lock_all>:
20009d74:	b508      	push	{r3, lr}
20009d76:	f7ff ff85 	bl	20009c84 <__sfp_lock_acquire>
20009d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20009d7e:	4a02      	ldr	r2, [pc, #8]	; (20009d88 <__fp_lock_all+0x14>)
20009d80:	4902      	ldr	r1, [pc, #8]	; (20009d8c <__fp_lock_all+0x18>)
20009d82:	2000      	movs	r0, #0
20009d84:	f000 b812 	b.w	20009dac <_fwalk_sglue>
20009d88:	200003bc 	.word	0x200003bc
20009d8c:	20009c19 	.word	0x20009c19

20009d90 <__fp_unlock_all>:
20009d90:	b508      	push	{r3, lr}
20009d92:	4a04      	ldr	r2, [pc, #16]	; (20009da4 <__fp_unlock_all+0x14>)
20009d94:	4904      	ldr	r1, [pc, #16]	; (20009da8 <__fp_unlock_all+0x18>)
20009d96:	2000      	movs	r0, #0
20009d98:	f000 f808 	bl	20009dac <_fwalk_sglue>
20009d9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
20009da0:	f7ff bf76 	b.w	20009c90 <__sfp_lock_release>
20009da4:	200003bc 	.word	0x200003bc
20009da8:	20009c31 	.word	0x20009c31

20009dac <_fwalk_sglue>:
20009dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
20009db0:	4607      	mov	r7, r0
20009db2:	4688      	mov	r8, r1
20009db4:	4614      	mov	r4, r2
20009db6:	2600      	movs	r6, #0
20009db8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
20009dbc:	f1b9 0901 	subs.w	r9, r9, #1
20009dc0:	d505      	bpl.n	20009dce <_fwalk_sglue+0x22>
20009dc2:	6824      	ldr	r4, [r4, #0]
20009dc4:	2c00      	cmp	r4, #0
20009dc6:	d1f7      	bne.n	20009db8 <_fwalk_sglue+0xc>
20009dc8:	4630      	mov	r0, r6
20009dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
20009dce:	89ab      	ldrh	r3, [r5, #12]
20009dd0:	2b01      	cmp	r3, #1
20009dd2:	d907      	bls.n	20009de4 <_fwalk_sglue+0x38>
20009dd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
20009dd8:	3301      	adds	r3, #1
20009dda:	d003      	beq.n	20009de4 <_fwalk_sglue+0x38>
20009ddc:	4629      	mov	r1, r5
20009dde:	4638      	mov	r0, r7
20009de0:	47c0      	blx	r8
20009de2:	4306      	orrs	r6, r0
20009de4:	3568      	adds	r5, #104	; 0x68
20009de6:	e7e9      	b.n	20009dbc <_fwalk_sglue+0x10>

20009de8 <__sread>:
20009de8:	b510      	push	{r4, lr}
20009dea:	460c      	mov	r4, r1
20009dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009df0:	f000 f8c0 	bl	20009f74 <_read_r>
20009df4:	2800      	cmp	r0, #0
20009df6:	bfab      	itete	ge
20009df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
20009dfa:	89a3      	ldrhlt	r3, [r4, #12]
20009dfc:	181b      	addge	r3, r3, r0
20009dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
20009e02:	bfac      	ite	ge
20009e04:	6563      	strge	r3, [r4, #84]	; 0x54
20009e06:	81a3      	strhlt	r3, [r4, #12]
20009e08:	bd10      	pop	{r4, pc}

20009e0a <__seofread>:
20009e0a:	2000      	movs	r0, #0
20009e0c:	4770      	bx	lr

20009e0e <__swrite>:
20009e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20009e12:	461f      	mov	r7, r3
20009e14:	898b      	ldrh	r3, [r1, #12]
20009e16:	05db      	lsls	r3, r3, #23
20009e18:	4605      	mov	r5, r0
20009e1a:	460c      	mov	r4, r1
20009e1c:	4616      	mov	r6, r2
20009e1e:	d505      	bpl.n	20009e2c <__swrite+0x1e>
20009e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009e24:	2302      	movs	r3, #2
20009e26:	2200      	movs	r2, #0
20009e28:	f000 f892 	bl	20009f50 <_lseek_r>
20009e2c:	89a3      	ldrh	r3, [r4, #12]
20009e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
20009e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
20009e36:	81a3      	strh	r3, [r4, #12]
20009e38:	4632      	mov	r2, r6
20009e3a:	463b      	mov	r3, r7
20009e3c:	4628      	mov	r0, r5
20009e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
20009e42:	f000 b8a9 	b.w	20009f98 <_write_r>

20009e46 <__sseek>:
20009e46:	b510      	push	{r4, lr}
20009e48:	460c      	mov	r4, r1
20009e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009e4e:	f000 f87f 	bl	20009f50 <_lseek_r>
20009e52:	1c43      	adds	r3, r0, #1
20009e54:	89a3      	ldrh	r3, [r4, #12]
20009e56:	bf15      	itete	ne
20009e58:	6560      	strne	r0, [r4, #84]	; 0x54
20009e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
20009e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
20009e62:	81a3      	strheq	r3, [r4, #12]
20009e64:	bf18      	it	ne
20009e66:	81a3      	strhne	r3, [r4, #12]
20009e68:	bd10      	pop	{r4, pc}

20009e6a <__sclose>:
20009e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
20009e6e:	f000 b809 	b.w	20009e84 <_close_r>

20009e72 <memset>:
20009e72:	4402      	add	r2, r0
20009e74:	4603      	mov	r3, r0
20009e76:	4293      	cmp	r3, r2
20009e78:	d100      	bne.n	20009e7c <memset+0xa>
20009e7a:	4770      	bx	lr
20009e7c:	f803 1b01 	strb.w	r1, [r3], #1
20009e80:	e7f9      	b.n	20009e76 <memset+0x4>
	...

20009e84 <_close_r>:
20009e84:	b538      	push	{r3, r4, r5, lr}
20009e86:	4d06      	ldr	r5, [pc, #24]	; (20009ea0 <_close_r+0x1c>)
20009e88:	2300      	movs	r3, #0
20009e8a:	4604      	mov	r4, r0
20009e8c:	4608      	mov	r0, r1
20009e8e:	602b      	str	r3, [r5, #0]
20009e90:	f7f7 f9f0 	bl	20001274 <_close>
20009e94:	1c43      	adds	r3, r0, #1
20009e96:	d102      	bne.n	20009e9e <_close_r+0x1a>
20009e98:	682b      	ldr	r3, [r5, #0]
20009e9a:	b103      	cbz	r3, 20009e9e <_close_r+0x1a>
20009e9c:	6023      	str	r3, [r4, #0]
20009e9e:	bd38      	pop	{r3, r4, r5, pc}
20009ea0:	200005f4 	.word	0x200005f4

20009ea4 <_reclaim_reent>:
20009ea4:	4b29      	ldr	r3, [pc, #164]	; (20009f4c <_reclaim_reent+0xa8>)
20009ea6:	681b      	ldr	r3, [r3, #0]
20009ea8:	4283      	cmp	r3, r0
20009eaa:	b570      	push	{r4, r5, r6, lr}
20009eac:	4604      	mov	r4, r0
20009eae:	d04b      	beq.n	20009f48 <_reclaim_reent+0xa4>
20009eb0:	69c3      	ldr	r3, [r0, #28]
20009eb2:	b143      	cbz	r3, 20009ec6 <_reclaim_reent+0x22>
20009eb4:	68db      	ldr	r3, [r3, #12]
20009eb6:	2b00      	cmp	r3, #0
20009eb8:	d144      	bne.n	20009f44 <_reclaim_reent+0xa0>
20009eba:	69e3      	ldr	r3, [r4, #28]
20009ebc:	6819      	ldr	r1, [r3, #0]
20009ebe:	b111      	cbz	r1, 20009ec6 <_reclaim_reent+0x22>
20009ec0:	4620      	mov	r0, r4
20009ec2:	f000 f8b1 	bl	2000a028 <_free_r>
20009ec6:	6961      	ldr	r1, [r4, #20]
20009ec8:	b111      	cbz	r1, 20009ed0 <_reclaim_reent+0x2c>
20009eca:	4620      	mov	r0, r4
20009ecc:	f000 f8ac 	bl	2000a028 <_free_r>
20009ed0:	69e1      	ldr	r1, [r4, #28]
20009ed2:	b111      	cbz	r1, 20009eda <_reclaim_reent+0x36>
20009ed4:	4620      	mov	r0, r4
20009ed6:	f000 f8a7 	bl	2000a028 <_free_r>
20009eda:	6b21      	ldr	r1, [r4, #48]	; 0x30
20009edc:	b111      	cbz	r1, 20009ee4 <_reclaim_reent+0x40>
20009ede:	4620      	mov	r0, r4
20009ee0:	f000 f8a2 	bl	2000a028 <_free_r>
20009ee4:	6b61      	ldr	r1, [r4, #52]	; 0x34
20009ee6:	b111      	cbz	r1, 20009eee <_reclaim_reent+0x4a>
20009ee8:	4620      	mov	r0, r4
20009eea:	f000 f89d 	bl	2000a028 <_free_r>
20009eee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
20009ef0:	b111      	cbz	r1, 20009ef8 <_reclaim_reent+0x54>
20009ef2:	4620      	mov	r0, r4
20009ef4:	f000 f898 	bl	2000a028 <_free_r>
20009ef8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
20009efa:	b111      	cbz	r1, 20009f02 <_reclaim_reent+0x5e>
20009efc:	4620      	mov	r0, r4
20009efe:	f000 f893 	bl	2000a028 <_free_r>
20009f02:	6c61      	ldr	r1, [r4, #68]	; 0x44
20009f04:	b111      	cbz	r1, 20009f0c <_reclaim_reent+0x68>
20009f06:	4620      	mov	r0, r4
20009f08:	f000 f88e 	bl	2000a028 <_free_r>
20009f0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
20009f0e:	b111      	cbz	r1, 20009f16 <_reclaim_reent+0x72>
20009f10:	4620      	mov	r0, r4
20009f12:	f000 f889 	bl	2000a028 <_free_r>
20009f16:	6a23      	ldr	r3, [r4, #32]
20009f18:	b1b3      	cbz	r3, 20009f48 <_reclaim_reent+0xa4>
20009f1a:	4620      	mov	r0, r4
20009f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
20009f20:	4718      	bx	r3
20009f22:	5949      	ldr	r1, [r1, r5]
20009f24:	b941      	cbnz	r1, 20009f38 <_reclaim_reent+0x94>
20009f26:	3504      	adds	r5, #4
20009f28:	69e3      	ldr	r3, [r4, #28]
20009f2a:	2d80      	cmp	r5, #128	; 0x80
20009f2c:	68d9      	ldr	r1, [r3, #12]
20009f2e:	d1f8      	bne.n	20009f22 <_reclaim_reent+0x7e>
20009f30:	4620      	mov	r0, r4
20009f32:	f000 f879 	bl	2000a028 <_free_r>
20009f36:	e7c0      	b.n	20009eba <_reclaim_reent+0x16>
20009f38:	680e      	ldr	r6, [r1, #0]
20009f3a:	4620      	mov	r0, r4
20009f3c:	f000 f874 	bl	2000a028 <_free_r>
20009f40:	4631      	mov	r1, r6
20009f42:	e7ef      	b.n	20009f24 <_reclaim_reent+0x80>
20009f44:	2500      	movs	r5, #0
20009f46:	e7ef      	b.n	20009f28 <_reclaim_reent+0x84>
20009f48:	bd70      	pop	{r4, r5, r6, pc}
20009f4a:	bf00      	nop
20009f4c:	20000414 	.word	0x20000414

20009f50 <_lseek_r>:
20009f50:	b538      	push	{r3, r4, r5, lr}
20009f52:	4d07      	ldr	r5, [pc, #28]	; (20009f70 <_lseek_r+0x20>)
20009f54:	4604      	mov	r4, r0
20009f56:	4608      	mov	r0, r1
20009f58:	4611      	mov	r1, r2
20009f5a:	2200      	movs	r2, #0
20009f5c:	602a      	str	r2, [r5, #0]
20009f5e:	461a      	mov	r2, r3
20009f60:	f7f7 f9af 	bl	200012c2 <_lseek>
20009f64:	1c43      	adds	r3, r0, #1
20009f66:	d102      	bne.n	20009f6e <_lseek_r+0x1e>
20009f68:	682b      	ldr	r3, [r5, #0]
20009f6a:	b103      	cbz	r3, 20009f6e <_lseek_r+0x1e>
20009f6c:	6023      	str	r3, [r4, #0]
20009f6e:	bd38      	pop	{r3, r4, r5, pc}
20009f70:	200005f4 	.word	0x200005f4

20009f74 <_read_r>:
20009f74:	b538      	push	{r3, r4, r5, lr}
20009f76:	4d07      	ldr	r5, [pc, #28]	; (20009f94 <_read_r+0x20>)
20009f78:	4604      	mov	r4, r0
20009f7a:	4608      	mov	r0, r1
20009f7c:	4611      	mov	r1, r2
20009f7e:	2200      	movs	r2, #0
20009f80:	602a      	str	r2, [r5, #0]
20009f82:	461a      	mov	r2, r3
20009f84:	f7f7 f93d 	bl	20001202 <_read>
20009f88:	1c43      	adds	r3, r0, #1
20009f8a:	d102      	bne.n	20009f92 <_read_r+0x1e>
20009f8c:	682b      	ldr	r3, [r5, #0]
20009f8e:	b103      	cbz	r3, 20009f92 <_read_r+0x1e>
20009f90:	6023      	str	r3, [r4, #0]
20009f92:	bd38      	pop	{r3, r4, r5, pc}
20009f94:	200005f4 	.word	0x200005f4

20009f98 <_write_r>:
20009f98:	b538      	push	{r3, r4, r5, lr}
20009f9a:	4d07      	ldr	r5, [pc, #28]	; (20009fb8 <_write_r+0x20>)
20009f9c:	4604      	mov	r4, r0
20009f9e:	4608      	mov	r0, r1
20009fa0:	4611      	mov	r1, r2
20009fa2:	2200      	movs	r2, #0
20009fa4:	602a      	str	r2, [r5, #0]
20009fa6:	461a      	mov	r2, r3
20009fa8:	f7f7 f948 	bl	2000123c <_write>
20009fac:	1c43      	adds	r3, r0, #1
20009fae:	d102      	bne.n	20009fb6 <_write_r+0x1e>
20009fb0:	682b      	ldr	r3, [r5, #0]
20009fb2:	b103      	cbz	r3, 20009fb6 <_write_r+0x1e>
20009fb4:	6023      	str	r3, [r4, #0]
20009fb6:	bd38      	pop	{r3, r4, r5, pc}
20009fb8:	200005f4 	.word	0x200005f4

20009fbc <__errno>:
20009fbc:	4b01      	ldr	r3, [pc, #4]	; (20009fc4 <__errno+0x8>)
20009fbe:	6818      	ldr	r0, [r3, #0]
20009fc0:	4770      	bx	lr
20009fc2:	bf00      	nop
20009fc4:	20000414 	.word	0x20000414

20009fc8 <__libc_init_array>:
20009fc8:	b570      	push	{r4, r5, r6, lr}
20009fca:	4d0d      	ldr	r5, [pc, #52]	; (2000a000 <__libc_init_array+0x38>)
20009fcc:	4c0d      	ldr	r4, [pc, #52]	; (2000a004 <__libc_init_array+0x3c>)
20009fce:	1b64      	subs	r4, r4, r5
20009fd0:	10a4      	asrs	r4, r4, #2
20009fd2:	2600      	movs	r6, #0
20009fd4:	42a6      	cmp	r6, r4
20009fd6:	d109      	bne.n	20009fec <__libc_init_array+0x24>
20009fd8:	4d0b      	ldr	r5, [pc, #44]	; (2000a008 <__libc_init_array+0x40>)
20009fda:	4c0c      	ldr	r4, [pc, #48]	; (2000a00c <__libc_init_array+0x44>)
20009fdc:	f000 f9ee 	bl	2000a3bc <_init>
20009fe0:	1b64      	subs	r4, r4, r5
20009fe2:	10a4      	asrs	r4, r4, #2
20009fe4:	2600      	movs	r6, #0
20009fe6:	42a6      	cmp	r6, r4
20009fe8:	d105      	bne.n	20009ff6 <__libc_init_array+0x2e>
20009fea:	bd70      	pop	{r4, r5, r6, pc}
20009fec:	f855 3b04 	ldr.w	r3, [r5], #4
20009ff0:	4798      	blx	r3
20009ff2:	3601      	adds	r6, #1
20009ff4:	e7ee      	b.n	20009fd4 <__libc_init_array+0xc>
20009ff6:	f855 3b04 	ldr.w	r3, [r5], #4
20009ffa:	4798      	blx	r3
20009ffc:	3601      	adds	r6, #1
20009ffe:	e7f2      	b.n	20009fe6 <__libc_init_array+0x1e>
2000a000:	200003a0 	.word	0x200003a0
2000a004:	200003a0 	.word	0x200003a0
2000a008:	200003a0 	.word	0x200003a0
2000a00c:	200003a4 	.word	0x200003a4

2000a010 <__retarget_lock_init>:
2000a010:	4770      	bx	lr

2000a012 <__retarget_lock_init_recursive>:
2000a012:	4770      	bx	lr

2000a014 <__retarget_lock_close>:
2000a014:	4770      	bx	lr

2000a016 <__retarget_lock_close_recursive>:
2000a016:	4770      	bx	lr

2000a018 <__retarget_lock_acquire>:
2000a018:	4770      	bx	lr

2000a01a <__retarget_lock_acquire_recursive>:
2000a01a:	4770      	bx	lr

2000a01c <__retarget_lock_try_acquire>:
2000a01c:	2001      	movs	r0, #1
2000a01e:	4770      	bx	lr

2000a020 <__retarget_lock_try_acquire_recursive>:
2000a020:	2001      	movs	r0, #1
2000a022:	4770      	bx	lr

2000a024 <__retarget_lock_release>:
2000a024:	4770      	bx	lr

2000a026 <__retarget_lock_release_recursive>:
2000a026:	4770      	bx	lr

2000a028 <_free_r>:
2000a028:	b537      	push	{r0, r1, r2, r4, r5, lr}
2000a02a:	2900      	cmp	r1, #0
2000a02c:	d044      	beq.n	2000a0b8 <_free_r+0x90>
2000a02e:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000a032:	9001      	str	r0, [sp, #4]
2000a034:	2b00      	cmp	r3, #0
2000a036:	f1a1 0404 	sub.w	r4, r1, #4
2000a03a:	bfb8      	it	lt
2000a03c:	18e4      	addlt	r4, r4, r3
2000a03e:	f000 f8df 	bl	2000a200 <__malloc_lock>
2000a042:	4a1e      	ldr	r2, [pc, #120]	; (2000a0bc <_free_r+0x94>)
2000a044:	9801      	ldr	r0, [sp, #4]
2000a046:	6813      	ldr	r3, [r2, #0]
2000a048:	b933      	cbnz	r3, 2000a058 <_free_r+0x30>
2000a04a:	6063      	str	r3, [r4, #4]
2000a04c:	6014      	str	r4, [r2, #0]
2000a04e:	b003      	add	sp, #12
2000a050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2000a054:	f000 b8da 	b.w	2000a20c <__malloc_unlock>
2000a058:	42a3      	cmp	r3, r4
2000a05a:	d908      	bls.n	2000a06e <_free_r+0x46>
2000a05c:	6825      	ldr	r5, [r4, #0]
2000a05e:	1961      	adds	r1, r4, r5
2000a060:	428b      	cmp	r3, r1
2000a062:	bf01      	itttt	eq
2000a064:	6819      	ldreq	r1, [r3, #0]
2000a066:	685b      	ldreq	r3, [r3, #4]
2000a068:	1949      	addeq	r1, r1, r5
2000a06a:	6021      	streq	r1, [r4, #0]
2000a06c:	e7ed      	b.n	2000a04a <_free_r+0x22>
2000a06e:	461a      	mov	r2, r3
2000a070:	685b      	ldr	r3, [r3, #4]
2000a072:	b10b      	cbz	r3, 2000a078 <_free_r+0x50>
2000a074:	42a3      	cmp	r3, r4
2000a076:	d9fa      	bls.n	2000a06e <_free_r+0x46>
2000a078:	6811      	ldr	r1, [r2, #0]
2000a07a:	1855      	adds	r5, r2, r1
2000a07c:	42a5      	cmp	r5, r4
2000a07e:	d10b      	bne.n	2000a098 <_free_r+0x70>
2000a080:	6824      	ldr	r4, [r4, #0]
2000a082:	4421      	add	r1, r4
2000a084:	1854      	adds	r4, r2, r1
2000a086:	42a3      	cmp	r3, r4
2000a088:	6011      	str	r1, [r2, #0]
2000a08a:	d1e0      	bne.n	2000a04e <_free_r+0x26>
2000a08c:	681c      	ldr	r4, [r3, #0]
2000a08e:	685b      	ldr	r3, [r3, #4]
2000a090:	6053      	str	r3, [r2, #4]
2000a092:	440c      	add	r4, r1
2000a094:	6014      	str	r4, [r2, #0]
2000a096:	e7da      	b.n	2000a04e <_free_r+0x26>
2000a098:	d902      	bls.n	2000a0a0 <_free_r+0x78>
2000a09a:	230c      	movs	r3, #12
2000a09c:	6003      	str	r3, [r0, #0]
2000a09e:	e7d6      	b.n	2000a04e <_free_r+0x26>
2000a0a0:	6825      	ldr	r5, [r4, #0]
2000a0a2:	1961      	adds	r1, r4, r5
2000a0a4:	428b      	cmp	r3, r1
2000a0a6:	bf04      	itt	eq
2000a0a8:	6819      	ldreq	r1, [r3, #0]
2000a0aa:	685b      	ldreq	r3, [r3, #4]
2000a0ac:	6063      	str	r3, [r4, #4]
2000a0ae:	bf04      	itt	eq
2000a0b0:	1949      	addeq	r1, r1, r5
2000a0b2:	6021      	streq	r1, [r4, #0]
2000a0b4:	6054      	str	r4, [r2, #4]
2000a0b6:	e7ca      	b.n	2000a04e <_free_r+0x26>
2000a0b8:	b003      	add	sp, #12
2000a0ba:	bd30      	pop	{r4, r5, pc}
2000a0bc:	20000600 	.word	0x20000600

2000a0c0 <sbrk_aligned>:
2000a0c0:	b570      	push	{r4, r5, r6, lr}
2000a0c2:	4e0e      	ldr	r6, [pc, #56]	; (2000a0fc <sbrk_aligned+0x3c>)
2000a0c4:	460c      	mov	r4, r1
2000a0c6:	6831      	ldr	r1, [r6, #0]
2000a0c8:	4605      	mov	r5, r0
2000a0ca:	b911      	cbnz	r1, 2000a0d2 <sbrk_aligned+0x12>
2000a0cc:	f000 f966 	bl	2000a39c <_sbrk_r>
2000a0d0:	6030      	str	r0, [r6, #0]
2000a0d2:	4621      	mov	r1, r4
2000a0d4:	4628      	mov	r0, r5
2000a0d6:	f000 f961 	bl	2000a39c <_sbrk_r>
2000a0da:	1c43      	adds	r3, r0, #1
2000a0dc:	d00a      	beq.n	2000a0f4 <sbrk_aligned+0x34>
2000a0de:	1cc4      	adds	r4, r0, #3
2000a0e0:	f024 0403 	bic.w	r4, r4, #3
2000a0e4:	42a0      	cmp	r0, r4
2000a0e6:	d007      	beq.n	2000a0f8 <sbrk_aligned+0x38>
2000a0e8:	1a21      	subs	r1, r4, r0
2000a0ea:	4628      	mov	r0, r5
2000a0ec:	f000 f956 	bl	2000a39c <_sbrk_r>
2000a0f0:	3001      	adds	r0, #1
2000a0f2:	d101      	bne.n	2000a0f8 <sbrk_aligned+0x38>
2000a0f4:	f04f 34ff 	mov.w	r4, #4294967295
2000a0f8:	4620      	mov	r0, r4
2000a0fa:	bd70      	pop	{r4, r5, r6, pc}
2000a0fc:	20000604 	.word	0x20000604

2000a100 <_malloc_r>:
2000a100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
2000a104:	1ccd      	adds	r5, r1, #3
2000a106:	f025 0503 	bic.w	r5, r5, #3
2000a10a:	3508      	adds	r5, #8
2000a10c:	2d0c      	cmp	r5, #12
2000a10e:	bf38      	it	cc
2000a110:	250c      	movcc	r5, #12
2000a112:	2d00      	cmp	r5, #0
2000a114:	4607      	mov	r7, r0
2000a116:	db01      	blt.n	2000a11c <_malloc_r+0x1c>
2000a118:	42a9      	cmp	r1, r5
2000a11a:	d905      	bls.n	2000a128 <_malloc_r+0x28>
2000a11c:	230c      	movs	r3, #12
2000a11e:	603b      	str	r3, [r7, #0]
2000a120:	2600      	movs	r6, #0
2000a122:	4630      	mov	r0, r6
2000a124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
2000a128:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 2000a1fc <_malloc_r+0xfc>
2000a12c:	f000 f868 	bl	2000a200 <__malloc_lock>
2000a130:	f8d8 3000 	ldr.w	r3, [r8]
2000a134:	461c      	mov	r4, r3
2000a136:	bb5c      	cbnz	r4, 2000a190 <_malloc_r+0x90>
2000a138:	4629      	mov	r1, r5
2000a13a:	4638      	mov	r0, r7
2000a13c:	f7ff ffc0 	bl	2000a0c0 <sbrk_aligned>
2000a140:	1c43      	adds	r3, r0, #1
2000a142:	4604      	mov	r4, r0
2000a144:	d155      	bne.n	2000a1f2 <_malloc_r+0xf2>
2000a146:	f8d8 4000 	ldr.w	r4, [r8]
2000a14a:	4626      	mov	r6, r4
2000a14c:	2e00      	cmp	r6, #0
2000a14e:	d145      	bne.n	2000a1dc <_malloc_r+0xdc>
2000a150:	2c00      	cmp	r4, #0
2000a152:	d048      	beq.n	2000a1e6 <_malloc_r+0xe6>
2000a154:	6823      	ldr	r3, [r4, #0]
2000a156:	4631      	mov	r1, r6
2000a158:	4638      	mov	r0, r7
2000a15a:	eb04 0903 	add.w	r9, r4, r3
2000a15e:	f000 f91d 	bl	2000a39c <_sbrk_r>
2000a162:	4581      	cmp	r9, r0
2000a164:	d13f      	bne.n	2000a1e6 <_malloc_r+0xe6>
2000a166:	6821      	ldr	r1, [r4, #0]
2000a168:	1a6d      	subs	r5, r5, r1
2000a16a:	4629      	mov	r1, r5
2000a16c:	4638      	mov	r0, r7
2000a16e:	f7ff ffa7 	bl	2000a0c0 <sbrk_aligned>
2000a172:	3001      	adds	r0, #1
2000a174:	d037      	beq.n	2000a1e6 <_malloc_r+0xe6>
2000a176:	6823      	ldr	r3, [r4, #0]
2000a178:	442b      	add	r3, r5
2000a17a:	6023      	str	r3, [r4, #0]
2000a17c:	f8d8 3000 	ldr.w	r3, [r8]
2000a180:	2b00      	cmp	r3, #0
2000a182:	d038      	beq.n	2000a1f6 <_malloc_r+0xf6>
2000a184:	685a      	ldr	r2, [r3, #4]
2000a186:	42a2      	cmp	r2, r4
2000a188:	d12b      	bne.n	2000a1e2 <_malloc_r+0xe2>
2000a18a:	2200      	movs	r2, #0
2000a18c:	605a      	str	r2, [r3, #4]
2000a18e:	e00f      	b.n	2000a1b0 <_malloc_r+0xb0>
2000a190:	6822      	ldr	r2, [r4, #0]
2000a192:	1b52      	subs	r2, r2, r5
2000a194:	d41f      	bmi.n	2000a1d6 <_malloc_r+0xd6>
2000a196:	2a0b      	cmp	r2, #11
2000a198:	d917      	bls.n	2000a1ca <_malloc_r+0xca>
2000a19a:	1961      	adds	r1, r4, r5
2000a19c:	42a3      	cmp	r3, r4
2000a19e:	6025      	str	r5, [r4, #0]
2000a1a0:	bf18      	it	ne
2000a1a2:	6059      	strne	r1, [r3, #4]
2000a1a4:	6863      	ldr	r3, [r4, #4]
2000a1a6:	bf08      	it	eq
2000a1a8:	f8c8 1000 	streq.w	r1, [r8]
2000a1ac:	5162      	str	r2, [r4, r5]
2000a1ae:	604b      	str	r3, [r1, #4]
2000a1b0:	4638      	mov	r0, r7
2000a1b2:	f104 060b 	add.w	r6, r4, #11
2000a1b6:	f000 f829 	bl	2000a20c <__malloc_unlock>
2000a1ba:	f026 0607 	bic.w	r6, r6, #7
2000a1be:	1d23      	adds	r3, r4, #4
2000a1c0:	1af2      	subs	r2, r6, r3
2000a1c2:	d0ae      	beq.n	2000a122 <_malloc_r+0x22>
2000a1c4:	1b9b      	subs	r3, r3, r6
2000a1c6:	50a3      	str	r3, [r4, r2]
2000a1c8:	e7ab      	b.n	2000a122 <_malloc_r+0x22>
2000a1ca:	42a3      	cmp	r3, r4
2000a1cc:	6862      	ldr	r2, [r4, #4]
2000a1ce:	d1dd      	bne.n	2000a18c <_malloc_r+0x8c>
2000a1d0:	f8c8 2000 	str.w	r2, [r8]
2000a1d4:	e7ec      	b.n	2000a1b0 <_malloc_r+0xb0>
2000a1d6:	4623      	mov	r3, r4
2000a1d8:	6864      	ldr	r4, [r4, #4]
2000a1da:	e7ac      	b.n	2000a136 <_malloc_r+0x36>
2000a1dc:	4634      	mov	r4, r6
2000a1de:	6876      	ldr	r6, [r6, #4]
2000a1e0:	e7b4      	b.n	2000a14c <_malloc_r+0x4c>
2000a1e2:	4613      	mov	r3, r2
2000a1e4:	e7cc      	b.n	2000a180 <_malloc_r+0x80>
2000a1e6:	230c      	movs	r3, #12
2000a1e8:	603b      	str	r3, [r7, #0]
2000a1ea:	4638      	mov	r0, r7
2000a1ec:	f000 f80e 	bl	2000a20c <__malloc_unlock>
2000a1f0:	e797      	b.n	2000a122 <_malloc_r+0x22>
2000a1f2:	6025      	str	r5, [r4, #0]
2000a1f4:	e7dc      	b.n	2000a1b0 <_malloc_r+0xb0>
2000a1f6:	605b      	str	r3, [r3, #4]
2000a1f8:	deff      	udf	#255	; 0xff
2000a1fa:	bf00      	nop
2000a1fc:	20000600 	.word	0x20000600

2000a200 <__malloc_lock>:
2000a200:	4801      	ldr	r0, [pc, #4]	; (2000a208 <__malloc_lock+0x8>)
2000a202:	f7ff bf0a 	b.w	2000a01a <__retarget_lock_acquire_recursive>
2000a206:	bf00      	nop
2000a208:	200005fd 	.word	0x200005fd

2000a20c <__malloc_unlock>:
2000a20c:	4801      	ldr	r0, [pc, #4]	; (2000a214 <__malloc_unlock+0x8>)
2000a20e:	f7ff bf0a 	b.w	2000a026 <__retarget_lock_release_recursive>
2000a212:	bf00      	nop
2000a214:	200005fd 	.word	0x200005fd

2000a218 <__sflush_r>:
2000a218:	898a      	ldrh	r2, [r1, #12]
2000a21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2000a21e:	4605      	mov	r5, r0
2000a220:	0710      	lsls	r0, r2, #28
2000a222:	460c      	mov	r4, r1
2000a224:	d458      	bmi.n	2000a2d8 <__sflush_r+0xc0>
2000a226:	684b      	ldr	r3, [r1, #4]
2000a228:	2b00      	cmp	r3, #0
2000a22a:	dc05      	bgt.n	2000a238 <__sflush_r+0x20>
2000a22c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
2000a22e:	2b00      	cmp	r3, #0
2000a230:	dc02      	bgt.n	2000a238 <__sflush_r+0x20>
2000a232:	2000      	movs	r0, #0
2000a234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000a238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2000a23a:	2e00      	cmp	r6, #0
2000a23c:	d0f9      	beq.n	2000a232 <__sflush_r+0x1a>
2000a23e:	2300      	movs	r3, #0
2000a240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
2000a244:	682f      	ldr	r7, [r5, #0]
2000a246:	6a21      	ldr	r1, [r4, #32]
2000a248:	602b      	str	r3, [r5, #0]
2000a24a:	d032      	beq.n	2000a2b2 <__sflush_r+0x9a>
2000a24c:	6d60      	ldr	r0, [r4, #84]	; 0x54
2000a24e:	89a3      	ldrh	r3, [r4, #12]
2000a250:	075a      	lsls	r2, r3, #29
2000a252:	d505      	bpl.n	2000a260 <__sflush_r+0x48>
2000a254:	6863      	ldr	r3, [r4, #4]
2000a256:	1ac0      	subs	r0, r0, r3
2000a258:	6b63      	ldr	r3, [r4, #52]	; 0x34
2000a25a:	b10b      	cbz	r3, 2000a260 <__sflush_r+0x48>
2000a25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
2000a25e:	1ac0      	subs	r0, r0, r3
2000a260:	2300      	movs	r3, #0
2000a262:	4602      	mov	r2, r0
2000a264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
2000a266:	6a21      	ldr	r1, [r4, #32]
2000a268:	4628      	mov	r0, r5
2000a26a:	47b0      	blx	r6
2000a26c:	1c43      	adds	r3, r0, #1
2000a26e:	89a3      	ldrh	r3, [r4, #12]
2000a270:	d106      	bne.n	2000a280 <__sflush_r+0x68>
2000a272:	6829      	ldr	r1, [r5, #0]
2000a274:	291d      	cmp	r1, #29
2000a276:	d82b      	bhi.n	2000a2d0 <__sflush_r+0xb8>
2000a278:	4a29      	ldr	r2, [pc, #164]	; (2000a320 <__sflush_r+0x108>)
2000a27a:	410a      	asrs	r2, r1
2000a27c:	07d6      	lsls	r6, r2, #31
2000a27e:	d427      	bmi.n	2000a2d0 <__sflush_r+0xb8>
2000a280:	2200      	movs	r2, #0
2000a282:	6062      	str	r2, [r4, #4]
2000a284:	04d9      	lsls	r1, r3, #19
2000a286:	6922      	ldr	r2, [r4, #16]
2000a288:	6022      	str	r2, [r4, #0]
2000a28a:	d504      	bpl.n	2000a296 <__sflush_r+0x7e>
2000a28c:	1c42      	adds	r2, r0, #1
2000a28e:	d101      	bne.n	2000a294 <__sflush_r+0x7c>
2000a290:	682b      	ldr	r3, [r5, #0]
2000a292:	b903      	cbnz	r3, 2000a296 <__sflush_r+0x7e>
2000a294:	6560      	str	r0, [r4, #84]	; 0x54
2000a296:	6b61      	ldr	r1, [r4, #52]	; 0x34
2000a298:	602f      	str	r7, [r5, #0]
2000a29a:	2900      	cmp	r1, #0
2000a29c:	d0c9      	beq.n	2000a232 <__sflush_r+0x1a>
2000a29e:	f104 0344 	add.w	r3, r4, #68	; 0x44
2000a2a2:	4299      	cmp	r1, r3
2000a2a4:	d002      	beq.n	2000a2ac <__sflush_r+0x94>
2000a2a6:	4628      	mov	r0, r5
2000a2a8:	f7ff febe 	bl	2000a028 <_free_r>
2000a2ac:	2000      	movs	r0, #0
2000a2ae:	6360      	str	r0, [r4, #52]	; 0x34
2000a2b0:	e7c0      	b.n	2000a234 <__sflush_r+0x1c>
2000a2b2:	2301      	movs	r3, #1
2000a2b4:	4628      	mov	r0, r5
2000a2b6:	47b0      	blx	r6
2000a2b8:	1c41      	adds	r1, r0, #1
2000a2ba:	d1c8      	bne.n	2000a24e <__sflush_r+0x36>
2000a2bc:	682b      	ldr	r3, [r5, #0]
2000a2be:	2b00      	cmp	r3, #0
2000a2c0:	d0c5      	beq.n	2000a24e <__sflush_r+0x36>
2000a2c2:	2b1d      	cmp	r3, #29
2000a2c4:	d001      	beq.n	2000a2ca <__sflush_r+0xb2>
2000a2c6:	2b16      	cmp	r3, #22
2000a2c8:	d101      	bne.n	2000a2ce <__sflush_r+0xb6>
2000a2ca:	602f      	str	r7, [r5, #0]
2000a2cc:	e7b1      	b.n	2000a232 <__sflush_r+0x1a>
2000a2ce:	89a3      	ldrh	r3, [r4, #12]
2000a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000a2d4:	81a3      	strh	r3, [r4, #12]
2000a2d6:	e7ad      	b.n	2000a234 <__sflush_r+0x1c>
2000a2d8:	690f      	ldr	r7, [r1, #16]
2000a2da:	2f00      	cmp	r7, #0
2000a2dc:	d0a9      	beq.n	2000a232 <__sflush_r+0x1a>
2000a2de:	0793      	lsls	r3, r2, #30
2000a2e0:	680e      	ldr	r6, [r1, #0]
2000a2e2:	bf08      	it	eq
2000a2e4:	694b      	ldreq	r3, [r1, #20]
2000a2e6:	600f      	str	r7, [r1, #0]
2000a2e8:	bf18      	it	ne
2000a2ea:	2300      	movne	r3, #0
2000a2ec:	eba6 0807 	sub.w	r8, r6, r7
2000a2f0:	608b      	str	r3, [r1, #8]
2000a2f2:	f1b8 0f00 	cmp.w	r8, #0
2000a2f6:	dd9c      	ble.n	2000a232 <__sflush_r+0x1a>
2000a2f8:	6a21      	ldr	r1, [r4, #32]
2000a2fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
2000a2fc:	4643      	mov	r3, r8
2000a2fe:	463a      	mov	r2, r7
2000a300:	4628      	mov	r0, r5
2000a302:	47b0      	blx	r6
2000a304:	2800      	cmp	r0, #0
2000a306:	dc06      	bgt.n	2000a316 <__sflush_r+0xfe>
2000a308:	89a3      	ldrh	r3, [r4, #12]
2000a30a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000a30e:	81a3      	strh	r3, [r4, #12]
2000a310:	f04f 30ff 	mov.w	r0, #4294967295
2000a314:	e78e      	b.n	2000a234 <__sflush_r+0x1c>
2000a316:	4407      	add	r7, r0
2000a318:	eba8 0800 	sub.w	r8, r8, r0
2000a31c:	e7e9      	b.n	2000a2f2 <__sflush_r+0xda>
2000a31e:	bf00      	nop
2000a320:	dfbffffe 	.word	0xdfbffffe

2000a324 <_fflush_r>:
2000a324:	b538      	push	{r3, r4, r5, lr}
2000a326:	690b      	ldr	r3, [r1, #16]
2000a328:	4605      	mov	r5, r0
2000a32a:	460c      	mov	r4, r1
2000a32c:	b913      	cbnz	r3, 2000a334 <_fflush_r+0x10>
2000a32e:	2500      	movs	r5, #0
2000a330:	4628      	mov	r0, r5
2000a332:	bd38      	pop	{r3, r4, r5, pc}
2000a334:	b118      	cbz	r0, 2000a33e <_fflush_r+0x1a>
2000a336:	6a03      	ldr	r3, [r0, #32]
2000a338:	b90b      	cbnz	r3, 2000a33e <_fflush_r+0x1a>
2000a33a:	f7ff fd03 	bl	20009d44 <__sinit>
2000a33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
2000a342:	2b00      	cmp	r3, #0
2000a344:	d0f3      	beq.n	2000a32e <_fflush_r+0xa>
2000a346:	6e62      	ldr	r2, [r4, #100]	; 0x64
2000a348:	07d0      	lsls	r0, r2, #31
2000a34a:	d404      	bmi.n	2000a356 <_fflush_r+0x32>
2000a34c:	0599      	lsls	r1, r3, #22
2000a34e:	d402      	bmi.n	2000a356 <_fflush_r+0x32>
2000a350:	6da0      	ldr	r0, [r4, #88]	; 0x58
2000a352:	f7ff fe62 	bl	2000a01a <__retarget_lock_acquire_recursive>
2000a356:	4628      	mov	r0, r5
2000a358:	4621      	mov	r1, r4
2000a35a:	f7ff ff5d 	bl	2000a218 <__sflush_r>
2000a35e:	6e63      	ldr	r3, [r4, #100]	; 0x64
2000a360:	07da      	lsls	r2, r3, #31
2000a362:	4605      	mov	r5, r0
2000a364:	d4e4      	bmi.n	2000a330 <_fflush_r+0xc>
2000a366:	89a3      	ldrh	r3, [r4, #12]
2000a368:	059b      	lsls	r3, r3, #22
2000a36a:	d4e1      	bmi.n	2000a330 <_fflush_r+0xc>
2000a36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
2000a36e:	f7ff fe5a 	bl	2000a026 <__retarget_lock_release_recursive>
2000a372:	e7dd      	b.n	2000a330 <_fflush_r+0xc>

2000a374 <fflush>:
2000a374:	4601      	mov	r1, r0
2000a376:	b920      	cbnz	r0, 2000a382 <fflush+0xe>
2000a378:	4a04      	ldr	r2, [pc, #16]	; (2000a38c <fflush+0x18>)
2000a37a:	4905      	ldr	r1, [pc, #20]	; (2000a390 <fflush+0x1c>)
2000a37c:	4805      	ldr	r0, [pc, #20]	; (2000a394 <fflush+0x20>)
2000a37e:	f7ff bd15 	b.w	20009dac <_fwalk_sglue>
2000a382:	4b05      	ldr	r3, [pc, #20]	; (2000a398 <fflush+0x24>)
2000a384:	6818      	ldr	r0, [r3, #0]
2000a386:	f7ff bfcd 	b.w	2000a324 <_fflush_r>
2000a38a:	bf00      	nop
2000a38c:	200003bc 	.word	0x200003bc
2000a390:	2000a325 	.word	0x2000a325
2000a394:	200003c8 	.word	0x200003c8
2000a398:	20000414 	.word	0x20000414

2000a39c <_sbrk_r>:
2000a39c:	b538      	push	{r3, r4, r5, lr}
2000a39e:	4d06      	ldr	r5, [pc, #24]	; (2000a3b8 <_sbrk_r+0x1c>)
2000a3a0:	2300      	movs	r3, #0
2000a3a2:	4604      	mov	r4, r0
2000a3a4:	4608      	mov	r0, r1
2000a3a6:	602b      	str	r3, [r5, #0]
2000a3a8:	f7f7 f80c 	bl	200013c4 <_sbrk>
2000a3ac:	1c43      	adds	r3, r0, #1
2000a3ae:	d102      	bne.n	2000a3b6 <_sbrk_r+0x1a>
2000a3b0:	682b      	ldr	r3, [r5, #0]
2000a3b2:	b103      	cbz	r3, 2000a3b6 <_sbrk_r+0x1a>
2000a3b4:	6023      	str	r3, [r4, #0]
2000a3b6:	bd38      	pop	{r3, r4, r5, pc}
2000a3b8:	200005f4 	.word	0x200005f4

2000a3bc <_init>:
2000a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000a3be:	bf00      	nop
2000a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000a3c2:	bc08      	pop	{r3}
2000a3c4:	469e      	mov	lr, r3
2000a3c6:	4770      	bx	lr

2000a3c8 <_fini>:
2000a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000a3ca:	bf00      	nop
2000a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000a3ce:	bc08      	pop	{r3}
2000a3d0:	469e      	mov	lr, r3
2000a3d2:	4770      	bx	lr

Disassembly of section .RamFunc:

2000a3d4 <HAL_FLASHEx_StopFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StopFlashInterfaceClk(void)
{
2000a3d4:	b480      	push	{r7}
2000a3d6:	b083      	sub	sp, #12
2000a3d8:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a3da:	2300      	movs	r3, #0
2000a3dc:	607b      	str	r3, [r7, #4]
2000a3de:	4b0c      	ldr	r3, [pc, #48]	; (2000a410 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000a3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a3e2:	4a0b      	ldr	r2, [pc, #44]	; (2000a410 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000a3e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000a3e8:	6413      	str	r3, [r2, #64]	; 0x40
2000a3ea:	4b09      	ldr	r3, [pc, #36]	; (2000a410 <HAL_FLASHEx_StopFlashInterfaceClk+0x3c>)
2000a3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000a3f2:	607b      	str	r3, [r7, #4]
2000a3f4:	687b      	ldr	r3, [r7, #4]
  /* Stop the flash interface while System Run */  
  SET_BIT(PWR->CR, PWR_CR_FISSR);
2000a3f6:	4b07      	ldr	r3, [pc, #28]	; (2000a414 <HAL_FLASHEx_StopFlashInterfaceClk+0x40>)
2000a3f8:	681b      	ldr	r3, [r3, #0]
2000a3fa:	4a06      	ldr	r2, [pc, #24]	; (2000a414 <HAL_FLASHEx_StopFlashInterfaceClk+0x40>)
2000a3fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2000a400:	6013      	str	r3, [r2, #0]
   
  return HAL_OK;
2000a402:	2300      	movs	r3, #0
}
2000a404:	4618      	mov	r0, r3
2000a406:	370c      	adds	r7, #12
2000a408:	46bd      	mov	sp, r7
2000a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a40e:	4770      	bx	lr
2000a410:	40023800 	.word	0x40023800
2000a414:	40007000 	.word	0x40007000

2000a418 <HAL_FLASHEx_StartFlashInterfaceClk>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_StartFlashInterfaceClk(void)
{
2000a418:	b480      	push	{r7}
2000a41a:	b083      	sub	sp, #12
2000a41c:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a41e:	2300      	movs	r3, #0
2000a420:	607b      	str	r3, [r7, #4]
2000a422:	4b0c      	ldr	r3, [pc, #48]	; (2000a454 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000a424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a426:	4a0b      	ldr	r2, [pc, #44]	; (2000a454 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000a428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000a42c:	6413      	str	r3, [r2, #64]	; 0x40
2000a42e:	4b09      	ldr	r3, [pc, #36]	; (2000a454 <HAL_FLASHEx_StartFlashInterfaceClk+0x3c>)
2000a430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000a436:	607b      	str	r3, [r7, #4]
2000a438:	687b      	ldr	r3, [r7, #4]
  /* Start the flash interface while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FISSR);
2000a43a:	4b07      	ldr	r3, [pc, #28]	; (2000a458 <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
2000a43c:	681b      	ldr	r3, [r3, #0]
2000a43e:	4a06      	ldr	r2, [pc, #24]	; (2000a458 <HAL_FLASHEx_StartFlashInterfaceClk+0x40>)
2000a440:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
2000a444:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000a446:	2300      	movs	r3, #0
}
2000a448:	4618      	mov	r0, r3
2000a44a:	370c      	adds	r7, #12
2000a44c:	46bd      	mov	sp, r7
2000a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a452:	4770      	bx	lr
2000a454:	40023800 	.word	0x40023800
2000a458:	40007000 	.word	0x40007000

2000a45c <HAL_FLASHEx_EnableFlashSleepMode>:
  * @note  This mode could n't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_EnableFlashSleepMode(void)
{
2000a45c:	b480      	push	{r7}
2000a45e:	b083      	sub	sp, #12
2000a460:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a462:	2300      	movs	r3, #0
2000a464:	607b      	str	r3, [r7, #4]
2000a466:	4b0c      	ldr	r3, [pc, #48]	; (2000a498 <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000a468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a46a:	4a0b      	ldr	r2, [pc, #44]	; (2000a498 <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000a46c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000a470:	6413      	str	r3, [r2, #64]	; 0x40
2000a472:	4b09      	ldr	r3, [pc, #36]	; (2000a498 <HAL_FLASHEx_EnableFlashSleepMode+0x3c>)
2000a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000a47a:	607b      	str	r3, [r7, #4]
2000a47c:	687b      	ldr	r3, [r7, #4]
  /* Enable the flash sleep while System Run */
  SET_BIT(PWR->CR, PWR_CR_FMSSR);
2000a47e:	4b07      	ldr	r3, [pc, #28]	; (2000a49c <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
2000a480:	681b      	ldr	r3, [r3, #0]
2000a482:	4a06      	ldr	r2, [pc, #24]	; (2000a49c <HAL_FLASHEx_EnableFlashSleepMode+0x40>)
2000a484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2000a488:	6013      	str	r3, [r2, #0]

  return HAL_OK;
2000a48a:	2300      	movs	r3, #0
}
2000a48c:	4618      	mov	r0, r3
2000a48e:	370c      	adds	r7, #12
2000a490:	46bd      	mov	sp, r7
2000a492:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a496:	4770      	bx	lr
2000a498:	40023800 	.word	0x40023800
2000a49c:	40007000 	.word	0x40007000

2000a4a0 <HAL_FLASHEx_DisableFlashSleepMode>:
  * @note  This mode couldn't be set while executing with the flash itself. 
  *        It should be done with specific routine executed from RAM.     
  * @retval HAL status
  */
__RAM_FUNC HAL_StatusTypeDef HAL_FLASHEx_DisableFlashSleepMode(void)
{
2000a4a0:	b480      	push	{r7}
2000a4a2:	b083      	sub	sp, #12
2000a4a4:	af00      	add	r7, sp, #0
  /* Enable Power ctrl clock */
  __HAL_RCC_PWR_CLK_ENABLE();
2000a4a6:	2300      	movs	r3, #0
2000a4a8:	607b      	str	r3, [r7, #4]
2000a4aa:	4b0c      	ldr	r3, [pc, #48]	; (2000a4dc <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000a4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a4ae:	4a0b      	ldr	r2, [pc, #44]	; (2000a4dc <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000a4b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000a4b4:	6413      	str	r3, [r2, #64]	; 0x40
2000a4b6:	4b09      	ldr	r3, [pc, #36]	; (2000a4dc <HAL_FLASHEx_DisableFlashSleepMode+0x3c>)
2000a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000a4ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000a4be:	607b      	str	r3, [r7, #4]
2000a4c0:	687b      	ldr	r3, [r7, #4]
  /* Disable the flash sleep while System Run */
  CLEAR_BIT(PWR->CR, PWR_CR_FMSSR);
2000a4c2:	4b07      	ldr	r3, [pc, #28]	; (2000a4e0 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
2000a4c4:	681b      	ldr	r3, [r3, #0]
2000a4c6:	4a06      	ldr	r2, [pc, #24]	; (2000a4e0 <HAL_FLASHEx_DisableFlashSleepMode+0x40>)
2000a4c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
2000a4cc:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;
2000a4ce:	2300      	movs	r3, #0
}
2000a4d0:	4618      	mov	r0, r3
2000a4d2:	370c      	adds	r7, #12
2000a4d4:	46bd      	mov	sp, r7
2000a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000a4da:	4770      	bx	lr
2000a4dc:	40023800 	.word	0x40023800
2000a4e0:	40007000 	.word	0x40007000
